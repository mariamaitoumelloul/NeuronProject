#line 2 "/home/INTRANET/aitoumel/myfiles/NeuronProject/Week1/doxygen-master/build/generated_src/commentcnv.cpp"

#line 4 "/home/INTRANET/aitoumel/myfiles/NeuronProject/Week1/doxygen-master/build/generated_src/commentcnv.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer commentcnvYY_create_buffer
#define yy_delete_buffer commentcnvYY_delete_buffer
#define yy_flex_debug commentcnvYY_flex_debug
#define yy_init_buffer commentcnvYY_init_buffer
#define yy_flush_buffer commentcnvYY_flush_buffer
#define yy_load_buffer_state commentcnvYY_load_buffer_state
#define yy_switch_to_buffer commentcnvYY_switch_to_buffer
#define yyin commentcnvYYin
#define yyleng commentcnvYYleng
#define yylex commentcnvYYlex
#define yylineno commentcnvYYlineno
#define yyout commentcnvYYout
#define yyrestart commentcnvYYrestart
#define yytext commentcnvYYtext
#define yywrap commentcnvYYwrap
#define yyalloc commentcnvYYalloc
#define yyrealloc commentcnvYYrealloc
#define yyfree commentcnvYYfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE commentcnvYYrestart(commentcnvYYin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int commentcnvYYleng;

extern FILE *commentcnvYYin, *commentcnvYYout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up commentcnvYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up commentcnvYYtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via commentcnvYYrestart()), so that the user can continue scanning by
	 * just pointing commentcnvYYin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when commentcnvYYtext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int commentcnvYYleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow commentcnvYYwrap()'s to do buffer switches
 * instead of setting up a fresh commentcnvYYin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void commentcnvYYrestart (FILE *input_file  );
void commentcnvYY_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE commentcnvYY_create_buffer (FILE *file,int size  );
void commentcnvYY_delete_buffer (YY_BUFFER_STATE b  );
void commentcnvYY_flush_buffer (YY_BUFFER_STATE b  );
void commentcnvYYpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void commentcnvYYpop_buffer_state (void );

static void commentcnvYYensure_buffer_stack (void );
static void commentcnvYY_load_buffer_state (void );
static void commentcnvYY_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER commentcnvYY_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE commentcnvYY_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE commentcnvYY_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE commentcnvYY_scan_bytes (yyconst char *bytes,int len  );

void *commentcnvYYalloc (yy_size_t  );
void *commentcnvYYrealloc (void *,yy_size_t  );
void commentcnvYYfree (void *  );

#define yy_new_buffer commentcnvYY_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        commentcnvYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            commentcnvYY_create_buffer(commentcnvYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        commentcnvYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            commentcnvYY_create_buffer(commentcnvYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define commentcnvYYwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *commentcnvYYin = (FILE *) 0, *commentcnvYYout = (FILE *) 0;

typedef int yy_state_type;

extern int commentcnvYYlineno;

int commentcnvYYlineno = 1;

extern char *commentcnvYYtext;
#define yytext_ptr commentcnvYYtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up commentcnvYYtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	commentcnvYYleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 86
#define YY_END_OF_BUFFER 87
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[342] =
    {   0,
        1,    1,   43,   43,   31,   31,   31,   31,   72,   72,
       87,   86,    1,   25,   86,   10,   86,   25,   86,    8,
       25,   86,   18,   25,   86,    9,   25,   86,    1,   25,
       86,    2,   25,   86,   25,   86,   25,   86,   25,   86,
       37,   86,   38,   86,   36,   37,   86,   37,   86,   41,
       86,   42,   86,   40,   41,   86,   41,   86,   66,   86,
       86,   86,   43,   52,   86,   46,   86,   52,   86,   52,
       86,   44,   52,   86,   52,   86,   52,   86,   52,   86,
       31,   34,   86,   32,   86,   34,   86,   34,   86,   31,
       34,   86,   34,   86,   34,   86,   27,   34,   86,   28,

       34,   86,   31,   34,   86,   34,   86,   85,   86,   67,
       86,   85,   86,   74,   86,   71,   72,   74,   86,   71,
       74,   86,   79,   84,   86,   81,   86,   84,   86,   80,
       84,   86,   82,   84,   86,   83,   84,   86,   79,   84,
       86,   79,   84,   86,    1,    6,   20,   18,    1,    7,
        1,   17,   35,   39,   43,   51,   49,   50,   44,   44,
       48,   47,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   31,   31,   31,   30,   67,   71,
       72,   71,   79,   78,   79,   79,   79,    4,    6,    5,
        7,    1,   19,   17,   17,   15,16396,   58,   45,   68,

       75,   76,   75,   75,   75,   23,   23,   76,   75,   75,
       75,   75,   75,   75,   75,   75,   26,   33,   30,   79,
    16461,    3,   16,   15,   15,16396,   61,16444,16443,16448,
    16439,   53,   68,   68,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75, 8269,   79, 8269,   15,
    16447,16447,16446,16447,16449,16441,16441,   54,16441,16441,
     8252, 8251, 8256, 8247,   75,   75,   22,   22,   76,   75,
       75,   75,   75,   75,   75,   75,   75, 8255, 8254, 8257,
     8249,   69,   69,   69,   73,   69,   76,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   56, 8255,   56, 8249,

       73,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       21,   29,   11,   11,   11,   56, 8254,   75,   75,   75,
       75,   75,   75,   75,   14, 8204, 8204, 8204,   14,   75,
       70,   70,   76,   75,   24,   24,   76,   75,   75,   13,
       15
    } ;

static yyconst flex_int16_t yy_accept[430] =
    {   0,
        1,    1,    1,    2,    3,    3,    3,    3,    3,    3,
        3,    4,    5,    6,    7,    8,    9,    9,    9,   10,
       11,   11,   11,   12,   13,   16,   18,   20,   23,   26,
       29,   32,   35,   37,   39,   41,   43,   45,   48,   50,
       52,   54,   57,   59,   61,   62,   63,   66,   68,   70,
       72,   75,   77,   79,   81,   84,   86,   88,   90,   93,
       95,   97,  100,  103,  106,  108,  110,  112,  114,  116,
      120,  123,  126,  128,  130,  133,  136,  139,  142,  145,
      146,  146,  147,  148,  148,  149,  150,  151,  151,  151,
      152,  152,  153,  153,  154,  155,  155,  155,  155,  155,

      155,  156,  157,  157,  158,  159,  159,  160,  161,  162,
      163,  163,  163,  164,  165,  166,  167,  168,  169,  170,
      171,  172,  173,  174,  175,  175,  176,  176,  176,  177,
      177,  177,  177,  178,  178,  179,  179,  180,  182,  183,
      184,  185,  186,  187,  188,  188,  190,  190,  190,  192,
      193,  194,  195,  196,  196,  197,  197,  197,  198,  198,
      199,  199,  199,  200,  201,  202,  203,  204,  205,  206,
      207,  209,  210,  211,  212,  213,  214,  215,  216,  217,
      217,  217,  218,  219,  219,  220,  222,  223,  224,  224,
      225,  225,  225,  226,  227,  228,  228,  228,  229,  230,

      231,  232,  233,  233,  234,  235,  236,  237,  238,  239,
      240,  241,  242,  243,  244,  245,  246,  247,  247,  247,
      247,  249,  250,  250,  250,  250,  250,  251,  251,  251,
      251,  251,  252,  253,  254,  255,  256,  257,  258,  259,
      259,  260,  261,  261,  262,  262,  263,  263,  264,  264,
      265,  266,  267,  268,  270,  271,  272,  273,  274,  275,
      276,  277,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  279,  279,  279,  279,  279,  280,  280,
      280,  280,  281,  281,  282,  282,  282,  282,  283,  284,

      286,  288,  289,  290,  291,  292,  293,  294,  295,  296,
      297,  297,  297,  297,  297,  297,  297,  297,  297,  297,
      297,  297,  297,  297,  297,  297,  297,  297,  297,  297,
      297,  297,  299,  299,  301,  301,  302,  303,  304,  305,
      306,  307,  308,  309,  310,  311,  312,  312,  312,  312,
      312,  312,  312,  312,  312,  313,  314,  315,  316,  316,
      316,  316,  316,  316,  316,  316,  316,  318,  319,  320,
      321,  322,  323,  324,  325,  325,  325,  325,  325,  325,
      325,  325,  326,  326,  327,  328,  329,  330,  331,  332,
      334,  335,  336,  338,  338,  338,  338,  338,  338,  338,

      338,  338,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  340,  340,  340,  340,  340,  340,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  342,  342
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    7,    8,    1,    9,   10,    9,
        9,   11,    1,   12,   13,    9,   14,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,    1,    1,   16,
        1,   17,    1,   18,   19,   19,   20,   21,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       22,   23,   24,    1,   19,    1,   25,   26,   27,   28,

       29,   30,   19,   31,   32,   19,   33,   34,   35,   36,
       37,   19,   19,   38,   39,   40,   41,   42,   19,   43,
       44,   19,   45,   46,   47,   48,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[49] =
    {   0,
        1,    2,    3,    1,    4,    5,    6,    1,    7,    6,
        8,    6,    9,   10,   11,    1,    1,   12,   13,   13,
       13,    1,   14,    1,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   15,    7,   16,   17
    } ;

static yyconst flex_int16_t yy_base[481] =
    {   0,
        0,    0,    0,   25,   18,   19,    6,   23, 1617,   41,
       53,   96,   47,   66,   59,  106,   31,   60,  153,    0,
       92,  200, 1619, 1621,    0, 1621,   69, 1612, 1610, 1621,
      245, 1621, 1603,    4, 1621, 1621, 1621, 1621,    0, 1621,
     1621, 1621,    0,   73,   77, 1601,    0,  110, 1621, 1608,
       46,   79,  251, 1595,    0, 1621, 1621,   67,   86, 1598,
     1582, 1621, 1621,  114, 1596, 1606, 1621,    0, 1621, 1606,
        0,    0, 1621, 1593, 1621, 1621, 1621,  116, 1592,    0,
     1602, 1621, 1601, 1597, 1621,  293, 1621, 1599, 1598,  314,
     1595,   42,  128, 1621, 1621,  120, 1585,  124, 1584,  138,

        0, 1621,  202, 1621, 1621, 1591,  133,  135, 1621, 1621,
      194,    0, 1551,   95,  173,   91,  198,  167,   80,  188,
      176,  177,  190,  189, 1568,    0, 1558,  217,  224, 1579,
     1578, 1555,  226, 1576,    3, 1586, 1621, 1586,    0,    0,
     1621,  228, 1573,  232, 1583, 1621, 1580, 1581, 1621,  335,
     1621, 1621, 1569, 1579, 1621, 1578,  229,   37,  249, 1540,
     1515,  246, 1621, 1394, 1249, 1621,  273,  270,  280, 1621,
     1621,  194,  289,  208,  277,   36,  286,  228,  268, 1206,
     1211, 1621, 1621, 1209, 1621,  312, 1621, 1621, 1233,  330,
      309, 1232,  348,  340,  337, 1227,  361, 1230, 1229, 1228,

     1227, 1621,  353, 1157, 1155,  307,  333,  288,  384,  338,
      335,  337,  230,  331,  336,  373,  366, 1041,  381,  386,
      394,    0,  408, 1054,  228, 1064,  423, 1058,  431,  424,
      432, 1053,  440,  446,  425, 1049, 1047,  448, 1621,  433,
      450,  437, 1045, 1621, 1043, 1621, 1042, 1621, 1040, 1621,
      484,  417, 1621, 1621,  420,  422,  105,  425,  438,  415,
      431,  467, 1009,  999,  983,  997,  996,  979,  988,  975,
      968,  967,  963,  960,  499,  343,  497,  979,  503,  957,
      506,  967, 1621,  516,  474,  965,  520, 1621,  477,  963,
      961, 1621,  958, 1621,  523,  507,  957, 1621,  369, 1621,

     1621,  490,  492,  497,  499,  506,  513,  434,  508,  515,
      479,  932,  907,  885,  849,  851,  842,  843,  848,  835,
      847,  697,    0,  548,  554,  475,  550,  554,  560,  727,
      726, 1621,  725, 1621,  571, 1621,  524,  537,  536,  531,
      470,  535,  549,  553,  542, 1621,  701,  692,  696,  687,
      686,  696,  684,  691, 1621, 1621,  586,  672,  587,  671,
      558,    0,  588,  589,  592,  714, 1621,  563,  639,  557,
      569,  687,  579,  580,  679,  678,  671,  677,  676,  683,
      671, 1621,  594, 1621,  614,  659,  699,  581, 1621, 1621,
      574, 1621, 1621,  646,  646,  644,  646,  645,  638,  643,

      618,  586,  643,  641,  638,  629,  628,  639,  626,  596,
      583,  631,  623,  601,  599,  635,  408,  376,  619,  370,
      626,   77,  627,  630,   16,    1, 1621, 1621,  735,  752,
      769,  786,  803,  820,  837,  854,  871,  888,  905,  922,
      939,  956,  973,  990, 1007, 1024, 1040, 1053, 1070, 1087,
     1104, 1121, 1138,  652, 1145, 1160, 1177, 1194, 1211, 1227,
     1240, 1257, 1274, 1291, 1308, 1325, 1342, 1359, 1376, 1393,
     1410, 1427, 1444, 1461, 1478, 1495, 1512, 1529, 1546, 1563
    } ;

static yyconst flex_int16_t yy_def[481] =
    {   0,
      429,  429,  430,  430,  431,  431,  432,  432,  429,  429,
      433,  433,  434,  434,  434,  434,  435,  435,  428,   19,
      436,  436,  428,  428,  437,  428,  438,  428,  428,  428,
      439,  428,  428,  428,  428,  428,  428,  428,  440,  428,
      428,  428,  441,  428,  428,  428,  442,  443,  428,  428,
      444,  428,  428,  428,  445,  428,  428,  428,  445,  428,
      428,  428,  428,  445,  428,  446,  428,   53,  428,  447,
      447,  448,  428,  428,  428,  428,  428,  448,  448,  437,
      438,  428,  449,  428,  428,  439,  428,  450,  451,  452,
      428,  428,  453,  428,  428,  428,  428,  428,  428,  428,

      442,  428,  443,  428,  428,  428,  444,  444,  428,  428,
      428,  454,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  428,  445,  428,  428,  445,  428,
      428,  428,  445,  428,  428,  446,  428,  447,  447,  448,
      428,  448,  448,  448,  449,  428,  428,  450,  428,  452,
      428,  428,  428,  453,  428,  456,  453,  457,  428,  458,
      428,  459,  428,  460,  455,  428,  455,  455,  455,  428,
      428,  455,  455,  455,  455,  455,  455,  455,  455,  428,
      428,  428,  428,  428,  428,  461,  428,  428,  456,  428,
      453,  462,  463,  457,  464,  428,  465,  466,  467,  468,

      469,  428,  428,  428,  460,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  428,  428,  428,
      461,  470,  428,  428,  453,  462,  428,  463,  463,  428,
      463,  471,  471,  472,  471,  473,  474,  474,  428,  428,
      474,  474,  466,  428,  467,  428,  468,  428,  469,  428,
      455,  455,  428,  428,  455,  455,  455,  455,  455,  455,
      455,  455,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  453,  428,  428,  428,  428,
      463,  471,  428,  471,  471,  472,  472,  428,  472,  475,
      473,  428,  474,  428,  474,  474,  476,  428,  428,  428,

      428,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  477,  477,  428,  453,  428,  428,  463,  478,
      475,  428,  476,  428,  428,  428,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      453,  479,  479,  463,  463,  478,  428,  455,  455,  455,
      455,  455,  455,  455,  428,  428,  428,  428,  428,  428,
      428,  428,  453,  428,  428,  428,  463,  455,  428,  428,
      455,  428,  428,  428,  428,  428,  428,  428,  428,  428,

      453,  455,  428,  428,  428,  428,  428,  428,  428,  453,
      455,  428,  428,  428,  428,  453,  428,  428,  453,  428,
      453,  428,  453,  453,  480,  480,  428,    0,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428
    } ;

static yyconst flex_int16_t yy_nxt[1670] =
    {   0,
      428,  428,   26,  427,   27,   28,   29,  185,   41,   30,
       31,   32,   33,   34,   92,   42,  185,   93,  427,   31,
       37,   37,   35,   38,   38,   41,   31,   26,   43,   27,
       28,   29,   42,   67,   30,   31,   32,   33,   34,  193,
       39,   39,   45,   44,   31,   43,  152,   35,   68,   56,
      194,   31,  153,   68,   46,   48,  108,   49,   50,  109,
       57,   56,   67,   51,   58,  214,   52,   59,   56,   58,
       53,   82,   57,   83,   96,   53,   61,   68,   98,   60,
      166,   61,   68,   58,   83,   83,   97,  129,   58,  110,
       99,   57,  111,   57,   73,  127,  128,   54,   48,  130,

       49,   50,   74,   62,  173,   63,   51,   64,   56,   52,
       57,  103,   57,   53,   75,  133,  104,  142,   53,   65,
      182,   96,  105,   61,  166,   98,  169,  134,   61,  143,
      155,  167,  156,   97,  157,  166,   76,   99,   77,  166,
       54,  158,  160,  428,  161,  108,  428,  305,  109,  166,
       62,  162,   63,   69,   70,   24,   69,   71,   69,   69,
       69,   71,   69,   69,   69,   71,   69,   71,   69,   69,
       69,   71,   71,   71,   69,   69,   69,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   69,   71,   69,

       69,   78,   73,  103,  110,  170,  172,  111,  104,  168,
       74,  166,  174,   79,  105,  176,  177,  166,  178,  170,
      166,  166,   75,  179,  182,  129,  175,  133,  211,  142,
      155,  155,  166,  166,  166,  191,  186,  130,  166,  134,
      182,  143,  171,  213,   76,  186,   77,   87,  202,   88,
       89,   89,  166,  195,   89,  196,   89,   89,   89,  203,
       90,   90,  197,  182,  276,  216,  258,   89,  112,  113,
      113,  113,  166,  112,  166,  113,  113,  114,  115,  116,
      117,  118,  113,  113,  119,  120,  113,  113,  121,  122,
      113,  113,  123,  124,  113,   87,  208,   89,   89,   89,

      206,  217,   89,  209,   89,   89,   89,  210,  207,  209,
      215,  155,  166,  252,  166,   89,  149,  166,  148,  148,
      148,  166,  222,  148,  166,  148,  148,  148,  212,  225,
      166,  223,  166,  166,  222,  209,  148,  149,  233,  148,
      148,  148,  193,  224,  148,  155,  148,  148,  148,  229,
      230,  166,  234,  194,  235,  202,  222,  148,  222,  235,
      251,  231,  238,  239,  255,  257,  203,  259,  256,  326,
      335,  336,  335,  260,  240,  166,  241,  166,  242,  166,
      166,  166,  166,  242,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  261,  253,

      253,  253,  262,  422,  222,  253,  253,  253,  264,  223,
      166,  265,  271,  272,  266,  267,  222,  166,  268,  182,
      273,  224,  269,  270,  277,  279,  274,  283,  254,  253,
      253,  253,  229,  230,  230,  239,  278,  280,  222,  294,
      222,  284,  283,  420,  231,  281,  240,  287,  288,  295,
      294,  295,  294,  302,  308,  309,  303,  285,  304,  166,
      306,  166,  285,  289,  166,  296,  166,  296,  289,  166,
      296,  290,  296,  307,  343,  166,  283,  155,  166,  288,
      346,  346,  166,  297,  298,  299,  300,  299,  298,  298,
      298,  298,  298,  298,  298,  298,  298,  298,  277,  298,

      298,  298,  310,  323,  279,  298,  298,  298,  230,  294,
      278,  166,  324,  372,  166,  361,  280,  284,  283,  329,
      290,  287,  288,  330,  295,  294,  337,  338,  301,  298,
      298,  298,  339,  285,  166,  340,  166,  289,  285,  341,
      296,  166,  289,  166,  325,  296,  342,  344,  345,  357,
      166,  329,  166,  297,  362,  359,  368,  166,  362,  166,
      155,  364,  230,  363,  369,  358,  371,  362,  166,  370,
      358,  360,  335,  336,  335,  166,  360,  365,  372,  166,
      166,  166,  365,  373,  374,  372,  166,  359,  359,  385,
      364,  230,  383,  166,  230,  325,  155,  166,  155,  388,

      372,  166,  391,  360,  360,  386,  365,  166,  360,  360,
      386,  365,  209,  166,  372,  359,  402,  372,  166,  411,
      155,  155,  401,  166,  166,  166,  372,  166,  155,  155,
      166,  360,  155,  182,  418,  416,  360,  155,  387,  389,
      389,  389,  389,  389,  389,  389,  389,  389,  389,  389,
      389,  389,  389,  410,  389,  389,  389,  423,  421,  419,
      389,  389,  389,  424,  164,  425,  182,  417,  164,  182,
      415,  182,  182,  414,  413,  412,  409,  408,  407,  406,
      405,  404,  403,  390,  389,  389,  389,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,

      392,  230,  392,  392,  392,  382,  400,  399,  392,  392,
      392,  398,  397,  396,  395,  394,  367,  382,  382,  355,
      381,  380,  379,  378,  377,  376,  375,  334,  332,  367,
      355,  393,  392,  392,  392,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   36,
       36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
       36,   36,   36,   36,   36,   36,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,

       40,   40,   40,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   80,   80,  355,  355,  354,  353,   80,   80,  352,
      351,   80,   80,   80,  350,   80,   80,   80,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,

       81,   81,   81,   81,   81,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   94,   94,  349,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   95,
       95,  348,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,  101,  101,  347,  334,
      294,  101,  101,  292,  101,  332,  101,  288,  101,  283,
      328,  101,  101,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      107,  107,  327,  107,  322,  107,  107,  107,  107,  107,

      107,  321,  107,  320,  319,  107,  107,  126,  126,  318,
      126,  126,  126,  126,  126,  126,  317,  126,  316,  126,
      315,  314,  313,  126,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  312,  136,  311,  136,  136,
      136,  139,  250,  139,  248,  246,  139,  244,  139,  294,
      139,  292,  139,  140,  140,  283,  140,  140,  140,  140,
      230,  140,  140,  140,  140,  140,  227,  275,  263,  140,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  148,  148,  148,
      148,  148,  148,  148,  148,  148,  148,  148,  148,  148,

      148,  148,  148,  148,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  165,  204,  165,  204,  165,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  189,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  198,  198,  198,  198,  198,  198,

      198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
      198,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  205,  250,
      248,  246,  244,  236,  227,  190,  220,  205,  219,  205,
      221,  221,  218,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  232,  232,  166,  232,  232,  232,  232,  232,  232,

      232,  232,  232,  232,  232,  232,  232,  232,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  243,  243,  243,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
      243,  243,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  249,  249,  249,  249,
      249,  249,  249,  249,  249,  249,  249,  249,  249,  249,
      249,  249,  249,  222,  222,  204,  222,  222,  222,  222,

      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      282,  282,  282,  282,  282,  282,  282,  282,  282,  282,
      282,  282,  282,  282,  282,  282,  282,  286,  286,  286,
      286,  286,  286,  286,  286,  286,  286,  286,  286,  286,
      286,  286,  286,  286,  291,  291,  291,  291,  291,  291,
      291,  291,  291,  291,  291,  291,  291,  291,  291,  291,
      291,  293,  293,  293,  293,  293,  293,  293,  293,  293,
      293,  293,  293,  293,  293,  293,  293,  293,  331,  331,
      331,  331,  331,  331,  331,  331,  331,  331,  331,  331,
      331,  331,  331,  331,  331,  333,  333,  333,  333,  333,

      333,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  333,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  200,  356,  356,  356,  356,  356,  356,  356,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  384,  384,  384,  384,
      384,  384,  384,  384,  384,  199,  384,  384,  384,  384,
      384,  384,  384,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      190,  155,  188,  149,  187,  146,  144,  138,  137,  135,
      184,  183,  131,  181,  180,  166,  163,  100,  159,  151,

       87,  149,  147,  146,   82,  144,  141,  138,  137,  135,
      132,  131,  125,  106,  100,   91,   85,   84,  428,   44,
       23,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428
    } ;

static yyconst flex_int16_t yy_chk[1670] =
    {   0,
        0,    0,    3,  426,    3,    3,    3,  135,    7,    3,
        3,    3,    3,    3,   34,    7,  135,   34,  425,    3,
        5,    6,    3,    5,    6,    8,    3,    4,    7,    4,
        4,    4,    8,   17,    4,    4,    4,    4,    4,  158,
        5,    6,   10,   10,    4,    8,   92,    4,   17,   13,
      158,    4,   92,   17,   10,   11,   51,   11,   11,   51,
       13,   15,   18,   11,   13,  176,   11,   14,   14,   13,
       11,   27,   15,   27,   44,   11,   15,   18,   45,   14,
      176,   15,   18,   14,   27,   27,   44,   59,   14,   52,
       45,   13,   52,   13,   21,   58,   58,   11,   12,   59,

       12,   12,   21,   15,  119,   15,   12,   16,   16,   12,
       14,   48,   14,   12,   21,   64,   48,   78,   12,   16,
      422,   96,   48,   16,  119,   98,  116,   64,   16,   78,
       93,  114,   93,   96,   93,  116,   21,   98,   21,  114,
       12,   93,  100,  107,  100,  108,  107,  257,  108,  257,
       16,  100,   16,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   22,   22,  103,  111,  117,  118,  111,  103,  115,
       22,  118,  120,   22,  103,  121,  122,  115,  123,  117,
      121,  122,   22,  124,  128,  129,  120,  133,  172,  142,
      225,  157,  120,  124,  123,  157,  144,  129,  172,  133,
      128,  142,  117,  174,   22,  144,   22,   31,  162,   31,
       31,   31,  174,  159,   31,  159,   31,   31,   31,  162,
       31,   31,  159,  128,  225,  178,  213,   31,   53,   53,
       53,   53,  178,   53,  213,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   86,  168,   86,   86,   86,

      167,  179,   86,  175,   86,   86,   86,  169,  167,  168,
      177,  191,  179,  208,  168,   86,   90,  167,   90,   90,
       90,  175,  186,   90,  169,   90,   90,   90,  173,  191,
      177,  190,  208,  173,  186,  206,   90,  150,  195,  150,
      150,  150,  194,  190,  150,  276,  150,  150,  150,  193,
      193,  206,  195,  194,  195,  203,  186,  150,  186,  195,
      207,  193,  197,  197,  210,  212,  203,  214,  211,  276,
      299,  299,  299,  215,  197,  214,  197,  207,  197,  211,
      215,  212,  210,  197,  209,  209,  209,  209,  209,  209,
      209,  209,  209,  209,  209,  209,  209,  209,  216,  209,

      209,  209,  217,  420,  221,  209,  209,  209,  219,  223,
      217,  219,  220,  220,  219,  219,  221,  216,  219,  418,
      220,  223,  219,  219,  227,  230,  220,  235,  209,  209,
      209,  209,  229,  229,  231,  240,  227,  230,  221,  242,
      221,  233,  233,  417,  229,  231,  240,  234,  234,  238,
      238,  241,  241,  252,  260,  261,  255,  233,  256,  260,
      258,  252,  233,  234,  255,  238,  256,  241,  234,  258,
      238,  235,  241,  259,  308,  261,  285,  326,  308,  289,
      311,  311,  259,  242,  251,  251,  251,  251,  251,  251,
      251,  251,  251,  251,  251,  251,  251,  251,  277,  251,

      251,  251,  262,  275,  279,  251,  251,  251,  281,  296,
      277,  262,  275,  341,  341,  326,  279,  284,  284,  281,
      285,  287,  287,  289,  295,  295,  302,  303,  251,  251,
      251,  251,  304,  284,  302,  305,  303,  287,  284,  306,
      295,  304,  287,  305,  275,  295,  307,  309,  310,  324,
      306,  281,  309,  296,  327,  325,  337,  307,  328,  310,
      361,  329,  329,  327,  338,  324,  340,  328,  337,  339,
      324,  325,  335,  335,  335,  340,  325,  329,  342,  342,
      339,  338,  329,  343,  344,  345,  345,  357,  359,  363,
      364,  364,  361,  343,  365,  327,  383,  344,  410,  368,

      370,  370,  371,  357,  359,  363,  364,  368,  357,  359,
      363,  364,  373,  371,  374,  385,  388,  391,  391,  402,
      401,  419,  383,  373,  374,  388,  411,  411,  421,  423,
      402,  385,  424,  415,  414,  410,  385,  416,  365,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  401,  369,  369,  369,  421,  419,  416,
      369,  369,  369,  423,  454,  424,  413,  412,  454,  409,
      408,  407,  406,  405,  404,  403,  400,  399,  398,  397,
      396,  395,  394,  369,  369,  369,  369,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,

      372,  387,  372,  372,  372,  386,  381,  380,  372,  372,
      372,  379,  378,  377,  376,  375,  366,  360,  358,  354,
      353,  352,  351,  350,  349,  348,  347,  333,  331,  330,
      322,  372,  372,  372,  372,  429,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  430,  430,  430,  430,  430,  430,  430,  430,
      430,  430,  430,  430,  430,  430,  430,  430,  430,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  432,  432,  432,  432,
      432,  432,  432,  432,  432,  432,  432,  432,  432,  432,

      432,  432,  432,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  436,  436,  436,  436,  436,  436,
      436,  436,  436,  436,  436,  436,  436,  436,  436,  436,
      436,  437,  437,  321,  320,  319,  318,  437,  437,  317,
      316,  437,  437,  437,  315,  437,  437,  437,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  438,  438,  438,

      438,  438,  438,  438,  438,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  440,  440,  314,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  441,
      441,  313,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  442,  442,  312,  297,
      293,  442,  442,  291,  442,  290,  442,  286,  442,  282,
      280,  442,  442,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      444,  444,  278,  444,  274,  444,  444,  444,  444,  444,

      444,  273,  444,  272,  271,  444,  444,  445,  445,  270,
      445,  445,  445,  445,  445,  445,  269,  445,  268,  445,
      267,  266,  265,  445,  446,  446,  446,  446,  446,  446,
      446,  446,  446,  446,  446,  264,  446,  263,  446,  446,
      446,  447,  249,  447,  247,  245,  447,  243,  447,  237,
      447,  236,  447,  448,  448,  232,  448,  448,  448,  448,
      228,  448,  448,  448,  448,  448,  226,  224,  218,  448,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  450,  450,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  450,  450,

      450,  450,  450,  450,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  453,  453,
      453,  453,  453,  453,  453,  453,  453,  453,  453,  453,
      453,  453,  453,  453,  453,  455,  205,  455,  204,  455,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  458,  458,  458,  458,  458,  458,

      458,  458,  458,  458,  458,  458,  458,  458,  458,  458,
      458,  459,  459,  459,  459,  459,  459,  459,  459,  459,
      459,  459,  459,  459,  459,  459,  459,  459,  460,  201,
      200,  199,  198,  196,  192,  189,  184,  460,  181,  460,
      461,  461,  180,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  463,  463,  463,  463,  463,  463,
      463,  463,  463,  463,  463,  463,  463,  463,  463,  463,
      463,  464,  464,  165,  464,  464,  464,  464,  464,  464,

      464,  464,  464,  464,  464,  464,  464,  464,  465,  465,
      465,  465,  465,  465,  465,  465,  465,  465,  465,  465,
      465,  465,  465,  465,  465,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  467,  467,  467,  467,  467,  467,  467,  467,
      467,  467,  467,  467,  467,  467,  467,  467,  467,  468,
      468,  468,  468,  468,  468,  468,  468,  468,  468,  468,
      468,  468,  468,  468,  468,  468,  469,  469,  469,  469,
      469,  469,  469,  469,  469,  469,  469,  469,  469,  469,
      469,  469,  469,  470,  470,  164,  470,  470,  470,  470,

      470,  470,  470,  470,  470,  470,  470,  470,  470,  470,
      471,  471,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  471,  471,  471,  471,  471,  471,  472,  472,  472,
      472,  472,  472,  472,  472,  472,  472,  472,  472,  472,
      472,  472,  472,  472,  473,  473,  473,  473,  473,  473,
      473,  473,  473,  473,  473,  473,  473,  473,  473,  473,
      473,  474,  474,  474,  474,  474,  474,  474,  474,  474,
      474,  474,  474,  474,  474,  474,  474,  474,  475,  475,
      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  475,  475,  476,  476,  476,  476,  476,

      476,  476,  476,  476,  476,  476,  476,  476,  476,  476,
      476,  476,  477,  477,  477,  477,  477,  477,  477,  477,
      477,  161,  477,  477,  477,  477,  477,  477,  477,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  160,  479,  479,  479,  479,
      479,  479,  479,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      156,  154,  153,  148,  147,  145,  143,  138,  136,  134,
      132,  131,  130,  127,  125,  113,  106,   99,   97,   91,

       89,   88,   84,   83,   81,   79,   74,   70,   66,   65,
       61,   60,   54,   50,   46,   33,   29,   28,   23,    9,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428
    } ;

extern int commentcnvYY_flex_debug;
int commentcnvYY_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up commentcnvYYtext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *commentcnvYYtext;
#line 1 "commentcnv.l"
/*****************************************************************************
 *
 * 
 *
 * Copyright (C) 1997-2015 by Dimitri van Heesch.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation under the terms of the GNU General Public License is hereby 
 * granted. No representations are made about the suitability of this software 
 * for any purpose. It is provided "as is" without express or implied warranty.
 * See the GNU General Public License for more details.
 *
 * Documents produced by Doxygen are derivative works derived from the
 * input used in their production; they are not affected by this license.
 *
 */
#line 21 "commentcnv.l"

  
#include <stdio.h>
#include <stdlib.h>

#include <qstack.h>
#include <qregexp.h>
#include <qtextstream.h>
#include <qglobal.h>

#include "bufstr.h"
#include "debug.h"
#include "message.h"
#include "config.h"
#include "doxygen.h"
#include "util.h"
#include "condparser.h"

#include <assert.h>

#define YY_NO_INPUT 1
#define YY_NO_UNISTD_H 1

#define ADDCHAR(c)    g_outBuf->addChar(c)
#define ADDARRAY(a,s) g_outBuf->addArray(a,s)
  
struct CondCtx
{
  CondCtx(int line,QCString id,bool b) 
    : lineNr(line),sectionId(id), skip(b) {}
  int lineNr;
  QCString sectionId;
  bool skip;
};
  
struct CommentCtx
{
  CommentCtx(int line) 
    : lineNr(line) {}
  int lineNr;
};
  
static BufStr * g_inBuf;
static BufStr * g_outBuf;
static int      g_inBufPos;
static int      g_col;
static int      g_blockHeadCol;
static bool     g_mlBrief;
static int      g_readLineCtx;
static bool     g_skip;
static QCString g_fileName;
static int      g_lineNr;
static int      g_condCtx;
static QStack<CondCtx> g_condStack;
static QStack<CommentCtx> g_commentStack;
static QCString g_blockName;
static int      g_lastCommentContext;
static bool     g_inSpecialComment;
static bool     g_inRoseComment;
static int      g_stringContext;
static int      g_charContext;
static int      g_javaBlock;
static bool     g_specialComment;

static QCString g_aliasString;
static int      g_blockCount;
static bool     g_lastEscaped;
static int      g_lastBlockContext;
static bool     g_pythonDocString;
static int      g_nestingCount;

static bool     g_vhdl; // for VHDL old style --! comment

static SrcLangExt g_lang;
static bool       isFixedForm; // For Fortran

static void replaceCommentMarker(const char *s,int len)
{
  const char *p=s;
  char c;
  // copy leading blanks
  while ((c=*p) && (c==' ' || c=='\t' || c=='\n')) 
  {
    ADDCHAR(c);
    g_lineNr += c=='\n';
    p++;
  }
  // replace start of comment marker by blanks and the last character by a *
  int blanks=0;
  while ((c=*p) && (c=='/' || c=='!' || c=='#')) 
  {
    blanks++;
    p++;
    if (*p=='<') // comment-after-item marker 
    { 
      blanks++;
      p++; 
    }
    if (c=='!') // end after first !
    {
      break;
    }
  }
  if (blanks>0)
  {
    while (blanks>2)
    {
      ADDCHAR(' ');
      blanks--;
    }
    if (blanks>1) ADDCHAR('*');
    ADDCHAR(' ');
  }
  // copy comment line to output
  ADDARRAY(p,len-(int)(p-s));
}

static inline int computeIndent(const char *s)
{
  int col=0;
  static int tabSize=Config_getInt(TAB_SIZE);
  const char *p=s;
  char c;
  while ((c=*p++))
  {
    if (c==' ') col++;
    else if (c=='\t') col+=tabSize-(col%tabSize); 
    else break;
  }
  return col;
}

static inline void copyToOutput(const char *s,int len)
{
  int i;
  if (g_skip) // only add newlines.
  {
    for (i=0;i<len;i++) 
    {
      if (s[i]=='\n') 
      {
	ADDCHAR('\n');
	//fprintf(stderr,"---> skip %d\n",g_lineNr);
	g_lineNr++;
      }
    }
  }
  else if (len>0)
  {
    ADDARRAY(s,len);
    static int tabSize=Config_getInt(TAB_SIZE);
    for (i=0;i<len;i++) 
    {
      switch (s[i])
      {
	case '\n': g_col=0; 
	           //fprintf(stderr,"---> copy %d\n",g_lineNr);
		   g_lineNr++; break;
	case '\t': g_col+=tabSize-(g_col%tabSize); break;
	default:   g_col++; break;
      }
    }
  }
}

static void startCondSection(const char *sectId)
{
  //printf("startCondSection: skip=%d stack=%d\n",g_skip,g_condStack.count());
  CondParser prs;
  bool expResult = prs.parse(g_fileName,g_lineNr,sectId);
  g_condStack.push(new CondCtx(g_lineNr,sectId,g_skip));
  if (!expResult) // not enabled
  {
    g_skip=TRUE;
  }
}

static void endCondSection()
{
  if (g_condStack.isEmpty())
  {
    warn(g_fileName,g_lineNr,"Found \\endcond command without matching \\cond");
    g_skip=FALSE;
  }
  else
  {
    CondCtx *ctx = g_condStack.pop();
    g_skip=ctx->skip;
  }
  //printf("endCondSection: skip=%d stack=%d\n",g_skip,g_condStack.count());
}

/** copies string \a s with length \a len to the output, while 
 *  replacing any alias commands found in the string.
 */
static void replaceAliases(const char *s)
{
  QCString result = resolveAliasCmd(s);
  //printf("replaceAliases(%s)->'%s'\n",s,result.data());
  copyToOutput(result,result.length());
}


#undef  YY_INPUT
#define YY_INPUT(buf,result,max_size) result=yyread(buf,max_size);

static int yyread(char *buf,int max_size)
{
  int bytesInBuf = g_inBuf->curPos()-g_inBufPos;
  int bytesToCopy = QMIN(max_size,bytesInBuf);
  memcpy(buf,g_inBuf->data()+g_inBufPos,bytesToCopy);
  g_inBufPos+=bytesToCopy;
  return bytesToCopy;
}

void replaceComment(int offset);











#line 1295 "/home/INTRANET/aitoumel/myfiles/NeuronProject/Week1/doxygen-master/build/generated_src/commentcnv.cpp"

#define INITIAL 0
#define Scan 1
#define SkipString 2
#define SkipChar 3
#define SComment 4
#define CComment 5
#define Verbatim 6
#define VerbatimCode 7
#define ReadLine 8
#define CondLine 9
#define ReadAliasArgs 10

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int commentcnvYYlex_destroy (void );

int commentcnvYYget_debug (void );

void commentcnvYYset_debug (int debug_flag  );

YY_EXTRA_TYPE commentcnvYYget_extra (void );

void commentcnvYYset_extra (YY_EXTRA_TYPE user_defined  );

FILE *commentcnvYYget_in (void );

void commentcnvYYset_in  (FILE * in_str  );

FILE *commentcnvYYget_out (void );

void commentcnvYYset_out  (FILE * out_str  );

int commentcnvYYget_leng (void );

char *commentcnvYYget_text (void );

int commentcnvYYget_lineno (void );

void commentcnvYYset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int commentcnvYYwrap (void );
#else
extern int commentcnvYYwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( commentcnvYYtext, commentcnvYYleng, 1, commentcnvYYout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( commentcnvYYin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( commentcnvYYin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, commentcnvYYin))==0 && ferror(commentcnvYYin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(commentcnvYYin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int commentcnvYYlex (void);

#define YY_DECL int commentcnvYYlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after commentcnvYYtext and commentcnvYYleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( commentcnvYYleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(commentcnvYYtext[commentcnvYYleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 253 "commentcnv.l"


#line 1498 "/home/INTRANET/aitoumel/myfiles/NeuronProject/Week1/doxygen-master/build/generated_src/commentcnv.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)commentcnvYYalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in commentcnvYYlex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! commentcnvYYin )
			commentcnvYYin = stdin;

		if ( ! commentcnvYYout )
			commentcnvYYout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			commentcnvYYensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				commentcnvYY_create_buffer(commentcnvYYin,YY_BUF_SIZE );
		}

		commentcnvYY_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of commentcnvYYtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 429 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_current_state != 428 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 255 "commentcnv.l"
{ /* eat anything that is not " / , or \n */
                                       copyToOutput(commentcnvYYtext,(int)commentcnvYYleng);
                                    }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 258 "commentcnv.l"
{ /* eat , so we have a nice separator in long initialization lines */ 
                                       copyToOutput(commentcnvYYtext,(int)commentcnvYYleng);
                                    }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 261 "commentcnv.l"
{ /* start of python long comment */
                                     if (g_lang!=SrcLangExt_Python)
				     {
				       REJECT;
				     }
				     else
				     {
                                       g_pythonDocString = TRUE;
                                       g_nestingCount=0;
                                       g_commentStack.clear(); /*  to be on the save side */
                                       copyToOutput(commentcnvYYtext,(int)commentcnvYYleng);
				       BEGIN(CComment);
                                       g_commentStack.push(new CommentCtx(g_lineNr));
				     }
                                   }
	YY_BREAK
case 4:
/* rule 4 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentcnvYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up commentcnvYYtext again */
YY_RULE_SETUP
#line 276 "commentcnv.l"
{
                                     if (g_lang!=SrcLangExt_Fortran)
				     {
				       REJECT;
				     }
				     else
				     {
                                       copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
                                       g_nestingCount=0;
                                       g_commentStack.clear(); /*  to be on the save side */
				       BEGIN(CComment);
                                       g_commentStack.push(new CommentCtx(g_lineNr));
				     }
  				   }
	YY_BREAK
case 5:
/* rule 5 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentcnvYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up commentcnvYYtext again */
YY_RULE_SETUP
#line 290 "commentcnv.l"
{
                                     if (g_lang!=SrcLangExt_Fortran)
				     {
				       REJECT;
				     }
				     else
				     {
                                       /* check for fixed format; we might have some conditional as part of multilene if like C<5 .and. & */
                                       if (isFixedForm && (g_col == 0))
                                       {
                                         copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
                                         g_nestingCount=0;
                                         g_commentStack.clear(); /*  to be on the save side */
				         BEGIN(CComment);
                                         g_commentStack.push(new CommentCtx(g_lineNr));
				       }
				       else
				       {
				         REJECT;
				       }
				     }
  				   }
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 312 "commentcnv.l"
{
  			             if (g_lang!=SrcLangExt_Fortran)
				     {
				       REJECT;
				     }
				     else
				     {
                                       copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
				     }
                                   }
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 322 "commentcnv.l"
{
  			             if (g_lang!=SrcLangExt_Fortran)
				     {
				       REJECT;
				     }
				     else
				     {
                                       if (g_col == 0)
                                       {
                                         copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
				       }
				       else
				       {
				         REJECT;
				       }
				     }
                                   }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 339 "commentcnv.l"
{ /* start of a string */ 
                                     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
				     g_stringContext = YY_START;
				     BEGIN(SkipString); 
                                   }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 344 "commentcnv.l"
{
                                     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
				     g_charContext = YY_START;
                                     if (g_lang!=SrcLangExt_VHDL)
                                     {
				       BEGIN(SkipChar);
                                     }
  				   }
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 352 "commentcnv.l"
{ /* new line */ 
                                     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
                                   }
	YY_BREAK
case 11:
/* rule 11 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentcnvYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up commentcnvYYtext again */
#line 356 "commentcnv.l"
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 356 "commentcnv.l"
{ /* start C++ style special comment block */
  				     if (g_mlBrief) 
				     {
				       REJECT; // bail out if we do not need to convert
				     }
				     else
				     {
				       int i=3;
				       if (commentcnvYYtext[2]=='/')
				       {
					 while (i<(int)commentcnvYYleng && commentcnvYYtext[i]=='/') i++;
				       }
				       g_blockHeadCol=g_col;
				       copyToOutput("/**",3); 
				       replaceAliases(commentcnvYYtext+i);
				       g_inSpecialComment=TRUE;
				       //BEGIN(SComment); 
				       g_readLineCtx=SComment;
				       BEGIN(ReadLine);
				     }
                                   }
	YY_BREAK
case 13:
/* rule 13 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentcnvYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentcnvYYtext again */
YY_RULE_SETUP
#line 377 "commentcnv.l"
{ /* Start of Rational Rose ANSI C++ comment block */
                                     if (g_mlBrief) REJECT;
                                     int i=17; //=strlen("//##Documentation");
				     g_blockHeadCol=g_col;
				     copyToOutput("/**",3);
				     replaceAliases(commentcnvYYtext+i);
				     g_inRoseComment=TRUE;
				     BEGIN(SComment);
  				   }
	YY_BREAK
case 14:
/* rule 14 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentcnvYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up commentcnvYYtext again */
YY_RULE_SETUP
#line 386 "commentcnv.l"
{ // next line contains an end marker, see bug 752712
				     g_inSpecialComment=commentcnvYYtext[2]=='/' || commentcnvYYtext[2]=='!';
  				     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
				     g_readLineCtx=YY_START;
				     BEGIN(ReadLine);
                                   }
	YY_BREAK
case 15:
/* rule 15 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentcnvYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up commentcnvYYtext again */
YY_RULE_SETUP
#line 392 "commentcnv.l"
{ /* one line C++ comment */ 
				     g_inSpecialComment=commentcnvYYtext[2]=='/' || commentcnvYYtext[2]=='!';
  				     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
				     g_readLineCtx=YY_START;
				     BEGIN(ReadLine);
				   }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 398 "commentcnv.l"
{ /* avoid matching next rule for empty C comment, see bug 711723 */
                                     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng);
                                   }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 401 "commentcnv.l"
{ /* start of a C comment */
  			             g_specialComment=(int)commentcnvYYleng==3;
                                     g_nestingCount=0;
                                     g_commentStack.clear(); /*  to be on the save side */
                                     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
				     BEGIN(CComment); 
                                     g_commentStack.push(new CommentCtx(g_lineNr));
                                   }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 409 "commentcnv.l"
{
                                     if (g_lang!=SrcLangExt_Python)
				     {
				       REJECT;
				     }
				     else
				     {
                                       copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
                                       g_nestingCount=0;
                                       g_commentStack.clear(); /*  to be on the save side */
				       BEGIN(CComment);
                                       g_commentStack.push(new CommentCtx(g_lineNr));
				     }
  				   }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 423 "commentcnv.l"
{
                                     if (g_lang!=SrcLangExt_VHDL)
				     {
				       REJECT;
				     }
				     else
				     {
                                       g_vhdl = TRUE;
                                       copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
                                       g_nestingCount=0;
                                       g_commentStack.clear(); /*  to be on the save side */
				       BEGIN(CComment);
                                       g_commentStack.push(new CommentCtx(g_lineNr));
				     }
  				   }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 438 "commentcnv.l"
{
                                     if (g_lang!=SrcLangExt_Fortran)
				     {
				       REJECT;
				     }
				     else
				     {
                                       copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
                                       g_nestingCount=0;
                                       g_commentStack.clear(); /*  to be on the save side */
				       BEGIN(CComment);
                                       g_commentStack.push(new CommentCtx(g_lineNr));
				     }
  				   }
	YY_BREAK
case 21:
/* rule 21 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentcnvYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up commentcnvYYtext again */
YY_RULE_SETUP
#line 452 "commentcnv.l"
{
                                     copyToOutput("@code",5); 
				     g_lastCommentContext = YY_START;
				     g_javaBlock=1;
				     g_blockName=&commentcnvYYtext[1];
                                     BEGIN(VerbatimCode);
  				   }
	YY_BREAK
case 22:
/* rule 22 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentcnvYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentcnvYYtext again */
YY_RULE_SETUP
#line 459 "commentcnv.l"
{ /* start of a verbatim block */
                                     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
				     g_lastCommentContext = YY_START;
				     g_javaBlock=0;
                                     if (qstrcmp(&commentcnvYYtext[1],"startuml")==0)
                                     {
                                       g_blockName="uml";
                                     }
                                     else
                                     {
				       g_blockName=&commentcnvYYtext[1];
                                     }
                                     BEGIN(VerbatimCode);
  				   }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 473 "commentcnv.l"
{
                                     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
				     g_blockName=&commentcnvYYtext[1];
				     if (g_blockName.at(1)=='[')
				     {
				       g_blockName.at(1)=']';
				     }
				     else if (g_blockName.at(1)=='{')
				     {
				       g_blockName.at(1)='}';
				     }
				     g_lastCommentContext = YY_START;
				     BEGIN(Verbatim);
  			           }
	YY_BREAK
case 24:
/* rule 24 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentcnvYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentcnvYYtext again */
YY_RULE_SETUP
#line 487 "commentcnv.l"
{ /* start of a verbatim block */
                                     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
				     g_blockName=&commentcnvYYtext[1];
				     g_lastCommentContext = YY_START;
                                     BEGIN(Verbatim);
                                   }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 493 "commentcnv.l"
{ /* any ather character */
                                     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
                                   }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 496 "commentcnv.l"
{ /* end of verbatim block */
                                     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng);
				     if (&commentcnvYYtext[1]==g_blockName) // end of formula
				     {
				       BEGIN(g_lastCommentContext);
				     }
				     else if (&commentcnvYYtext[4]==g_blockName)
				     {
				       BEGIN(g_lastCommentContext);
				     }
                                   }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 507 "commentcnv.l"
{
                                     if (g_javaBlock==0)
				     {
				       REJECT;
				     }
				     else
				     {
				       g_javaBlock++;
                                       copyToOutput(commentcnvYYtext,(int)commentcnvYYleng);
				     }
                                   }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 518 "commentcnv.l"
{
                                     if (g_javaBlock==0)
				     {
				       REJECT;
				     }
				     else
				     {
				       g_javaBlock--;
				       if (g_javaBlock==0)
				       {
                                         copyToOutput(" @endcode ",10);
				         BEGIN(g_lastCommentContext);
				       }
				       else
				       {
                                         copyToOutput(commentcnvYYtext,(int)commentcnvYYleng);
				       }
				     }
  				   }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 537 "commentcnv.l"
{ /* end of verbatim block */
                                     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng);
				     if (&commentcnvYYtext[4]==g_blockName)
				     {
				       BEGIN(g_lastCommentContext);
				     }
                                   }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 544 "commentcnv.l"
{ /* skip leading comments */
  				     if (!g_inSpecialComment)
				     {
                                       copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
				     }
                                     else
                                     {
                                       int l=0;
                                       while (commentcnvYYtext[l]==' ' || commentcnvYYtext[l]=='\t')
                                       {
                                         l++;
                                       }
                                       copyToOutput(commentcnvYYtext,l);
                                       if (commentcnvYYleng-l==3) // ends with //! or ///
                                       {
                                         copyToOutput(" * ",3);
                                       }
                                       else // ends with //
                                       {
                                         copyToOutput("//",2);
                                       }
                                     }
  				   }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 567 "commentcnv.l"
{ /* any character not a backslash or new line or } */
                                     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
                                   }
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 570 "commentcnv.l"
{ /* new line in verbatim block */
                                     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
                                   }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 573 "commentcnv.l"
{
  				     if (g_blockName=="dot" || g_blockName=="msc" || g_blockName=="uml" || g_blockName.at(0)=='f')
				     {
				       // see bug 487871, strip /// from dot images and formulas.
                                       int l=0;
                                       while (commentcnvYYtext[l]==' ' || commentcnvYYtext[l]=='\t')
                                       {
                                         l++;
                                       }
                                       copyToOutput(commentcnvYYtext,l);
				       copyToOutput("   ",3);
				     }
				     else // even slashes are verbatim (e.g. \verbatim, \code)
				     {
				       REJECT;
				     }
  				   }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 590 "commentcnv.l"
{ /* any other character */
                                     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
                                   }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 593 "commentcnv.l"
{ /* escaped character in string */
                                     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
                                   }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 596 "commentcnv.l"
{ /* end of string */ 
                                     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
				     BEGIN(g_stringContext); 
                                   }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 600 "commentcnv.l"
{ /* any other string character */ 
                                     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
                                   }
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 603 "commentcnv.l"
{ /* new line inside string (illegal for some compilers) */ 
                                     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
                                   }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 606 "commentcnv.l"
{ /* escaped character */
                                     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
                                   }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 609 "commentcnv.l"
{ /* end of character literal */ 
                                     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
                                     BEGIN(g_charContext);
                                   }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 613 "commentcnv.l"
{ /* any other string character */ 
                                     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
                                   }
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 616 "commentcnv.l"
{ /* new line character */
                                     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
                                   }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 620 "commentcnv.l"
{ /* anything that is not a '*' or command */ 
                                     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
                                   }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 623 "commentcnv.l"
{ /* stars without slashes */
                                     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
                                   }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 626 "commentcnv.l"
{ /* end of Python docstring */
                                     if (g_lang!=SrcLangExt_Python)
				     {
				       REJECT;
				     }
				     else
				     {
                                       g_pythonDocString = FALSE;
				       copyToOutput(commentcnvYYtext,(int)commentcnvYYleng);
				       BEGIN(Scan);
				     }
  				   }
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 638 "commentcnv.l"
{ /* new line in comment */
                                     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
                                     /* in case of Fortran always end of comment */
  				     if (g_lang==SrcLangExt_Fortran)
				     {
				       BEGIN(Scan);
				     }
                                   }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 646 "commentcnv.l"
{ /* nested C comment */
                                     g_nestingCount++;
                                     g_commentStack.push(new CommentCtx(g_lineNr));
                                     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
                                   }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 651 "commentcnv.l"
{ /* end of C comment */
                                     if (g_lang==SrcLangExt_Python)
				     {
				       REJECT;
				     }
				     else
				     {
				       copyToOutput(commentcnvYYtext,(int)commentcnvYYleng);
                                       if (g_nestingCount<=0)
                                       {
				         BEGIN(Scan);
                                       }
                                       else
                                       {
                                         g_nestingCount--;
                                         delete g_commentStack.pop();
                                       }
				     }
                                   }
	YY_BREAK
/* Python an VHDL share CComment, so special attention for ending commments is required */
case 49:
/* rule 49 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentcnvYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentcnvYYtext again */
YY_RULE_SETUP
#line 671 "commentcnv.l"
{
                                     if (g_lang!=SrcLangExt_VHDL)
                                     {
                                       REJECT;
                                     }
                                     else
                                     {
                                       if (g_vhdl) // inside --! comment
                                       {
                                         g_vhdl = FALSE;
				         copyToOutput(commentcnvYYtext,(int)commentcnvYYleng);
				         BEGIN(Scan);
                                       }
                                       else // C-type comment
                                       {
                                         REJECT;
                                       }
                                     }
                                   }
	YY_BREAK
case 50:
/* rule 50 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentcnvYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentcnvYYtext again */
YY_RULE_SETUP
#line 690 "commentcnv.l"
{
                                     if (g_lang!=SrcLangExt_Python || g_pythonDocString)
				     {
				       REJECT;
				     }
				     else
				     {
				       copyToOutput(commentcnvYYtext,(int)commentcnvYYleng);
				       BEGIN(Scan);
				     }
                                   }
	YY_BREAK
case 51:
/* rule 51 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentcnvYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentcnvYYtext again */
YY_RULE_SETUP
#line 701 "commentcnv.l"
{
                                     if (g_lang==SrcLangExt_Python)
                                     {
                                       if (g_pythonDocString)
                                       {
                                         REJECT;
                                       }
                                       else
                                       {
				         copyToOutput(commentcnvYYtext,(int)commentcnvYYleng);
				         BEGIN(Scan);
                                       }
                                     }
                                     else if (g_lang==SrcLangExt_VHDL)
                                     {
                                       if (g_vhdl) // inside --! comment
                                       {
                                         g_vhdl = FALSE;
				         copyToOutput(commentcnvYYtext,(int)commentcnvYYleng);
				         BEGIN(Scan);
                                       }
                                       else // C-type comment
                                       {
                                         REJECT;
                                       }
                                     }
                                     else
                                     {
				       REJECT;
                                     }
                                   }
	YY_BREAK
/* removed for bug 674842 (bug was introduced in rev 768)
<CComment>"'"			   {
  			             g_charContext = YY_START;
				     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng);
				     BEGIN(SkipChar);
  				   }
<CComment>"\""			   {
  			             g_stringContext = YY_START;
				     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng);
				     BEGIN(SkipString);
  				   }
   */
case 52:
YY_RULE_SETUP
#line 744 "commentcnv.l"
{
                                     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
  				   }
	YY_BREAK
case 53:
/* rule 53 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentcnvYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentcnvYYtext again */
YY_RULE_SETUP
#line 747 "commentcnv.l"
{
  				     replaceComment(0);
  				   }
	YY_BREAK
case 54:
/* rule 54 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentcnvYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentcnvYYtext again */
YY_RULE_SETUP
#line 750 "commentcnv.l"
{
                                     replaceComment(1); 
                                   }
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 753 "commentcnv.l"
{ 
  				     replaceComment(0);
				     g_readLineCtx=YY_START;
				     BEGIN(ReadLine);
  				   }
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 758 "commentcnv.l"
{   
                                     /* See Bug 752712: end the multiline comment when finding a @} or \} command */
                                     copyToOutput(" */",3); 
				     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
				     g_inSpecialComment=FALSE;
				     g_inRoseComment=FALSE;
				     BEGIN(Scan); 
                                   }
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 766 "commentcnv.l"
{ 
                                     replaceComment(1); 
				     g_readLineCtx=YY_START;
				     BEGIN(ReadLine);
  				   }
	YY_BREAK
case 58:
#line 772 "commentcnv.l"
case 59:
/* rule 59 can match eol */
#line 773 "commentcnv.l"
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 773 "commentcnv.l"
{    // or   //!something
  				     replaceComment(0);
				     g_readLineCtx=YY_START;
				     BEGIN(ReadLine);
                                   }
	YY_BREAK
case 61:
/* rule 61 can match eol */
#line 779 "commentcnv.l"
case 62:
/* rule 62 can match eol */
#line 780 "commentcnv.l"
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 780 "commentcnv.l"
{ 
                                     replaceComment(1); 
				     g_readLineCtx=YY_START;
				     BEGIN(ReadLine);
                                   }
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 785 "commentcnv.l"
{
                                     if (!g_inRoseComment)
				     {
				       REJECT;
				     }
				     else
				     {
  				       replaceComment(0);
				       g_readLineCtx=YY_START;
				       BEGIN(ReadLine);
				     }
                                   }
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 797 "commentcnv.l"
{
                                     if (!g_inRoseComment)
				     {
				       REJECT;
				     }
				     else
				     {
                                       replaceComment(1); 
				       g_readLineCtx=YY_START;
				       BEGIN(ReadLine);
				     }
                                   }
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 809 "commentcnv.l"
{ /* end of special comment */
                                     copyToOutput(" */",3); 
				     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng); 
				     g_inSpecialComment=FALSE;
				     g_inRoseComment=FALSE;
				     BEGIN(Scan); 
                                   }
	YY_BREAK
case 67:
/* rule 67 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentcnvYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentcnvYYtext again */
YY_RULE_SETUP
#line 816 "commentcnv.l"
{
  				     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng);
                                     BEGIN(g_readLineCtx);
  				   }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 820 "commentcnv.l"
{ // escaped command
				     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng);
  				   }
	YY_BREAK
case 69:
/* rule 69 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentcnvYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up commentcnvYYtext again */
YY_RULE_SETUP
#line 823 "commentcnv.l"
{ // conditional section
  				     g_condCtx = YY_START; 
  				     BEGIN(CondLine);
  				   }
	YY_BREAK
case 70:
/* rule 70 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentcnvYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up commentcnvYYtext again */
YY_RULE_SETUP
#line 827 "commentcnv.l"
{ // end of conditional section
  				     bool oldSkip=g_skip;
  				     endCondSection();
				     if (YY_START==CComment && oldSkip && !g_skip) 
    			             {
				       //printf("** Adding start of comment!\n");
				       if (g_lang!=SrcLangExt_Python &&
					   g_lang!=SrcLangExt_VHDL &&
					   g_lang!=SrcLangExt_Markdown &&
					   g_lang!=SrcLangExt_Fortran)
				       {
 				         ADDCHAR('/');
     				         ADDCHAR('*');
					 if (g_specialComment)
					 {
					   ADDCHAR('*');
					 }
				       }
    				     }
				    }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 847 "commentcnv.l"
{
  				     bool oldSkip=g_skip;
                                     startCondSection(commentcnvYYtext);
				     if ((g_condCtx==CComment || g_readLineCtx==SComment) && 
                                         !oldSkip && g_skip) 
    			             {
				       if (g_lang!=SrcLangExt_Python &&
					   g_lang!=SrcLangExt_VHDL &&
					   g_lang!=SrcLangExt_Markdown &&
					   g_lang!=SrcLangExt_Fortran)
				       {
 				         ADDCHAR('*');
     				         ADDCHAR('/');
				       }
    				     }
                                     if (g_readLineCtx==SComment)
                                     {
                                       BEGIN(SComment);
                                     }
                                     else
                                     {
  				       BEGIN(g_condCtx);
                                     }
  				   }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 871 "commentcnv.l"

	YY_BREAK
case 73:
/* rule 73 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentcnvYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentcnvYYtext again */
#line 873 "commentcnv.l"
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
#line 873 "commentcnv.l"
{ // forgot section id?
  				     if (YY_START!=CondLine) g_condCtx=YY_START;
  				     bool oldSkip=g_skip;
  				     startCondSection(" "); // fake section id causing the section to be hidden unconditionally
				     if ((g_condCtx==CComment || g_readLineCtx==SComment) && 
                                         !oldSkip && g_skip) 
    			             {
				       //printf("** Adding terminator for comment!\n");
				       if (g_lang!=SrcLangExt_Python &&
					   g_lang!=SrcLangExt_VHDL)
				       {
 				         ADDCHAR('*');
     				         ADDCHAR('/');
				       }
    				     }
				     if (*commentcnvYYtext=='\n') g_lineNr++;
                                     if (g_readLineCtx==SComment)
                                     {
                                       BEGIN(SComment);
                                     }
                                     else
                                     {
  				       BEGIN(g_condCtx);
                                     }
  				   }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 898 "commentcnv.l"
{ // expand alias without arguments
				     replaceAliases(commentcnvYYtext);
  				   }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 901 "commentcnv.l"
{ // expand alias with arguments
                                     g_lastBlockContext=YY_START;
				     g_blockCount=1;
				     g_aliasString=commentcnvYYtext;
				     g_lastEscaped=0;
				     BEGIN( ReadAliasArgs );
  				   }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 908 "commentcnv.l"
{ // skip leading special comments (see bug 618079)
  				   }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 910 "commentcnv.l"
{ // oops, end of comment in the middle of an alias?
                                     if (g_lang==SrcLangExt_Python)
				     {
				       REJECT;
				     }
				     else // abort the alias, restart scanning
				     {
				       copyToOutput(g_aliasString,g_aliasString.length());
				       copyToOutput(commentcnvYYtext,(int)commentcnvYYleng);
				       BEGIN(Scan);
				     }
  				   }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 922 "commentcnv.l"
{
                                     g_aliasString+=commentcnvYYtext;
				     g_lastEscaped=FALSE;
  				   }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 926 "commentcnv.l"
{
                                     if (g_lastEscaped)  g_lastEscaped=FALSE;
                                     else                g_lastEscaped=TRUE;
                                     g_aliasString+=commentcnvYYtext;
                                   }
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 931 "commentcnv.l"
{
                                     g_aliasString+=commentcnvYYtext;
                                     g_lineNr++;
				     g_lastEscaped=FALSE;
  				   }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 936 "commentcnv.l"
{
                                     g_aliasString+=commentcnvYYtext;
                                     if (!g_lastEscaped) g_blockCount++;
				     g_lastEscaped=FALSE;
                                   }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 941 "commentcnv.l"
{
                                     g_aliasString+=commentcnvYYtext;
				     if (!g_lastEscaped) g_blockCount--;
				     if (g_blockCount==0)
				     {
				       replaceAliases(g_aliasString);
				       BEGIN( g_lastBlockContext );
				     }
				     g_lastEscaped=FALSE;
  			           }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 951 "commentcnv.l"
{
                                     g_aliasString+=commentcnvYYtext;
				     g_lastEscaped=FALSE;
  				   }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 955 "commentcnv.l"
{
  				     copyToOutput(commentcnvYYtext,(int)commentcnvYYleng);
  				   }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 959 "commentcnv.l"
ECHO;
	YY_BREAK
#line 2736 "/home/INTRANET/aitoumel/myfiles/NeuronProject/Week1/doxygen-master/build/generated_src/commentcnv.cpp"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(Scan):
			case YY_STATE_EOF(SkipString):
			case YY_STATE_EOF(SkipChar):
			case YY_STATE_EOF(SComment):
			case YY_STATE_EOF(CComment):
			case YY_STATE_EOF(Verbatim):
			case YY_STATE_EOF(VerbatimCode):
			case YY_STATE_EOF(ReadLine):
			case YY_STATE_EOF(CondLine):
			case YY_STATE_EOF(ReadAliasArgs):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed commentcnvYYin at a new source and called
			 * commentcnvYYlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = commentcnvYYin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( commentcnvYYwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * commentcnvYYtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of commentcnvYYlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			commentcnvYYrestart(commentcnvYYin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) commentcnvYYrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 429 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 429 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 428);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up commentcnvYYtext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					commentcnvYYrestart(commentcnvYYin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( commentcnvYYwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve commentcnvYYtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void commentcnvYYrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        commentcnvYYensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            commentcnvYY_create_buffer(commentcnvYYin,YY_BUF_SIZE );
	}

	commentcnvYY_init_buffer(YY_CURRENT_BUFFER,input_file );
	commentcnvYY_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void commentcnvYY_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		commentcnvYYpop_buffer_state();
	 *		commentcnvYYpush_buffer_state(new_buffer);
     */
	commentcnvYYensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	commentcnvYY_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (commentcnvYYwrap()) processing, but the only time this flag
	 * is looked at is after commentcnvYYwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void commentcnvYY_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	commentcnvYYin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE commentcnvYY_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) commentcnvYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in commentcnvYY_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) commentcnvYYalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in commentcnvYY_create_buffer()" );

	b->yy_is_our_buffer = 1;

	commentcnvYY_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with commentcnvYY_create_buffer()
 * 
 */
    void commentcnvYY_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		commentcnvYYfree((void *) b->yy_ch_buf  );

	commentcnvYYfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a commentcnvYYrestart() or at EOF.
 */
    static void commentcnvYY_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	commentcnvYY_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then commentcnvYY_init_buffer was _probably_
     * called from commentcnvYYrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void commentcnvYY_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		commentcnvYY_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void commentcnvYYpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	commentcnvYYensure_buffer_stack();

	/* This block is copied from commentcnvYY_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from commentcnvYY_switch_to_buffer. */
	commentcnvYY_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void commentcnvYYpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	commentcnvYY_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		commentcnvYY_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void commentcnvYYensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)commentcnvYYalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in commentcnvYYensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)commentcnvYYrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in commentcnvYYensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE commentcnvYY_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) commentcnvYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in commentcnvYY_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	commentcnvYY_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to commentcnvYYlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       commentcnvYY_scan_bytes() instead.
 */
YY_BUFFER_STATE commentcnvYY_scan_string (yyconst char * yystr )
{
    
	return commentcnvYY_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to commentcnvYYlex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE commentcnvYY_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) commentcnvYYalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in commentcnvYY_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = commentcnvYY_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in commentcnvYY_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up commentcnvYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		commentcnvYYtext[commentcnvYYleng] = (yy_hold_char); \
		(yy_c_buf_p) = commentcnvYYtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		commentcnvYYleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int commentcnvYYget_lineno  (void)
{
        
    return commentcnvYYlineno;
}

/** Get the input stream.
 * 
 */
FILE *commentcnvYYget_in  (void)
{
        return commentcnvYYin;
}

/** Get the output stream.
 * 
 */
FILE *commentcnvYYget_out  (void)
{
        return commentcnvYYout;
}

/** Get the length of the current token.
 * 
 */
int commentcnvYYget_leng  (void)
{
        return commentcnvYYleng;
}

/** Get the current token.
 * 
 */

char *commentcnvYYget_text  (void)
{
        return commentcnvYYtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void commentcnvYYset_lineno (int  line_number )
{
    
    commentcnvYYlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see commentcnvYY_switch_to_buffer
 */
void commentcnvYYset_in (FILE *  in_str )
{
        commentcnvYYin = in_str ;
}

void commentcnvYYset_out (FILE *  out_str )
{
        commentcnvYYout = out_str ;
}

int commentcnvYYget_debug  (void)
{
        return commentcnvYY_flex_debug;
}

void commentcnvYYset_debug (int  bdebug )
{
        commentcnvYY_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from commentcnvYYlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    commentcnvYYin = stdin;
    commentcnvYYout = stdout;
#else
    commentcnvYYin = (FILE *) 0;
    commentcnvYYout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * commentcnvYYlex_init()
     */
    return 0;
}

/* commentcnvYYlex_destroy is for both reentrant and non-reentrant scanners. */
int commentcnvYYlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		commentcnvYY_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		commentcnvYYpop_buffer_state();
	}

	/* Destroy the stack itself. */
	commentcnvYYfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    commentcnvYYfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * commentcnvYYlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *commentcnvYYalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *commentcnvYYrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void commentcnvYYfree (void * ptr )
{
	free( (char *) ptr );	/* see commentcnvYYrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 959 "commentcnv.l"



void replaceComment(int offset)
{
  if (g_mlBrief || g_skip)
  {
    copyToOutput(commentcnvYYtext,(int)commentcnvYYleng);
  }
  else
  {
    //printf("replaceComment(%s)\n",commentcnvYYtext);
    int i=computeIndent(&commentcnvYYtext[offset]);
    if (i==g_blockHeadCol)
    {
      replaceCommentMarker(commentcnvYYtext,(int)commentcnvYYleng);
    }
    else
    {
      copyToOutput(" */",3);
      int i;for (i=(int)commentcnvYYleng-1;i>=0;i--) unput(commentcnvYYtext[i]);
      g_inSpecialComment=FALSE;
      BEGIN(Scan);                                            
    }                                                         
  }
}

// simplified way to know if this is fixed form
// duplicate in fortrancode.l
static bool recognizeFixedForm(const char* contents)
{
  int column=0;
  bool skipLine=FALSE;

  for(int i=0;;i++) {
    column++;

    switch(contents[i]) {
      case '\n':
        column=0;
        skipLine=FALSE;
        break;
      case ' ':
        break;
      case '\000':
        return FALSE;
      case 'C':
      case 'c':
      case '*':
        if(column==1) return TRUE;
        if(skipLine) break;
        return FALSE;
      case '!':
        if(column>1 && column<7) return FALSE;
        skipLine=TRUE;
        break;
      default:
        if(skipLine) break;
        if(column==7) return TRUE;
        return FALSE;
    }
  }
  return FALSE;
}


/*! This function does three things:
 *  -# It converts multi-line C++ style comment blocks (that are aligned)
 *     to C style comment blocks (if MULTILINE_CPP_IS_BRIEF is set to NO).
 *  -# It replaces aliases with their definition (see ALIASES)
 *  -# It handles conditional sections (cond...endcond blocks)
 */
void convertCppComments(BufStr *inBuf,BufStr *outBuf,const char *fileName)
{
  //printf("convertCppComments(%s)\n",fileName);
  g_inBuf    = inBuf;
  g_outBuf   = outBuf;
  g_inBufPos = 0;
  g_col      = 0;
  g_mlBrief = Config_getBool(MULTILINE_CPP_IS_BRIEF);
  g_skip     = FALSE;
  g_fileName = fileName;
  g_lang = getLanguageFromFileName(fileName);
  g_pythonDocString = FALSE;
  g_lineNr   = 1;
  g_condStack.clear();
  g_condStack.setAutoDelete(TRUE);
  g_commentStack.clear();
  g_commentStack.setAutoDelete(TRUE);
  g_vhdl = FALSE;

  printlex(commentcnvYY_flex_debug, TRUE, __FILE__, fileName);
  isFixedForm = FALSE;
  if (g_lang==SrcLangExt_Fortran)
  {
    isFixedForm = recognizeFixedForm(inBuf->data());
  }

  if (g_lang==SrcLangExt_Markdown)
  {
    g_nestingCount=0;
    BEGIN(CComment);
    g_commentStack.push(new CommentCtx(g_lineNr));
  }
  else
  {
    BEGIN(Scan);
  }
  commentcnvYYlex();
  while (!g_condStack.isEmpty())
  {
    CondCtx *ctx = g_condStack.pop();
    QCString sectionInfo = " ";
    if (ctx->sectionId!=" ") sectionInfo.sprintf(" with label %s ",ctx->sectionId.data()); 
    warn(g_fileName,ctx->lineNr,"Conditional section%sdoes not have "
	"a corresponding \\endcond command within this file.",sectionInfo.data());
  }
  if (g_nestingCount>0 && g_lang!=SrcLangExt_Markdown)
  {
    QCString tmp= "(probable line reference: ";
    bool first = TRUE;
    while (!g_commentStack.isEmpty())
    {
      CommentCtx *ctx = g_commentStack.pop();
      if (!first) tmp += ", ";
      tmp += QCString().setNum(ctx->lineNr);
      first = FALSE;
      delete ctx;
    }
    tmp += ")";
    warn(g_fileName,g_lineNr,"Reached end of file while still inside a (nested) comment. "
        "Nesting level %d %s",g_nestingCount+1,tmp.data()); // add one for "normal" expected end of comment
  }
  g_commentStack.clear();
  g_nestingCount = 0;
  if (Debug::isFlagSet(Debug::CommentCnv))
  {
    g_outBuf->at(g_outBuf->curPos())='\0';
    msg("-------------\n%s\n-------------\n",g_outBuf->data());
  }
  printlex(commentcnvYY_flex_debug, FALSE, __FILE__, fileName);
}


//----------------------------------------------------------------------------
#if !defined(YY_FLEX_SUBMINOR_VERSION) 
extern "C" { // some bogus code to keep the compiler happy
    void commentcnvYYdummy() { yy_flex_realloc(0,0); } 
}
#endif


