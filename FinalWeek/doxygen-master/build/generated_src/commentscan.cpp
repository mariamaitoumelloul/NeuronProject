#line 2 "/home/INTRANET/aitoumel/myfiles/NeuronProject/Week1/doxygen-master/build/generated_src/commentscan.cpp"

#line 4 "/home/INTRANET/aitoumel/myfiles/NeuronProject/Week1/doxygen-master/build/generated_src/commentscan.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer commentscanYY_create_buffer
#define yy_delete_buffer commentscanYY_delete_buffer
#define yy_flex_debug commentscanYY_flex_debug
#define yy_init_buffer commentscanYY_init_buffer
#define yy_flush_buffer commentscanYY_flush_buffer
#define yy_load_buffer_state commentscanYY_load_buffer_state
#define yy_switch_to_buffer commentscanYY_switch_to_buffer
#define yyin commentscanYYin
#define yyleng commentscanYYleng
#define yylex commentscanYYlex
#define yylineno commentscanYYlineno
#define yyout commentscanYYout
#define yyrestart commentscanYYrestart
#define yytext commentscanYYtext
#define yywrap commentscanYYwrap
#define yyalloc commentscanYYalloc
#define yyrealloc commentscanYYrealloc
#define yyfree commentscanYYfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE commentscanYYrestart(commentscanYYin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int commentscanYYleng;

extern FILE *commentscanYYin, *commentscanYYout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up commentscanYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via commentscanYYrestart()), so that the user can continue scanning by
	 * just pointing commentscanYYin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when commentscanYYtext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int commentscanYYleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow commentscanYYwrap()'s to do buffer switches
 * instead of setting up a fresh commentscanYYin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void commentscanYYrestart (FILE *input_file  );
void commentscanYY_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE commentscanYY_create_buffer (FILE *file,int size  );
void commentscanYY_delete_buffer (YY_BUFFER_STATE b  );
void commentscanYY_flush_buffer (YY_BUFFER_STATE b  );
void commentscanYYpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void commentscanYYpop_buffer_state (void );

static void commentscanYYensure_buffer_stack (void );
static void commentscanYY_load_buffer_state (void );
static void commentscanYY_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER commentscanYY_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE commentscanYY_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE commentscanYY_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE commentscanYY_scan_bytes (yyconst char *bytes,int len  );

void *commentscanYYalloc (yy_size_t  );
void *commentscanYYrealloc (void *,yy_size_t  );
void commentscanYYfree (void *  );

#define yy_new_buffer commentscanYY_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        commentscanYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            commentscanYY_create_buffer(commentscanYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        commentscanYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            commentscanYY_create_buffer(commentscanYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define commentscanYYwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *commentscanYYin = (FILE *) 0, *commentscanYYout = (FILE *) 0;

typedef int yy_state_type;

extern int commentscanYYlineno;

int commentscanYYlineno = 1;

extern char *commentscanYYtext;
#define yytext_ptr commentscanYYtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up commentscanYYtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	commentscanYYleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 209
#define YY_END_OF_BUFFER 210
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[775] =
    {   0,
       79,   79,  127,  127,  141,  141,  156,  156,  200,  200,
      147,  147,  210,  209,   46,  209,   46,  209,   45,  209,
       46,  209,   46,  209,   46,  209,   46,  209,   44,   46,
      209,   46,  209,   46,  209,   27,   46,  209,   46,  209,
       46,  209,   46,  209,   46,  209,   46,  209,   44,   46,
      209,   46,  209,   46,  209,   92,  209,   91,  209,   92,
      209,   89,   92,  209,   92,  209,   92,  209,  209,   93,
      209,  117,  209,  116,  209,  117,  209,  114,  117,  209,
      117,  209,   74,  209,   74,  209,   73,  209,   74,  209,
       74,  209,   74,  209,   70,   74,  209,   74,  209,   74,

      209,   78,  209,   77,  209,   78,  209,   75,   78,  209,
       78,  209,   78,  209,   78,  209,   82,  209,   81,  209,
       79,   82,  209,   79,   82,  209,   82,  209,   79,   82,
      209,   79,   82,  209,   82,  209,   74,  209,   73,  209,
       74,  209,   74,  209,   74,  209,   74,  209,   74,  209,
      105,  209,  104,  209,  102,  105,  209,  105,  209,  109,
      209,  108,  209,  109,  209,  109,  209,  113,  209,  112,
      209,  113,  209,  113,  209,  101,  209,   98,  209,  101,
      209,   99,  101,  209,  101,  209,  101,  209,   97,  209,
       97,  209,   95,   97,  209,   96,   97,  209,16478,   60,

      209,   59,  209,   60,  209,   57,   60,  209,   60,  209,
       64,  209,   64,  209,   63,  209,   64,  209,   64,  209,
       64,  209,   61,   64,  209,   64,  209,   64,  209,   68,
      209,   67,  209,   68,  209,   65,   68,  209,   68,  209,
       85,  209,   83,  209,  209,   87,  209,   88,  209,  209,
      123,  209,  122,  209,  121,  123,  209,  123,  209,  127,
      130,  209,  124,  209,  127,  130,  209,  130,  209,  130,
      209,  132,  209,  131,  209,  209,  135,  209,  135,  209,
      133,  209,  135,  209,  135,  209,  141,  145,  209,  142,
      209,  145,  209,  145,  209,  145,  209,  145,  209,  145,

      209,  120,  209,  118,  209,  120,  209,  154,  209,  154,
      209,  152,  209,  146,  154,  209,  151,  154,  209,  154,
      209,  157,  209,  156,  157,  209,  155,  209,  157,  209,
      164,  165,  209,  163,  209,  165,  209,  165,  209,  165,
      209,  175,  176,  209,  166,  209,  176,  209,  176,  209,
      176,  209,  179,  209,  177,  209,  179,  209,  183,  209,
      181,  209,  180,  183,  209,  183,  209,  186,  189,  209,
      184,  209,  187,  189,  209,  188,  189,  209,  189,  209,
      189,  209,  192,  209,  190,  209,  192,  209,  195,  209,
      194,  209,  195,  209,  193,  195,  209,  195,  209,  198,

      209,  197,  209,  198,  209,  196,  198,  209,  198,  209,
       54,   56,  209,   55,  209,   56,  209,   56,  209,  138,
      209,  137,  209,  136,  138,  209,  138,  209,   49,   50,
      209,   48,  209,   50,  209,   50,  209,  200,  202,  209,
      201,  209,  202,  209,  202,  209,  202,  209,  205,  209,
      204,  209,  203,  205,  209,  205,  209,  207,  208,  209,
      206,  209,  208,  209,  147,  209,  147,  150,  209,  148,
      209,  149,  209,   43,    4,   36,   38,   40,   38,   26,
       26,   18,   26,   18,   18,   24,   25,   20,   26,   27,
       18,   18,   18,   18,   30,   31,   36,   28,   89,   89,

       90,   89,   93,  114,  114,  115,   70,   70,   72,   70,
       75,   75,   76,   75,   79,   79,   79,   79,   79,   79,
       80,   79,  102,  103,  106,  107,  111,  110,  111,   99,
       99,  100,   99,   96,16478, 8286,   96,16478,   57,   57,
       57,   58,   61,   61,   62,   61,   65,   65,   66,   83,
       84,   87,   86,  121,  127,  124,  127,  129,  129,  126,
      131,  134,  141,  144,  143,  119,  146,  151,  153,  156,
      155,  164,  175,  178,  180,  182,  186,  185,  191,  193,
      193,  196,  196,   54,  136,   49,  200,  199,  203,  207,
      147,   26,   37,   35,   42,   38,   42,   42,   42,   38,

       42,   42,   39,    6,   34,    1,    1,    2,   18,   18,
       22,   23,   20,    5,   18,   18,   32,   35,   29,   89,
       89,   70,   75,   75,   79,   79,   79,   99,   99,   57,
       57,   57,   57,   61,   65,  128,   51,   52,   53,   47,
      199,  203,   42,   42,   16,   33,    1,   19,    2,   18,
       18,   18,   89,   69,   75,   79,   79,   71,   99,   57,
       57,   57,   65,  128,  159,  167,   47,  203,   15,   41,
        6,   13,   18,   21,   18,   18,   89,   75,   79,   99,
        3,   14,    7,   18,   21,   18,   18,   89,   75,   79,
       99,   83,  161,  169,   18,   18,   18,   89,   75,   79,

       99,  140,  160,  158,  168,   18,   18,   18,   89,   91,
      116,   73,   75,   77,   79,   81,  104,  108,  112,   98,
       99,   59,   63,   67,   85,   88,  122,  125,  132,  133,
      139,  142,  118,  152,  162,  163,  166,  177,  181,  184,
      190,  194,  197,  137,   48,  201,  204,  206,   12,    9,
        8,   18,   18,    5,   18,  170,   11,   10,   18,   18,
       18,   18,  173,   17,   18,   17,   18,  174,  171,   17,
       18,  174,  172,   43
    } ;

static yyconst flex_int16_t yy_accept[1149] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    2,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    4,    5,    5,    5,    5,    5,    6,    7,    7,
        7,    7,    7,    8,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,   10,
       11,   11,   11,   11,   11,   12,   13,   14,   15,   17,
       19,   21,   23,   25,   27,   29,   32,   34,   36,   39,

       41,   43,   45,   47,   49,   52,   54,   56,   58,   60,
       62,   65,   67,   69,   70,   72,   74,   76,   78,   81,
       83,   85,   87,   89,   91,   93,   95,   98,  100,  102,
      104,  106,  108,  111,  113,  115,  117,  119,  121,  124,
      127,  129,  132,  135,  137,  139,  141,  143,  145,  147,
      149,  151,  153,  155,  158,  160,  162,  164,  166,  168,
      170,  172,  174,  176,  178,  180,  182,  185,  187,  189,
      191,  193,  196,  200,  202,  204,  206,  209,  211,  213,
      215,  217,  219,  221,  223,  226,  228,  230,  232,  234,
      236,  239,  241,  243,  245,  246,  248,  250,  251,  253,

      255,  258,  260,  263,  265,  268,  270,  272,  274,  276,
      277,  279,  281,  283,  285,  287,  290,  292,  294,  296,
      298,  300,  302,  304,  306,  308,  310,  312,  314,  317,
      320,  322,  324,  327,  329,  331,  334,  336,  338,  340,
      342,  345,  347,  349,  351,  353,  355,  357,  359,  361,
      363,  366,  368,  371,  373,  376,  379,  381,  383,  385,
      387,  389,  391,  393,  395,  398,  400,  402,  404,  406,
      409,  411,  414,  416,  418,  420,  422,  424,  427,  429,
      432,  434,  436,  438,  441,  443,  445,  447,  449,  451,
      453,  456,  458,  461,  463,  465,  467,  470,  472,  474,

      474,  474,  474,  474,  475,  475,  475,  476,  476,  476,
      476,  476,  476,  477,  478,  479,  479,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  481,  481,  482,  483,  484,  485,  486,  487,  488,
      490,  491,  492,  493,  494,  495,  495,  495,  495,  495,
      495,  495,  496,  497,  498,  498,  499,  499,  499,  499,
      499,  499,  500,  501,  501,  501,  501,  502,  503,  503,
      504,  505,  505,  506,  506,  506,  507,  507,  507,  507,
      507,  507,  508,  508,  508,  509,  509,  509,  510,  510,
      510,  510,  511,  511,  512,  513,  513,  513,  513,  514,

      515,  515,  516,  517,  517,  518,  519,  520,  520,  520,
      521,  521,  522,  523,  523,  523,  523,  523,  523,  523,
      523,  523,  523,  523,  523,  523,  523,  524,  524,  525,
      525,  525,  526,  526,  528,  528,  528,  529,  529,  530,
      530,  530,  531,  532,  532,  532,  532,  533,  534,  536,
      536,  537,  539,  540,  540,  540,  541,  541,  542,  542,
      543,  543,  543,  543,  543,  543,  544,  544,  544,  545,
      545,  546,  546,  546,  546,  547,  548,  548,  549,  549,
      550,  550,  551,  551,  551,  552,  552,  553,  553,  554,
      554,  555,  555,  556,  557,  558,  558,  559,  560,  560,

      561,  561,  562,  562,  562,  562,  562,  563,  563,  564,
      565,  566,  566,  566,  566,  567,  567,  567,  568,  569,
      569,  570,  570,  571,  572,  572,  572,  573,  573,  573,
      573,  574,  574,  574,  574,  574,  574,  574,  575,  575,
      576,  576,  577,  577,  578,  578,  579,  579,  579,  580,
      580,  581,  581,  582,  582,  582,  583,  583,  584,  584,
      584,  585,  585,  585,  586,  586,  587,  587,  587,  588,
      589,  589,  590,  590,  590,  591,  591,  592,  593,  593,
      593,  593,  593,  594,  595,  596,  598,  599,  600,  602,
      603,  604,  604,  604,  604,  604,  604,  604,  604,  604,

      604,  605,  605,  605,  605,  605,  605,  606,  607,  608,
      609,  610,  611,  612,  613,  613,  614,  615,  616,  617,
      617,  617,  617,  617,  618,  619,  619,  620,  621,  621,
      622,  622,  622,  622,  622,  622,  623,  624,  624,  625,
      626,  626,  627,  627,  628,  628,  628,  628,  628,  628,
      628,  629,  629,  630,  631,  632,  633,  634,  634,  634,
      635,  635,  636,  636,  636,  636,  636,  636,  636,  637,
      637,  637,  637,  637,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  637,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  637,  637,  637,  638,  639,  640,  640,

      640,  641,  641,  642,  642,  643,  643,  643,  643,  643,
      643,  643,  644,  645,  646,  646,  646,  646,  646,  646,
      646,  646,  646,  646,  646,  646,  646,  647,  648,  649,
      650,  651,  651,  651,  652,  653,  653,  653,  653,  654,
      654,  654,  655,  655,  655,  656,  657,  657,  658,  659,
      659,  659,  659,  660,  660,  661,  662,  663,  663,  663,
      664,  664,  664,  664,  664,  664,  665,  665,  665,  665,
      665,  665,  665,  665,  665,  665,  665,  666,  666,  666,
      666,  667,  667,  667,  667,  667,  667,  667,  667,  667,
      667,  667,  667,  667,  668,  668,  668,  669,  669,  669,

      669,  670,  670,  670,  671,  671,  671,  671,  671,  671,
      671,  673,  673,  673,  673,  674,  675,  676,  677,  677,
      678,  678,  678,  679,  680,  680,  680,  680,  681,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      681,  681,  681,  681,  681,  682,  683,  683,  683,  683,
      683,  684,  684,  684,  684,  684,  685,  686,  687,  688,
      689,  689,  689,  690,  691,  691,  691,  691,  692,  692,

      692,  692,  692,  692,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  694,  694,  694,  694,
      694,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  696,  697,
      698,  699,  699,  699,  700,  701,  701,  701,  701,  702,
      702,  702,  702,  702,  702,  702,  702,  702,  702,  702,
      702,  702,  702,  702,  702,  702,  703,  703,  703,  703,
      703,  703,  703,  703,  703,  704,  705,  705,  705,  706,

      706,  706,  706,  706,  706,  706,  706,  706,  706,  706,
      706,  706,  706,  706,  706,  706,  706,  706,  706,  706,
      706,  706,  707,  708,  709,  711,  712,  713,  715,  717,
      718,  719,  720,  722,  723,  724,  725,  726,  727,  728,
      729,  730,  731,  731,  732,  732,  732,  732,  732,  732,
      732,  732,  733,  734,  735,  736,  737,  737,  737,  737,
      737,  737,  738,  739,  740,  741,  742,  743,  744,  745,
      746,  747,  748,  749,  749,  749,  749,  750,  751,  752,
      753,  754,  755,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  757,  757,  757,  758,  759,  759,

      759,  760,  760,  761,  761,  761,  761,  761,  761,  761,
      761,  761,  761,  761,  761,  761,  762,  762,  763,  763,
      763,  763,  763,  763,  763,  764,  764,  764,  766,  766,
      768,  768,  768,  769,  770,  770,  772,  772,  772,  773,
      773,  773,  773,  773,  773,  774,  775,  775
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,   10,   11,    1,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   21,
       21,   21,   21,   21,   22,   22,   22,   23,    1,   24,
        1,   25,    1,   26,   27,   28,   29,   30,   31,   32,
       33,   34,   35,   32,   32,   36,   37,   38,   39,   40,
       32,   41,   32,   42,   43,   32,   32,   32,   32,   32,
       44,   45,   46,    1,   47,    1,   48,   49,   50,   51,

       52,   53,   54,   55,   56,   32,   57,   58,   59,   60,
       61,   62,   32,   63,   64,   65,   66,   67,   68,   69,
       70,   32,   71,   72,   73,   74,    1,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,

       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75
    } ;

static yyconst flex_int32_t yy_meta[76] =
    {   0,
        1,    2,    3,    4,    5,    1,    6,    7,    8,    9,
        7,   10,   11,   12,   13,   14,   15,   16,   17,   18,
       18,   18,   19,   20,   21,   22,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,    1,   24,    1,   25,   23,   23,   23,
       23,   23,   23,   23,   23,   26,   23,   23,   23,   27,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       28,   29,   30,   31,   32
    } ;

static yyconst flex_int16_t yy_base[1384] =
    {   0,
        0,    0,    0,   74,  146,  220, 5082, 5081,  294,    0,
      369,    0,  444,  518,  592,  666,  740,    0,  815,    0,
       74,   75,   77,   80,  890,  964, 1038,    0, 1113,    0,
     1188,    0, 1263,    0, 1338,    0,   87,   90, 1413,    0,
       91,   95, 1488,    0,  109,  121,  158,  183,   82,   96,
     1563, 1638,  128,  140,  190,  205,  237,  243,   99,  112,
     1713,    0,  244,  452,  131,  134, 1788,    0, 1863,    0,
      234,  449,  456,  458, 1938,    0,  196,  463,  467,  469,
     2013, 2087,  135,  136,  193,  246, 5082, 9743, 9743,  500,
      209, 5074, 5066, 5048,  181,  531, 2156, 2215,  551, 2282,

     2355,   98,  250,  616,  690,  478,  624, 9743, 9743, 5066,
      468,  488, 1578, 5069, 9743, 9743, 9743,    0,   90,  553,
     9743,  695,  914,  920,  937, 5041,  994,  576,  269, 9743,
     9743, 5051,  542,  609, 5031, 1653, 9743, 9743, 2427, 1587,
     1662, 2026, 9743, 2118,  998, 1002, 2060, 2164, 5032, 2038,
      281, 9743, 9743,    0,  583, 9743, 9743, 5047,  647, 9743,
     9743, 5046,  654, 9743, 9743, 5045,  908, 1572, 2211, 9743,
        0, 9743,  199, 9743, 9743,    0, 2241,  945, 9743, 2050,
     2112, 2174, 2278, 4997, 2124, 1613,  717, 9743, 9743,    0,
     4998, 1619, 9743, 4997, 1626,    0, 9743, 2072, 9743, 9743,

        0, 4967,  537, 9743, 4968, 2294, 2077, 9743,    0, 4959,
     9743,  469, 9743, 4998, 4952,    0, 9743, 9743, 4978, 4982,
     4943,  131, 9743, 9743, 2146, 9743,  275, 9743, 9743,  607,
     2200, 9743,  641, 9743, 4947,    0, 9743, 9743,   54,  528,
        0, 9743, 9743,  672,  967, 9743, 9743, 2250, 9743, 9743,
        0, 2267,    0, 9743, 9743, 9743, 9743, 2274, 9743, 9743,
     2307, 9743, 9743,    0,  164, 4946, 9743, 9743,    0,  244,
     4915,    0, 9743, 4905, 4904, 9743, 9743,    0, 4909,    0,
     9743, 4938, 4904,    0, 9743, 9743, 4875,  120, 9743, 9743,
     4930, 4900,    0, 9743, 4899,    0,    0, 9743, 9743,  629,

     2494, 2561,  988, 2320, 4898, 4937, 9743,    0, 4920, 4916,
        0,  533,  533, 9743, 9743, 2635, 4915,  565, 4923,  669,
     1565,   71,  562,  216,  516, 2339,  587,  604, 4887, 4872,
     9743, 4920,  607, 2709, 4862, 4874,  901, 9743, 9743,    0,
     1671,  979, 2226, 2326, 2338, 2782,  643, 2344,  712,  936,
     2387,  656, 2388, 2396, 1025, 9743, 1673, 2435, 2421, 2460,
     4926, 9743, 2127,  888, 2255, 1597, 9743, 2451, 4924, 9743,
      707, 4917,  926, 4902, 1665, 9743, 4866, 2508, 2519, 4897,
     2531, 2555, 1699, 2592, 2559, 2150, 2392, 9743, 4860, 2476,
     2485, 4893, 4906, 9743, 2314, 2165, 2402, 2412, 9743, 2580,

     4904,  485, 2854, 2928, 4903, 9743, 2649, 2214, 2668, 4902,
     2461, 9743, 2678, 2586, 2735, 4885, 2743, 2767, 2614, 2810,
     2818,    0, 2878, 2624, 2660, 2169,    0, 2512, 9743, 4849,
     4899, 9743, 2548, 9743, 4847, 4897, 9743, 2619, 9743, 4845,
     4895, 9743, 2557, 2339, 2659, 2668, 9743, 2706,  896, 2065,
     9743, 2199, 2772, 2842,    0, 2883, 4872, 2955, 2687, 9743,
     4836, 2913, 2980, 4870, 2988, 2963, 2848, 3005, 3013, 2697,
     9743, 4831, 2905, 3017,    0, 4869, 4877, 4867, 2725, 9743,
     4825, 4864, 4825, 2754, 9743, 4821,    0, 2760, 9743, 4820,
        0, 4819, 2404, 9743, 4831, 4828, 9743, 4865, 2786, 9743,

     4814,    0, 4813, 1672, 4858, 4857, 9743, 4805,    0, 9743,
     9743, 4802, 4800, 2829, 9743, 4798, 2536, 9743, 2693, 2835,
     9743, 4797, 2917, 9743, 4807, 4793,    0,  419, 4795, 4789,
        0, 4786, 4792, 4793,  487, 4748, 2892, 9743, 4747,    0,
     3022, 9743, 4746,    0, 3027, 9743, 4745, 3032, 9743, 4738,
     1575, 4786, 1596, 4766, 4729, 1672, 4777, 2121, 4762, 4726,
        0, 4774,  631,    0, 4694,    0,  677, 4689,    0,    0,
     4679, 4718,    0, 4677,    0, 4676,    0, 4679, 4673, 4707,
        0, 4711, 1625, 4702, 9743, 9743, 4695, 3079, 4692, 4699,
     9743, 4699,  889, 4662, 4645, 1571,  983, 2311, 2203, 2383,

     9743, 2077, 2223, 2266, 4648, 4638, 4679, 2293, 3037,    0,
     2340, 2579, 9743, 9743,    0,    0,    0, 3054, 2824, 3046,
     2346, 3023, 3050, 9743, 3104, 3109, 2401, 3097, 3110, 3116,
        0, 4639, 3141, 3154, 4638, 4668, 3118, 3146, 3152, 1578,
     3208, 3155, 3180, 3216, 4678, 2710, 2837, 4634, 4633, 4632,
     3166, 3183, 3219, 3246, 3254, 3281, 3289, 4622, 4621,    0,
        0, 4658, 4618, 4604, 4608, 4605, 4604,    0,    0, 4603,
     4601, 4598, 4600, 4594, 4593, 4592, 4588, 4578, 4590, 4580,
     4583, 4584, 2919, 4567, 4548, 3712, 3704, 3703, 3702, 3699,
     3698,    0, 3697,    0, 3696, 9743, 9743, 9743, 3693, 3719,

     2490, 3686,    0, 3684, 3720, 3681, 3680, 3003, 3675, 3717,
        0, 3282, 2525, 9743, 2286, 3663, 3662,  863, 2344, 3694,
     2606, 2364, 3059, 2191, 3670, 3657, 9743, 2550, 9743,    0,
     3063, 3617, 3644, 3202, 3268, 3312, 3316, 3320, 3308, 3628,
     3191, 9743, 3345, 3623, 3322, 3392, 3466, 3358, 9743, 3611,
     3609, 3600, 3340,    0, 3352, 3419, 3446, 3594, 3592, 3612,
     3568, 3560, 3557, 3549, 3542,    0, 3540, 3536, 3534, 3437,
     3518, 3514, 3508, 3499, 3500, 3490, 9743, 3480, 3474, 3467,
     9743, 3458, 3469, 3444, 3443, 3441, 3437, 3414, 3402, 3392,
     3386, 3373, 3369, 2635, 3365, 3360, 3401, 3354, 3353, 3347,

     9743, 3377, 3417, 9743, 3366, 3338, 3321, 2419, 3364, 3452,
     9743, 2445, 3316, 3330, 3385, 3300, 2943, 3454, 3513, 3408,
     3312, 3310, 3475, 3506, 3308, 3300, 3299, 3503, 3540, 3292,
     3290, 3286, 3278, 3282, 3280, 3278, 3276, 3268, 3264, 3246,
     3245, 3240, 3248,  911, 3223, 3228, 2746, 3219, 3224, 3213,
     3208, 3193, 3184, 3183, 3165, 3177,  115, 3154, 3138, 3134,
     1982, 3136, 3130, 3125, 3116, 3115, 3108, 3097, 3096, 3095,
     3088, 3079, 3065, 3061, 3083, 9743, 3019, 3029, 2445, 3456,
     9743, 3051, 3503, 3015, 3008, 3073, 9743, 3530, 3545, 3546,
     3021, 3017, 3548, 3563, 3001, 2991, 2989, 3554, 3602, 3611,

     2984, 2964, 2956, 9743, 2955, 2947, 2945, 2938, 2931, 2922,
     2919,  557, 2910, 2898, 2901, 2906, 2902, 2896, 2887, 2898,
     2885, 2890, 2874, 2864, 2863, 9743, 2858,    0,    0, 2853,
     9743, 2828, 2805, 2828, 2828, 2826, 2813, 2799, 2794, 2786,
     2776, 2775, 2769, 2767, 2762, 2757, 2753, 2737, 2729, 2724,
     2711, 2704, 2448, 2735, 3551, 2691, 2680, 3481, 3582, 3596,
     3617, 2686, 2680, 3619, 3632, 2679, 2678, 2669, 3640, 2668,
     2663, 2658, 2653, 2625, 2621, 2620, 2613, 2594, 2603, 2571,
        0, 2554, 2555, 2539, 2531, 9743, 2525, 2508, 2495, 2482,
     2481, 2480, 2466,    0, 9743, 9743, 2462, 2464, 9743, 2459,

     2431, 2417, 2403, 2395, 2385, 2379, 2372, 2367, 2361, 2316,
     2311, 2300, 2287, 2267, 2263, 2261, 2247, 2215, 3624, 2241,
     2240, 3181, 3055, 3616, 3647, 9743, 9743, 3649, 3668, 9743,
     9743, 9743, 3655, 9743, 9743, 9743, 9743, 9743, 9743, 9743,
     9743, 9743, 2190, 9743, 2181, 2166, 2148, 2140, 2141, 2127,
     2110, 9743, 9743, 9743, 9743, 9743, 2101, 2095, 2869, 2053,
     2056, 9743, 9743, 9743, 9743, 9743, 9743, 9743, 9743, 9743,
     9743, 9743, 9743, 2082, 2051, 3651, 9743, 9743, 9743, 3442,
     3694, 2025, 3696, 2005, 2000, 1986, 1988, 1977, 1641, 1647,
     1638, 1634, 1610, 9743, 1598, 1570, 9743, 9743, 1559, 3679,

     3241,  223, 3700,  975,  964,  935,  916,  915,  923,  890,
      851,  872, 3269,  669,  622, 3704,  970, 3705,  592,  581,
      496,  470,  441,  427, 9743, 3407,  417, 3552, 2149, 3706,
      201,  181, 3578, 9743,  139, 3587,  568,  116, 3641,   58,
      678,   16, 3642, 2093, 9743, 3712, 9743, 3763, 3795, 3827,
     3859, 3891, 3923, 3955, 3987, 4019, 4051, 4083, 4115, 4147,
     4179, 4211, 4243, 4275, 4307, 4339, 4371, 4403, 4435, 4467,
     4499, 4531, 4563, 4595, 4620, 4640, 4657, 4678, 4697, 4718,
     4749, 4775, 4807, 4817, 4834, 4865, 4896, 4927, 4959, 4985,
     5017, 5044, 5075, 5106, 5137, 5155, 5187, 5219, 5251, 5277,

     5287, 5318, 5328, 5359, 5390, 5421, 5452, 5462, 5479, 5497,
     5529, 5547, 5579, 5611, 5642, 5659, 5691, 5723, 5754, 5781,
     5813, 5831, 5863, 5873, 5890, 5900, 5917, 5949, 5967, 5999,
     6031, 6051, 6083, 6115, 6141, 6172, 6182, 6197, 6217, 6230,
     6257, 6267, 6284, 6299, 6325, 6352, 6378, 6404, 6436, 6453,
     6478, 6509, 6540, 6571, 6603, 6618, 6650, 6676, 6702, 6734,
     6766, 6793, 6819, 6850, 6881, 6912, 6944, 6975, 6993, 7025,
     7057, 7089, 7115, 7141, 7172, 7203, 7213, 7244, 7275, 7306,
     7337, 7352, 7369, 7394, 7412, 7444, 7462, 7494, 7526, 7551,
     7569, 7601, 7633, 7664, 7691, 7723, 7741, 7773, 7790, 7815,

     7832, 7857, 7889, 7907, 7939, 7971, 3697, 7991, 8006, 8038,
     8070, 8085, 8117, 8135, 8150, 8177, 8209, 8240, 3702, 8266,
     8293, 8311, 3707, 8337, 8358, 8384, 8394, 8426, 8441, 8467,
     8493, 8525, 8552, 8579, 8611, 8642, 8668, 8694, 8725, 8756,
     8787, 8802, 8812, 8829, 8839, 8854, 8886, 8896, 8906, 3720,
     8926, 8958, 8976, 8993, 9020, 4606, 9051, 9078, 9088, 9114,
     9140, 9163, 9195, 9221, 9253, 9280, 9306, 9316, 9347, 9378,
     9395, 9410, 9428, 9455, 9486, 9518, 9550, 9582, 9614, 9646,
     9678, 9710, 4611
    } ;

static yyconst flex_int16_t yy_def[1384] =
    {   0,
     1148, 1148, 1147,    3, 1149, 1149, 1150, 1150, 1147,    9,
     1147,   11, 1151, 1151, 1152, 1152, 1147,   17, 1147,   19,
     1153, 1153, 1154, 1154, 1155, 1155, 1147,   27, 1147,   29,
     1147,   31, 1147,   33, 1147,   35, 1156, 1156, 1147,   39,
     1157, 1157, 1147,   43, 1158, 1158, 1159, 1159, 1160, 1160,
     1161, 1161, 1162, 1162, 1163, 1163, 1164, 1164, 1165, 1165,
     1147,   61, 1166, 1166, 1167, 1167, 1147,   67, 1147,   69,
     1168, 1168, 1168, 1168, 1147,   75, 1169, 1169, 1170, 1170,
     1171, 1171, 1172, 1172, 1173, 1173, 1147, 1147, 1147, 1147,
     1147, 1174, 1175, 1176, 1176, 1177, 1147, 1178, 1179, 1180,

     1147, 1147, 1176, 1176, 1177, 1176, 1147, 1147, 1147, 1181,
     1182, 1182, 1182, 1183, 1147, 1147, 1147, 1184, 1185, 1147,
     1147, 1147, 1147, 1186, 1186, 1147, 1187, 1147, 1188, 1147,
     1147, 1189, 1190, 1190, 1147, 1190, 1147, 1147, 1191, 1192,
     1192, 1192, 1147, 1192, 1147, 1147, 1193, 1193, 1147, 1194,
     1195, 1147, 1147, 1196, 1147, 1147, 1147, 1197, 1147, 1147,
     1147, 1198, 1147, 1147, 1147, 1199, 1200, 1200, 1200, 1147,
     1201, 1147, 1202, 1147, 1147, 1203, 1204, 1147, 1147, 1147,
     1147, 1205, 1205, 1147, 1206, 1147, 1207, 1147, 1147, 1208,
     1209, 1147, 1147, 1210, 1147, 1211, 1147, 1147, 1147, 1147,

     1212, 1147, 1213, 1147, 1214, 1147, 1215, 1147, 1216, 1147,
     1147, 1147, 1147, 1217, 1147, 1218, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1219, 1147, 1147, 1219,
     1147, 1147, 1147, 1147, 1147, 1220, 1147, 1147, 1147, 1147,
     1221, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1222, 1147, 1223, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1224, 1225, 1147, 1147, 1147, 1226, 1227,
     1147, 1228, 1147, 1147, 1147, 1147, 1147, 1229, 1147, 1230,
     1147, 1147, 1147, 1231, 1147, 1147, 1147, 1147, 1147, 1147,
     1232, 1147, 1233, 1147, 1147, 1234, 1234, 1147, 1147, 1147,

     1235, 1235, 1147, 1147, 1147, 1236, 1147, 1237, 1238, 1239,
     1240, 1147, 1239, 1147, 1147, 1241, 1239, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1242, 1235, 1242,  334,  334, 1147, 1147, 1243,
     1244, 1245, 1245, 1245, 1245, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1239, 1147, 1147, 1239, 1239, 1147, 1147,
     1246, 1147, 1247, 1248, 1247, 1147, 1147, 1247, 1249, 1147,
     1250, 1251, 1250, 1147, 1147, 1147, 1147, 1147, 1252, 1147,
     1252, 1253, 1254, 1252, 1253, 1255, 1147, 1147, 1147, 1254,
     1254, 1256, 1257, 1147, 1258, 1259, 1258, 1147, 1147, 1258,

     1260, 1260, 1261, 1261, 1260, 1147, 1262, 1263, 1262, 1260,
     1147, 1147, 1262, 1147, 1264, 1147, 1264, 1265, 1266, 1264,
     1147, 1267, 1265, 1266, 1266, 1268, 1269, 1147, 1147, 1147,
     1270, 1147, 1147, 1147, 1147, 1271, 1147, 1147, 1147, 1147,
     1272, 1147, 1273, 1274, 1273, 1147, 1147, 1273, 1275, 1147,
     1147, 1275, 1276, 1147, 1277, 1276, 1147, 1278, 1147, 1147,
     1147, 1147, 1279, 1147, 1279, 1280, 1281, 1279, 1280, 1147,
     1147, 1147, 1281, 1281, 1282, 1283, 1284, 1283, 1147, 1147,
     1147, 1285, 1147, 1147, 1147, 1147, 1286, 1147, 1147, 1147,
     1287, 1147, 1288, 1147, 1289, 1147, 1147, 1290, 1147, 1147,

     1147, 1291, 1147, 1147, 1292, 1292, 1147, 1147, 1293, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1294, 1147, 1294, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1295, 1147, 1147, 1147,
     1296, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1297,
     1147, 1147, 1147, 1298, 1147, 1147, 1147, 1147, 1147, 1147,
     1299, 1300, 1299, 1147, 1147, 1301, 1302, 1301, 1147, 1147,
     1303, 1147, 1147, 1304, 1147, 1305, 1147, 1147, 1306, 1307,
     1147, 1308, 1309, 1147, 1310, 1147, 1311, 1147, 1147, 1312,
     1313, 1314, 1147, 1315, 1147, 1147, 1315, 1316, 1315, 1314,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1317,

     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1318, 1318, 1319,
     1147, 1320, 1147, 1147, 1321, 1322, 1323, 1324, 1324, 1147,
     1147, 1147, 1147, 1147, 1315, 1147, 1147, 1325, 1325, 1326,
     1327, 1147, 1328, 1328, 1147, 1329, 1330, 1330, 1331, 1147,
     1332, 1333, 1333, 1334, 1335, 1147, 1336, 1147, 1147, 1147,
     1337, 1337, 1338, 1339, 1340, 1341, 1341, 1147, 1147, 1342,
     1343, 1344, 1147, 1147, 1147, 1147, 1147, 1345, 1346, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1347,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1348, 1147, 1349, 1147, 1147, 1147, 1147, 1147, 1147,

     1147, 1147, 1350, 1147, 1351, 1147, 1147, 1147, 1147, 1352,
     1353, 1354, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1355,
     1355, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1356,
     1357, 1358, 1359, 1360, 1360, 1147, 1147, 1361, 1362, 1147,
     1363, 1147, 1363, 1147, 1364, 1365, 1365, 1366, 1147, 1147,
     1147, 1147, 1367, 1368, 1369, 1369, 1370, 1147, 1147, 1371,
     1147, 1147, 1147, 1147, 1147, 1372, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1351, 1147, 1147, 1147,

     1147, 1373, 1354, 1147, 1147, 1147, 1147, 1147, 1147, 1374,
     1147, 1147, 1147, 1147, 1357, 1147, 1360, 1360, 1147, 1362,
     1147, 1147, 1364, 1366, 1147, 1147, 1147, 1367, 1375, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1376, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1373, 1147, 1147, 1147, 1147, 1377,
     1147, 1374, 1374, 1147, 1147, 1357, 1147, 1360, 1360, 1362,
     1147, 1147, 1364, 1366, 1147, 1147, 1147, 1367, 1375, 1375,

     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1378, 1379, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1377, 1377, 1147, 1147, 1357, 1360, 1360,
     1362, 1147, 1147, 1364, 1366, 1147, 1147, 1147, 1367, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1380, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1381, 1147, 1147, 1147, 1147, 1147, 1147,

     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1357, 1360, 1360, 1362, 1147, 1147, 1364, 1366, 1147,
     1147, 1147, 1367, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1382, 1147, 1147, 1147, 1357,
     1147, 1383, 1360, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1382, 1382,

     1357, 1383, 1360, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1357, 1383, 1360, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1357, 1383, 1360,
     1147, 1147, 1147, 1147, 1147, 1147, 1383, 1147, 1147, 1147,
     1383, 1147, 1147, 1383, 1147, 1383,    0, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,

     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,

     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147
    } ;

static yyconst flex_int16_t yy_nxt[9819] =
    {   0,
       89,   90,   91,   89,   90,   89,   92,   89,   93,   89,
       89,   89,   89,   89,   94,   89,   95,   96,   89,   94,
       94,   94,   89,   97,   89,   98,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   89,  100,   89,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       89,   89,   89,   89,   89,  101,  157,  157,  101,  161,
      158,  158,  161,  162,  224,  981,  162,  102,  103,  197,
      104,  105,  197,  204,  106,  106,  107,  204,  224,  352,

       88,  247,  352,   88,  205,  528,  598,  372,  205,  529,
      212,  213,  374,  212,  247,  214,  206, 1143,  159,  159,
      206,  163,  212,  213,  163,  212,  225,  214,  598,  233,
      234,  198,  233,  260,  198,  207,  260,  294,  294,  207,
      225,  233,  234,  248,  233,  107,  108,  108,  109,  108,
      108,  108,  110,  215,  108,  108,  248,  108,  108,  108,
      217,  108,  218,  108,  112,  215,  571,  931,  112,  108,
      108,  219,  235, 1142,  932,  261,  220,  513,  261,  295,
      295,  552,  512,  221,  235,  217,  554,  218,  312,  108,
      113,  108,  237,  570,  238,  297,  219,  313,  281, 1140,

      450,  220,  222,  450,  298,  299,  311,  237,  221,  238,
      303,  304,  282,  303,  451,  239,  108,  108,  108,  108,
      108,  108,  109,  108,  108,  108,  110,  222,  108,  108,
      239,  108,  108,  108,  240,  108,  273,  108,  112,  242,
      283,  243,  112,  108,  108,  242,  254,  243,  297,  240,
      981,  352,  599,  305,  352,  255,  256,  298,  299,  274,
     1138,  557,  244,  108,  113,  108,  559,  617,  244,  257,
      390,  390,  390,  390,  599,  311,  517,  391,  274,  517,
     1117,  245,  424,  424,  424,  424,  518,  245,  258,  425,
      108,  108,  108,  108,  116,  116,  117,  116,  116,  116,

      116,  116,  118,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  116,  120,  116,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  116,  116,  116,  116,  119,  121,
      122,  123,  122,  122,  121,  121,  121,  124,  121,  121,
      121,  121,  121,  121,  121,  121,  125,  121,  121,  121,
      121,  126,  121,  121,  121,  127,  127,  127,  127,  127,

      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  121,  128,  121,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  121,
      121,  121,  129,  127,  130,  130,  131,  130,  130,  130,
      132,  273,  130,  130,  254,  130,  130,  130,  273,  130,
      273,  130,  134,  255,  256,  281,  134,  135,  130,  285,
      504,  285, 1135,  504,  274,  505,  678,  257,  679,  282,
      286,  275,  286,  275, 1133,  364,  365,  130,  136,  130,
      365,  640,  287,  274,  287,  357,  258,  358,  358,  358,

      275,  300,  275,  311,  300, 1147,  365,  283,  981,  405,
      365,  288,  365,  288,  130,  130,  130,  130,  130,  130,
      131,  130,  130,  130,  132,  301,  130,  130,  981,  130,
      130,  130,  365,  130,  583,  130,  134,  583,  685,  494,
      134,  135,  130,  314,  302,  310,  315,  310,  316,  584,
      495,  598,  686, 1132,  375,  376,  311,  375,  311,  396,
      397,  130,  136,  130,  397,  310,  591,  310,  310,  591,
      310,  310,  310,  598,  530,  318,  311,  387,  388,  528,
      387,  496,  598,  529,  428,  429,  397,  428,  130,  130,
      130,  130,  137,  137,  138,  137,  137,  137,  139,  377,

      137,  137,  598,  137,  137,  137,  980,  137, 1147,  137,
      141, 1147,  617,  604,  141,  142,  143,  353, 1147, 1141,
      353,  981,  389,  312,  598,  359, 1147,  397,  359,  430,
      300,  397,  354,  300,  604,  137,  144,  137,  351,  598,
      360,  311,  523,  524,  352,  523,  351,  352,  433,  434,
      981,  433, 1131,  397,  301,  438,  439,  352,  438,  609,
      352,  598,  137,  137,  137,  137,  137,  137,  138,  137,
      137,  137,  139,  302,  137,  137,  697,  137,  137,  137,
      610,  137,  700,  137,  141,  525, 1127,  351,  141,  142,
      143,  355,  356,  435,  355,  351,  378,  378,  378,  378,

      440,  701,  314,  698,  310,  315,  310,  316,  593,  137,
      144,  137,  379,  355,  356,  311,  355,  380,  473,  473,
      473,  473,  617,  532,  372,  474, 1144,  533, 1126,  374,
      593,  594,  595,  534,  318,  535,  137,  137,  137,  137,
      121,  145,  146,  145,  145,  121,  121,  121,  147,  121,
      121,  121,  121,  121,  121,  121,  121,  148,  121,  121,
      121,  121,  149,  121,  121,  121,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  121,  128,  121,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,

      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      121,  121,  121,  151,  150,  152,  152,  153,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  152,  155,
      152,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  152,  152,  152,  152,  154,
      164,  164,  165,  164,  164,  164,  166,  450,  164,  164,

      450,  164,  164,  164,  808,  164,  629,  164,  168,  613,
      629,  451,  168,  164,  164,  378,  378,  378,  378, 1124,
      981,  378,  378,  378,  378,  444,  445,  808,  381,  715,
      445,  379,  629,  164,  169,  164,  380,  379,  384,  384,
      384,  384,  380,  372,  614,  381,  459,  460,  374,  459,
     1123,  715,  445,  621,  379,  622,  622,  622,  915,  380,
      164,  164,  164,  164,  164,  164,  165,  164,  164,  164,
      166,  615,  164,  164,  916,  164,  164,  164, 1122,  164,
      611,  164,  168,  611,  981,  981,  168,  164,  164,  303,
      304,  461,  303,  383, 1121,  378,  378,  378,  378,  414,

      414,  414,  414,  414,  414,  414,  414,  164,  169,  164,
      383,  379,  719,  536,  617,  415,  380,  386,  532,  415,
      416, 1120,  533,  617,  416, 1129,  355,  356,  534,  355,
      535, 1119,  305,  719,  164,  164,  164,  164,  170,  170,
       88,  170,  170,  170,  170,  170,  171,  170,  170,  170,
      170,  170,  170,  172,  170,  170,  170,  170,  170,  170,
      170,  170,  170,  170,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  170,  170,  170,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,

      173,  173,  173,  173,  173,  173,  173,  173,  170,  170,
      170,  170,  173,  174,  174,  175,  174,  174,  174,  174,
      174,  176,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  177,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  174,  178,  174,  177,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  174,  174,  174,  174,  177,  179,  180,
      181,  180,  180,  179,  179,  179,  182,  179,  179,  179,

      179,  179,  179,  179,  179,  183,  179,  179,  179,  179,
      184,  179,  179,  179,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  179,  186,  179,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  179,  179,
      179,  187,  185,  188,  188,  189,  188,  188,  188,  188,
      188,  190,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,

      191,  191,  191,  191,  191,  191,  188,  192,  188,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  188,  188,  188,  188,  191,   88,   88,
      193,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,  194,  194,  194,  194,  194,  194,
      194,  194,  194,  194,  194,  194,  194,  194,  194,  194,
      194,   88,  195,   88,  194,  194,  194,  194,  194,  194,
      194,  194,  194,  194,  194,  194,  194,  194,  194,  194,

      194,  194,  194,  194,  194,  194,  194,  194,   88,   88,
       88,   88,  194,  199,  199,  200,  199,  199,  199,  199,
      199,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      199,  199,  199,  199,  199,  199,  199,  199,  199,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  199,  202,  199,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  199,  199,  199,  199,  201,   88,   88,
      208,   88,   88,   88,   88,   88,   88,   88,   88,   88,

       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,  209,  209,  209,  209,  209,  209,
      209,  209,  209,  209,  209,  209,  209,  209,  209,  209,
      209,   88,  210,   88,  209,  209,  209,  209,  209,  209,
      209,  209,  209,  209,  209,  209,  209,  209,  209,  209,
      209,  209,  209,  209,  209,  209,  209,  209,   88,   88,
       88,   88,  209,  226,  227,  228,  226,  227,  226,  226,
      226,  226,  226,  226,  229,  226,  226,  226,  226,  366,
      367,  226,  366, 1077,  406,  226,  226,  226,  226, 1147,
      445,  596,  552,  406,  445, 1147,  365,  554,  366,  367,

      365,  366,  406,  597,  408,  409,  226,  231,  226,  409,
      718,  406,  596,  552,  470,  471,  445,  470,  554, 1115,
      479,  480,  365,  479,  368,  597,  583,  484,  485,  583,
      484,  409,  718,  226,  226,  226,  226,  226,  226,  227,
      228,  226,  227,  226,  226,  226,  226,  226,  226,  229,
      226,  226,  226,  226,  398,  399,  226,  398, 1114,  472,
      226,  226,  226,  226, 1113,  481,  375,  376, 1147,  375,
     1147,  397,  486,  504,  627,  397,  504,  627,  505, 1147,
      409,  226,  231,  226,  409,  310, 1147,  310,  310,  557,
      310,  310,  310, 1112,  559, 1111,  311,  397,  311,  400,

      390,  390,  390,  390, 1110, 1109,  409,  391,  226,  226,
      226,  226,  226,  249,  249,  250,  249,  249,  249,  249,
      249,  249,  249,  249,  249,  249,  249,  249,  249,  249,
      249,  249,  249,  249,  249,  249,  249,  249,  249,  251,
      251,  251,  251,  251,  251,  251,  251,  251,  251,  251,
      251,  251,  251,  251,  251,  251,  249,  252,  249,  251,
      251,  251,  251,  251,  251,  251,  251,  251,  251,  251,
      251,  251,  251,  251,  251,  251,  251,  251,  251,  251,
      251,  251,  251,  249,  249,  249,  249,  251,  262,  262,
      263,  262,  262,  262,  262,  262,  264,  262,  262,  262,

      262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  265,  265,  265,  265,  265,  265,
      265,  265,  265,  265,  265,  265,  265,  265,  265,  265,
      265,  262,  266,  262,  265,  265,  265,  265,  265,  265,
      265,  265,  265,  265,  265,  265,  265,  265,  265,  265,
      265,  265,  265,  265,  265,  265,  265,  265,  262,  262,
      262,  262,  265,  267,  267,  268,  267,  267,  267,  267,
      267,  269,  267,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  267,  267,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  270,

      270,  270,  270,  270,  270,  270,  267,  271,  267,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  267,  267,  267,  267,  270,  276,  276,
      277,  276,  276,  276,  276,  276,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  276,  276,
      276,  276,  276,  276,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  276,  279,  276,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,

      278,  278,  278,  278,  278,  278,  278,  278,  276,  276,
      276,  276,  278,  289,  289,  290,  289,  289,  289,  289,
      289,  289,  289,  289,  289,  289,  289,  289,  289,  289,
      289,  289,  410,  936, 1108,  289,  289,  289,  289,  421,
      414,  414,  421, 1147,  409, 1107, 1106,  937,  409,  422,
      406,  462,  462,  462,  462,  415,  289,  292,  289, 1105,
      416,  414,  414,  414,  414, 1104,  450,  463,  417,  450,
      409, 1102,  464,  488,  489, 1098,  488,  415,  499,  500,
      451,  499,  416,  289,  289,  289,  289,  289,  289,  290,
      289,  289,  289,  289,  289,  289,  289,  289,  289,  289,

      289,  289,  289,  289,  289,  289, 1097, 1096, 1095,  289,
      289,  289,  289,  462,  462,  462,  462,  722,  490,  411,
      412,  498,  411,  501, 1147,  462,  462,  462,  462,  463,
      289,  292,  289,  419,  464, 1147,  409,  617,  557,  722,
      409,  463, 1147,  559,  364,  365,  464,  514,  515,  365,
      514,  634,  634,  634,  634, 1146, 1093,  289,  289,  289,
      289,  319,  409, 1092,  413,  420,  420,  420,  420, 1091,
      646,  365,  417,  646,  320,  462,  462,  462,  462, 1090,
      422,  415,  465,  638,  321,  322,  416,  638, 1089,  323,
      324,  463,  516,  617,  325,  326,  464,  327,  328, 1088,

      450,  520,  521,  450,  520,  321,  322, 1087, 1137,  638,
      323,  324,  446,  447,  451,  446,  325,  326,  329,  330,
      327,  328,  331,  331,  331,  331,  812,  611, 1147,  445,
      611,  332,  643,  445, 1086,  598,  643,  419,  331,  331,
      333, 1085,  454,  454,  454,  454,  522,  467,  812,  455,
     1084,  537,  538,  723,  537,  445,  598,  448,  643,  335,
      456,  456,  456,  457, 1079, 1078,  336,  337,  541,  542,
      617,  541, 1147,  365,  723,  545,  546,  365,  545,  468,
      468,  468,  468,  618, 1075,  338,  465,  339,  340,  331,
      331,  331,  331,  724,  728,  463,  539,  728,  332,  365,

      464,  497,  497,  497,  497,  331,  331,  335,  548,  549,
     1074,  548,  600,  543,  724,  600,  805,  497,  497,  498,
      547,  303,  304,  304,  303, 1073,  333,  611,  343, 1072,
      611,  396,  397,  344,  345,  601,  397,  805,  497,  611,
      600,  611,  611,  600,  611,  353,  613,  627,  353, 1071,
      627,  467,  338,  550,  339,  340,  346,  652,  397,  346,
      620,  652, 1070,  601,  305,  602,  351,  497,  347,  347,
      617,  348,  349, 1069,  809,  350,  350,  351, 1068,  603,
      301,  614,  617,  652,  721,  619,  602,  721,  359,  353,
      598,  359,  353,  387,  388,  809,  387,  623,  624,  302,

      623,  603,  627,  360,  360,  627,  494,  601,  615,  351,
      351,  598,  625,  398,  399,  351,  398,  495,  626, 1147,
      397,  311,  359, 1067,  397,  359,  351,  401,  401, 1066,
      401,  401,  401,  402, 1065,  401,  401,  360,  401,  401,
      401, 1064,  401,  351,  401,  404,  397, 1063,  496,  404,
      401,  405,  357,  879,  358,  358,  358, 1062,  351,  351,
      311,  359,  411,  412,  359,  411, 1061,  626,  364,  365,
      401,  404,  401,  365,  879,  598,  620,  390,  390,  390,
      390, 1060,  351,  953,  391, 1019, 1147, 1147, 1147, 1147,
     1059,  794,  351, 1147,  794,  365,  598,  401,  401,  401,

      401,  331,  331,  331,  331,  953, 1058, 1019,  630,  378,
      378,  378,  378,  428,  429, 1057,  428,  331,  331,  578,
      384,  384,  384,  384, 1056,  379,  804,  381,  524,  804,
      380,  351, 1147, 1147, 1147, 1147,  379,  517,  331, 1147,
      517,  380, 1054, 1053, 1052,  336,  337,  518, 1147,  433,
      434,  728,  433, 1147,  728, 1051,  378,  378,  378,  378,
      378,  378,  378,  378,  338, 1050,  339,  340,  331,  331,
      331,  331,  379, 1049,  444,  445,  379,  380,  386,  445,
      611,  380,  386,  611,  331,  331,  331,  414,  414,  414,
      414, 1048,  383,  384,  384,  384,  384,  396,  397, 1047,

      381,  445,  397,  415, 1147,  578, 1046,  721,  416,  379,
      721, 1045,  336,  337,  380,  424,  424,  424,  424, 1043,
      438,  439,  425,  438,  397,  424,  424,  424,  424,  731,
      601,  338,  425,  339,  340,  585,  794,  639,  585,  794,
      585,  585,  585,  585,  585,  585,  585,  586,  585,  587,
      585,  587,  588,  585,  981,  406, 1042,  585,  585,  585,
      590, 1147, 1147, 1147, 1147,  383,  408,  409, 1147,  446,
      447,  409,  446,  406, 1147, 1041, 1147,  445,  585,  585,
      585,  445, 1040, 1039,  406, 1147,  409, 1038,  459,  460,
      409,  459, 1147,  409, 1147,  408,  409, 1147,  470,  471,

      409,  470,  406,  445, 1147,  585,  585,  585,  585,  585,
      611,  646,  409,  611,  646, 1037, 1147, 1147, 1147, 1147,
     1036,  422,  409,  444,  445, 1035,  479,  480,  445,  479,
     1034, 1032, 1147, 1147, 1147,  644,  420,  420,  420,  420,
     1031, 1030, 1027,  417, 1147, 1147, 1147, 1147, 1026, 1021,
      445, 1147,  415, 1147, 1020,  484,  485,  416,  484,  881,
     1147,  488,  489,  653,  488, 1147, 1018, 1017,  421,  414,
      414,  421, 1016,  454,  454,  454,  454, 1015,  422, 1147,
      455, 1147, 1147,  346,  415, 1014,  346,  499,  500,  416,
      499,  456,  456,  456,  457,  347,  347,  919,  348,  349,

      920, 1013,  350,  350,  351, 1012,  999,  301,  419,  999,
     1011,  420,  420,  420,  420, 1010, 1147, 1009,  417,  421,
      414,  414,  421, 1008, 1007,  611,  302,  415,  611,  422,
      514,  515,  416,  514, 1006,  415,  520,  521,  646,  520,
      416,  646, 1005,  454,  454,  454,  454, 1004,  422,  473,
      473,  473,  473,  351,  401,  401,  474,  401,  401,  401,
      640, 1003,  401,  401,  457,  401,  401,  401,  617,  401,
     1094,  641,  404, 1094,  735, 1002,  404,  401,  405,  421,
      414,  414,  421,  419,  454,  454,  454,  454, 1001,  422,
     1000,  455,  998,  537,  538,  415,  537,  401,  404,  401,

      416,  997,  456,  456,  456,  457,  473,  473,  473,  473,
      994,  993,  992,  474,  462,  462,  462,  462,  523,  524,
      781,  523,  991,  781,  401,  401,  401,  401,  401,  401,
      463,  401,  401,  401,  640,  464,  401,  401,  990,  401,
      401,  401,  989,  401,  611,  401,  404,  611,  988,  987,
      404,  401,  401,  986,  985,  981,  454,  454,  454,  454,
      984,  525,  983,  455,  462,  462,  462,  462,  982,  979,
      978,  401,  404,  401,  656,  656,  656,  457,  782,  977,
      463,  468,  468,  468,  468,  464,  976,  617,  465, 1147,
     1147, 1147, 1147,  975,  888,  974, 1147,  463,  401,  401,

      401,  401,  464,  973,  972, 1147,  468,  468,  468,  468,
     1147,  729,  971,  465,  462,  462,  462,  462, 1147, 1147,
     1147, 1147,  463,  541,  542, 1147,  541,  464,  545,  546,
      463,  545,  970,  548,  549,  464,  548,  968,  728,  967,
      621,  728,  622,  622,  622,  729,  729,  623,  624,  966,
      623,  623,  624,  467,  623,  611, 1081,  304,  611, 1081,
      810, 1147,  736,  810,  611,  963,  737,  611,  626,  962,
      957,  956,  626,  729,  611,  811,  952,  611,  467,  585,
      729,  951,  585,  811,  585,  585,  585,  585,  585,  585,
      585,  586,  585,  587,  585,  587,  712,  585,  617, 1082,

      711,  585,  585,  585,  590,  623,  624,  729,  623,  734,
      623,  624,  950,  623,  364,  629,  949,  626,  815,  629,
      738,  626,  585,  713,  585,  737,  626, 1147,  629,  311,
      948,  626,  629,  364,  365,  396,  638,  958,  365,  947,
      638,  629,  741,  741,  741,  741,  946,  945,  944,  585,
      585,  585,  585,  585,  629,  743,  743,  743,  743,  943,
      365,  406,  638, 1147,  638,  742,  942,  941,  638,  396,
      397,  739,  408,  643,  397,  626,  940,  643,  742,  406,
      626,  939,  611,  444,  652,  611, 1147,  938,  652,  935,
      638,  934,  741,  741,  741,  741,  397, 1147,  643,  643,

     1147,  652,  643,  611, 1147,  652,  611,  745,  401,  401,
      652,  401,  401,  401,  640,  742,  401,  401,  933,  401,
      401,  401,  406,  401,  643,  401,  747,  652,  930,  929,
      747,  401,  401,  408,  409,  928,  444,  445,  409,  927,
      406,  445,  611, 1080,  925,  611,  617,  454,  454,  454,
      454,  401,  747,  401,  754,  757,  757,  757,  757,  924,
      409,  817,  455,  445,  923,  755,  755,  755,  457,  611,
     1125,  748,  611, 1125,  753,  922,  457,  921,  401,  401,
      401,  401,  454,  454,  454,  454,  918,  917, 1116,  455,
      454,  454,  454,  454,  314,  914,  310,  455,  310,  803,

      656,  656,  656,  457,  913,  912,  911,  311,  656,  656,
      656,  457,  617,  623,  624,  910,  623,  623,  624,  909,
      623,  623,  624,  818,  623,  364,  365,  908,  736,  907,
      365,  906,  819,  905,  626,  904,  738,  903,  626,  396,
      397,  902,  626,  901,  397,  311,  743,  743,  743,  743,
      897,  896,  365,  454,  454,  454,  454,  444,  445,  895,
      754,  892,  445,  891,  406,  880,  397,  820,  880,  742,
      887,  755,  755,  755,  457,  408,  409,  885,  884,  878,
      409,  823,  406,  626,  445,  877,  611,  626,  881,  611,
      876,  626,  401,  401,  711,  401,  401,  401,  640,  828,

      401,  401,  409,  401,  401,  401,  874,  401, 1134,  641,
      747, 1134,  873,  872,  747,  401,  405,  824,  573,  871,
      454,  454,  454,  454,  870,  364,  365,  754,  869,  314,
      365,  310,  868,  310,  803,  401,  747,  401,  755,  755,
      755,  457,  311,  611,  886,  867,  611,  757,  757,  757,
      757,  866,  365,  883,  455,  611,  883,  955,  611,  890,
      955,  865,  401,  401,  401,  401,  401,  401,  457,  401,
      401,  401,  640,  864,  401,  401,  811,  401,  401,  401,
      881,  401,  611,  401,  747,  611,  840,  841,  747,  401,
      401,  842,  396,  397,  843,  844,  863,  397,  617,  845,

      862, 1101,  846,  847,  883,  848,  861,  883,  860,  401,
      747,  401,  406,  889,  623,  624,  859,  623,  858,  397,
      444,  445,  857,  408,  409,  445,  893,  811,  409,  736,
      406,  611, 1022,  856,  611,  626,  401,  401,  401,  401,
      855,  454,  454,  454,  454,  854,  611,  445,  754,  611,
      409,  853,  955, 1136,  898,  955, 1136,  894,  852,  899,
      899,  899,  457,  364,  365,  396,  397,  851,  365,  406,
      397,  444,  445,  850,  617,  881,  445,  849,  959, 1139,
      408,  409, 1139,  611,  626,  409,  611,  406, 1136,  617,
      365, 1136,  397,  839,  961,  838,  964,  611,  445,  837,

      611,  836,  969,  454,  454,  454,  454,  409,  835,  960,
      754,  965,  454,  454,  454,  454,  834,  611,  833,  754,
      611,  899,  899,  899,  457, 1076,  617,  832, 1076,  477,
      899,  899,  899,  457,  364,  365,  396,  397,  406,  365,
      617,  397, 1139, 1145, 1023, 1139, 1145, 1024, 1077,  408,
      409,  831, 1100,  830,  409, 1100,  406,  444,  445,  827,
      617,  365,  445,  397,  364,  365,  396,  397,  826,  365,
      825,  397,  444,  445,  406, 1077,  409,  445, 1083, 1025,
     1100, 1028,  822, 1100,  445,  408,  409,  821,  617,  816,
      409,  365,  406,  397, 1029, 1081,  304,  611, 1081,  445,

      611,  611, 1033, 1077,  611,  611,  611, 1136,  611,  611,
     1136,  703,  409,  303,  304,  814,  303,  813,  601,  703,
      807,  806,  703,  703,  730,  801,  730,  730,  730,  733,
      800,  733,  733,  733,  703,  799,  798,  573,  305,  796,
      617,  795,  703,  701,  617,  703,  703, 1118,  793,  617,
      617,  792,  791,  790,  789, 1103, 1082,  788,  787,  786,
      785, 1128, 1130,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,  111,  111,  111,  111,  111,

      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  140,  140,  140,  140,  140,  140,  140,  140,  140,

      140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
      140,  140,  140,  156,  156,  156,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  160,  160,  160,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  167,  167,  167,  167,

      167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  167,  167,  167,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      196,  203,  203,  203,  203,  203,  203,  203,  203,  203,
      203,  203,  203,  203,  203,  203,  203,  203,  203,  203,
      203,  203,  203,  203,  203,  203,  203,  203,  203,  203,
      203,  203,  203,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,

      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  230,
      230,  230,  230,  230,  230,  230,  230,  230,  230,  230,
      230,  230,  230,  230,  230,  230,  230,  230,  230,  230,

      230,  230,  230,  230,  230,  230,  230,  230,  230,  230,
      230,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  236,  236,  236,  236,  236,  236,  236,
      236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
      236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
      236,  236,  236,  236,  236,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,

      241,  241,  241,  241,  241,  241,  241,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  259,  259,  259,  259,  259,  259,  259,  259,  259,
      259,  259,  259,  259,  259,  259,  259,  259,  259,  259,
      259,  259,  259,  259,  259,  259,  259,  259,  259,  259,

      259,  259,  259,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  280,  280,  280,  280,  280,
      280,  280,  280,  280,  280,  280,  280,  280,  280,  280,
      280,  280,  280,  280,  280,  280,  280,  280,  280,  280,
      280,  280,  280,  280,  280,  280,  280,  284,  284,  284,
      284,  284,  284,  284,  284,  284,  284,  284,  284,  284,
      284,  284,  284,  284,  284,  284,  284,  284,  284,  284,
      284,  284,  284,  284,  284,  284,  284,  284,  284,  291,

      291,  291,  291,  291,  291,  291,  291,  291,  291,  291,
      291,  291,  291,  291,  291,  291,  291,  291,  291,  291,
      291,  291,  291,  291,  291,  291,  291,  291,  291,  291,
      291,  293,  293,  293,  293,  293,  293,  293,  293,  293,
      293,  293,  293,  293,  293,  293,  293,  293,  293,  293,
      293,  293,  293,  293,  293,  293,  293,  293,  293,  293,
      293,  293,  293,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  306,  306,  784,  306,  306,

      306,  306,  306,  306,  306,  306,  306,  306,  306,  306,
      306,  306,  306,  306,  306,  306,  306,  306,  306,  306,
      306,  306,  306,  306,  306,  306,  306,  309,  730,  783,
      730,  730,  730,  733,  780,  733,  733,  733,  779,  778,
      776,  775,  309,  774,  309,  309,  309,  773,  772,  771,
      770,  309,  310,  769,  310,  310,  768,  310,  767,  765,
      764,  310,  310,  763,  310,  310,  310,  317,  762,  317,
      317,  317,  317,  761,  317,  477,  759,  758,  317,  317,
      317,  317,  317,  317,  334,  334,  334,  752,  751,  750,
      749,  386,  334,  744,  740,  727,  726,  334,  334,  334,

      334,  334,  334,  334,  334,  334,  725,  334,  334,  341,
      717,  341,  341,  716,  341,  714, 1147,  311,  341,  341,
      311,  341,  341,  341,  342,  342,  342,  311,  711,  581,
      709,  708,  342,  707,  706,  573,  704,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  702,  342,  342,  361,
      361,  699,  361,  361,  361,  361,  361,  361,  361,  361,
      361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
      361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
      361,  363,  696,  695,  557,  694,  693,  363,  552,  363,
      363,  363,  363,  363,  692,  691,  363,  363,  363,  363,

      363,  363,  690,  689,  688,  687,  363,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  371,
      684,  371,  371,  371,  683,  682,  681,  680,  371,  373,
      677,  373,  373,  526,  676,  675,  373,  674,  373,  373,
      373,  673,  672,  507,  507,  373,  382,  382,  382,  382,
      671,  670,  382,  668,  501,  496,  667,  666,  665,  664,
      382,  483,  663,  382,  477,  661,  477,  382,  659,  382,
      382,  382,  463,  658,  655,  382,  382,  385,  385,  385,

      385,  442,  650,  437,  649,  432,  648,  415,  640,  640,
      640,  385,  394,  385,  385,  385,  386,  635,  385,  379,
      385,  385,  385,  632,  372,  631,  370,  385,  392,  392,
      392,  392,  362,  612,  392,  610,  607,  606,  605,  592,
      311,  311,  581,  307,  579,  576,  574,  573,  570,  392,
      568,  392,  392,  392,  567,  565,  563,  562,  392,  393,
      393,  560,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  395,  555,  526,  512,  511,  510,  395,  508,  395,

      395,  395,  395,  395,  507,  503,  395,  395,  395,  395,
      395,  395,  496,  492,  483,  477,  395,  403,  403,  463,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  407,
      407,  442,  437,  432,  415,  394,  407,  394,  407,  407,
      407,  407,  407,  379,  407,  407,  407,  407,  407,  407,
      407,  370,  362,  311,  308,  407,  418,  418,  418,  418,
      307, 1147,  418,  115,  115, 1147, 1147, 1147, 1147, 1147,
      418, 1147, 1147,  418, 1147, 1147, 1147,  418, 1147,  418,

      418,  418, 1147, 1147, 1147,  418,  418,  423,  423,  423,
      423, 1147, 1147, 1147, 1147,  423, 1147, 1147, 1147, 1147,
     1147,  423, 1147,  423,  423, 1147, 1147, 1147,  423, 1147,
      423,  423,  423, 1147, 1147, 1147, 1147,  423,  426,  426,
      426,  426, 1147, 1147,  426, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,  426,
     1147,  426,  426,  426, 1147, 1147, 1147, 1147,  426,  427,
     1147, 1147,  427, 1147, 1147, 1147, 1147,  427, 1147,  427,
      427,  427, 1147, 1147, 1147, 1147,  427,  431,  431, 1147,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,

      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  436,
      436, 1147,  436,  436,  436,  436,  436,  436,  436,  436,
      436,  436,  436,  436,  436,  436,  436,  436,  436,  436,
      436,  436,  436,  436,  436,  436,  436,  436,  436,  436,
      436,  441,  441, 1147,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  443, 1147, 1147, 1147, 1147, 1147,  443,
     1147,  443,  443,  443,  443,  443, 1147, 1147,  443,  443,

      443,  443,  443,  443, 1147, 1147, 1147, 1147,  443,  449,
     1147,  449,  449,  449, 1147, 1147, 1147, 1147,  449,  452,
     1147, 1147,  452, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147,  452, 1147, 1147, 1147,  452, 1147, 1147, 1147, 1147,
      452, 1147,  452,  452,  452, 1147, 1147, 1147, 1147,  452,
      453, 1147,  453,  453,  453, 1147, 1147, 1147, 1147,  453,
      458,  458,  458,  458, 1147, 1147,  458, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147,  458,  458, 1147, 1147,
     1147,  458, 1147,  458,  458,  458, 1147, 1147, 1147, 1147,
      458,  466,  466,  466,  466, 1147, 1147,  466, 1147, 1147,

     1147, 1147, 1147, 1147, 1147,  466, 1147, 1147,  466, 1147,
     1147, 1147,  466, 1147,  466,  466,  466, 1147, 1147, 1147,
      466,  466,  469,  469,  469,  469, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147,  469, 1147,  469,  469,
     1147, 1147, 1147,  469, 1147,  469,  469,  469, 1147, 1147,
     1147, 1147,  469,  475,  475,  475,  475, 1147, 1147,  475,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147,  475, 1147,  475,  475,  475, 1147,
     1147, 1147, 1147,  475,  476, 1147,  476,  476,  476, 1147,
     1147, 1147, 1147,  476,  478, 1147,  478, 1147, 1147, 1147,

     1147,  478, 1147,  478,  478,  478, 1147, 1147, 1147, 1147,
      478,  482,  482, 1147,  482, 1147, 1147, 1147, 1147,  482,
     1147,  482,  482,  482, 1147, 1147, 1147, 1147,  482,  487,
      487, 1147,  487,  487,  487,  487,  487,  487,  487,  487,
     1147,  487,  487,  487,  487,  487,  487,  487,  487,  487,
      487,  487, 1147,  487,  487,  487,  487,  487,  487,  487,
      487,  491, 1147, 1147,  491, 1147, 1147, 1147, 1147,  491,
     1147,  491,  491,  491, 1147, 1147, 1147, 1147,  491,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,

     1147,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  495,  495, 1147,  495,  495,  495,  495,  495,  495,
      495,  495,  495,  495,  495,  495,  495,  495,  495,  495,
      495,  495, 1147,  495,  495,  495,  495,  495,  495,  495,
      495,  495,  495,  497,  497, 1147,  497, 1147,  497,  497,
      497, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147,  497,  497,  497, 1147,  497,  497, 1147, 1147, 1147,
     1147, 1147,  497,  502, 1147, 1147,  502, 1147, 1147, 1147,
     1147,  502, 1147,  502,  502,  502, 1147, 1147, 1147, 1147,
      502,  506,  506, 1147,  506,  506,  506,  506,  506,  506,

      506,  506,  506,  506,  506,  506,  506,  506,  506,  506,
      506,  506,  506,  506,  506,  506,  506,  506,  506,  506,
      506,  506,  506,  509,  509, 1147,  509, 1147,  509,  509,
      509,  509,  509,  509, 1147,  509,  509,  509,  509, 1147,
      509,  509,  509,  509, 1147,  509, 1147,  509,  509,  509,
      509,  509,  509,  509,  509,  519, 1147, 1147,  519, 1147,
     1147, 1147, 1147,  519, 1147, 1147, 1147, 1147,  519,  519,
     1147,  519, 1147, 1147, 1147, 1147,  519, 1147,  519,  519,
      519,  527,  527, 1147,  527, 1147,  527,  527,  527,  527,
      527,  527,  527,  527,  527,  527,  527,  527,  527,  527,

      527,  527, 1147,  527, 1147,  527,  527,  527,  527,  527,
      527,  527,  527,  531,  531, 1147,  531, 1147,  531,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      531,  531,  531,  531, 1147,  531, 1147,  531,  531,  531,
      531,  531,  531,  531,  531,  540, 1147, 1147,  540, 1147,
     1147, 1147, 1147,  540, 1147,  540,  540,  540, 1147, 1147,
     1147, 1147,  540,  544,  544, 1147,  544,  544,  544,  544,
      544,  544, 1147, 1147,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544, 1147,  544, 1147,  544,  544,  544,
      544,  544,  544,  544,  544,  551, 1147,  551,  551,  551,

     1147, 1147, 1147, 1147,  551,  553, 1147,  553,  553, 1147,
     1147, 1147,  553, 1147,  553,  553,  553, 1147, 1147, 1147,
     1147,  553,  556, 1147,  556,  556,  556, 1147, 1147, 1147,
     1147,  556,  558, 1147,  558,  558, 1147, 1147, 1147,  558,
     1147,  558,  558,  558, 1147, 1147, 1147, 1147,  558,  561,
      561, 1147,  561,  561,  561,  561,  561,  561,  561,  561,
      561,  561,  561,  561,  561,  561,  561,  561,  561,  561,
     1147,  561, 1147,  561,  561,  561,  561,  561,  561,  561,
      561,  564, 1147, 1147,  564, 1147, 1147, 1147, 1147,  564,
     1147,  564,  564,  564, 1147, 1147, 1147, 1147,  564,  566,

      566, 1147,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566, 1147,  566,  566,  566,  566,  566,  566,
      566,  566, 1147,  566,  566,  566,  566,  566,  566,  566,
      566,  569,  569, 1147,  569,  569,  569,  569,  569,  569,
      569,  569, 1147,  569,  569,  569,  569,  569,  569,  569,
      569,  569, 1147,  569, 1147,  569,  569,  569,  569,  569,
      569,  569,  569,  572, 1147,  572,  572,  572,  572,  572,
     1147, 1147, 1147,  572, 1147,  572,  572,  572, 1147, 1147,
     1147, 1147,  572,  575,  575, 1147,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,

      575,  575,  575,  575,  575,  575, 1147,  575,  575,  575,
      575,  575,  575,  575,  575,  577,  577,  577,  577,  577,
      577,  577,  577,  577, 1147, 1147,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  334,  334,  334,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
      334,  334,  334,  334,  334,  334,  334,  334,  334, 1147,
      334,  334,  306,  306, 1147,  306,  306,  306,  306,  306,
      306,  306,  306,  306,  306,  306,  306,  306,  306,  306,
      306,  306,  306,  306,  306,  306,  306,  306,  306,  306,

      306,  306,  306,  306,  309, 1147,  309,  309,  309, 1147,
     1147, 1147, 1147,  309,  580,  580, 1147, 1147, 1147,  580,
     1147,  580,  580,  580, 1147, 1147, 1147, 1147,  580,  310,
     1147,  310,  310, 1147,  310, 1147, 1147, 1147,  310,  310,
     1147,  310,  310,  310,  582, 1147, 1147,  582, 1147, 1147,
     1147, 1147,  582, 1147,  582,  582,  582,  589, 1147, 1147,
      589, 1147,  589,  589,  589,  589,  589,  589,  589,  589,
      589,  589,  589,  589,  589,  589,  589,  589,  589,  589,
      589,  589,  589,  589,  589,  589,  589,  589,  589,  608,
     1147,  608,  608,  608, 1147, 1147, 1147,  608,  616, 1147,

     1147, 1147, 1147, 1147, 1147, 1147,  616, 1147,  616,  616,
      616,  341, 1147,  341,  341, 1147,  341, 1147, 1147, 1147,
      341,  341, 1147,  341,  341,  341,  342, 1147, 1147,  342,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147,  342,  342,  342,
      342,  342,  361,  361, 1147,  361,  361,  361,  361,  361,
      361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
      361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
      361,  361,  361,  361,  363, 1147, 1147, 1147, 1147, 1147,
      363, 1147,  363,  363,  363,  363,  363, 1147, 1147,  363,

      363,  363,  363,  363,  363, 1147, 1147, 1147, 1147,  363,
      628, 1147, 1147, 1147, 1147, 1147,  628, 1147,  628, 1147,
      628,  628,  628, 1147, 1147,  628,  628,  628,  628,  628,
      628, 1147, 1147, 1147, 1147,  628,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  373, 1147,
      373,  373, 1147, 1147, 1147,  373, 1147,  373,  373,  373,
     1147, 1147, 1147, 1147,  373,  371, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,

      371, 1147,  371,  371,  371, 1147, 1147, 1147, 1147,  371,
      382,  382,  382,  382, 1147, 1147,  382, 1147, 1147, 1147,
     1147, 1147, 1147, 1147,  382, 1147, 1147,  382, 1147, 1147,
     1147,  382, 1147,  382,  382,  382, 1147, 1147, 1147,  382,
      382,  385,  385,  385,  385, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147,  385, 1147,  385,  385,  385,
     1147, 1147,  385, 1147,  385,  385,  385, 1147, 1147, 1147,
     1147,  385,  392,  392,  392,  392, 1147, 1147,  392, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147,  392, 1147,  392,  392,  392, 1147, 1147,

     1147, 1147,  392,  633,  633,  633,  633,  633,  633,  633,
      633,  633,  633,  633,  633,  633,  633,  633,  633,  633,
      633,  633,  633, 1147,  633,  633,  633,  633,  633,  633,
      633,  633,  633,  633,  633,  636, 1147,  636, 1147, 1147,
      636, 1147,  636,  636,  636, 1147, 1147, 1147, 1147,  636,
      393,  393, 1147,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  395, 1147, 1147, 1147, 1147, 1147,  395, 1147,
      395,  395,  395,  395,  395, 1147, 1147,  395,  395,  395,

      395,  395,  395, 1147, 1147, 1147, 1147,  395,  637, 1147,
     1147, 1147, 1147, 1147,  637, 1147,  637, 1147,  637,  637,
      637, 1147, 1147,  637,  637,  637,  637,  637,  637, 1147,
     1147, 1147, 1147,  637,  401,  401, 1147,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  403,  403, 1147,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  407,  407,

     1147, 1147, 1147, 1147, 1147,  407, 1147,  407,  407,  407,
      407,  407, 1147,  407,  407,  407,  407,  407,  407,  407,
     1147, 1147, 1147, 1147,  407,  642, 1147, 1147, 1147, 1147,
     1147,  642, 1147,  642, 1147,  642,  642,  642, 1147, 1147,
      642,  642,  642,  642,  642,  642, 1147, 1147, 1147, 1147,
      642,  418,  418,  418,  418, 1147, 1147,  418, 1147, 1147,
     1147, 1147, 1147, 1147, 1147,  418, 1147, 1147,  418, 1147,
     1147, 1147,  418, 1147,  418,  418,  418, 1147, 1147, 1147,
      418,  418,  423,  423,  423,  423, 1147, 1147, 1147, 1147,
      423, 1147, 1147, 1147, 1147, 1147,  423, 1147,  423,  423,

     1147, 1147, 1147,  423, 1147,  423,  423,  423, 1147, 1147,
     1147, 1147,  423,  426,  426,  426,  426, 1147, 1147,  426,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147,  426, 1147,  426,  426,  426, 1147,
     1147, 1147, 1147,  426,  645,  645,  645,  645,  645,  645,
      645,  645,  645,  645, 1147,  645,  645,  645,  645,  645,
      645,  645,  645,  645,  645,  645,  645,  645,  645,  645,
      645,  645,  645,  645,  645,  645,  647, 1147, 1147,  647,
     1147, 1147, 1147, 1147,  647, 1147, 1147, 1147, 1147, 1147,
     1147, 1147,  647, 1147, 1147, 1147, 1147,  647, 1147,  647,

      647,  647, 1147, 1147, 1147, 1147,  647,  427, 1147, 1147,
      427, 1147, 1147, 1147, 1147,  427, 1147,  427,  427,  427,
     1147, 1147, 1147, 1147,  427,  431,  431, 1147,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  436,  436, 1147,
      436,  436,  436,  436,  436,  436,  436,  436,  436,  436,
      436,  436,  436,  436,  436,  436,  436,  436,  436,  436,
      436,  436,  436,  436,  436,  436,  436,  436,  436,  441,
      441, 1147,  441,  441,  441,  441,  441,  441,  441,  441,

      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  443, 1147, 1147, 1147, 1147, 1147,  443, 1147,  443,
      443,  443,  443,  443, 1147, 1147,  443,  443,  443,  443,
      443,  443, 1147, 1147, 1147, 1147,  443,  651, 1147, 1147,
     1147, 1147, 1147,  651, 1147,  651, 1147,  651,  651,  651,
     1147, 1147,  651,  651,  651,  651,  651,  651, 1147, 1147,
     1147, 1147,  651,  452, 1147, 1147,  452, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147,  452, 1147, 1147, 1147,  452,
     1147, 1147, 1147, 1147,  452, 1147,  452,  452,  452, 1147,

     1147, 1147, 1147,  452,  458,  458,  458,  458, 1147, 1147,
      458, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
      458,  458, 1147, 1147, 1147,  458, 1147,  458,  458,  458,
     1147, 1147, 1147, 1147,  458,  654, 1147,  654,  654,  654,
     1147, 1147, 1147, 1147,  654,  657,  657,  657,  657, 1147,
     1147,  657, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147,  657,  657, 1147, 1147, 1147,  657, 1147,  657,  657,
      657, 1147, 1147, 1147, 1147,  657,  466,  466,  466,  466,
     1147, 1147,  466, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
      466, 1147, 1147,  466, 1147, 1147, 1147,  466, 1147,  466,

      466,  466, 1147, 1147, 1147,  466,  466,  469,  469,  469,
      469, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147,  469, 1147,  469,  469, 1147, 1147, 1147,  469, 1147,
      469,  469,  469, 1147, 1147, 1147, 1147,  469,  475,  475,
      475,  475, 1147, 1147,  475, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,  475,
     1147,  475,  475,  475, 1147, 1147, 1147, 1147,  475,  660,
     1147, 1147, 1147, 1147,  660, 1147,  660,  660,  660, 1147,
     1147, 1147, 1147,  660,  478, 1147,  478, 1147, 1147, 1147,
     1147,  478, 1147,  478,  478,  478, 1147, 1147, 1147, 1147,

      478,  662, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147,  662, 1147,  662,  662,
      662, 1147, 1147, 1147, 1147,  662,  482,  482, 1147,  482,
     1147, 1147, 1147, 1147,  482, 1147,  482,  482,  482, 1147,
     1147, 1147, 1147,  482,  487,  487, 1147,  487,  487,  487,
      487,  487,  487,  487,  487, 1147,  487,  487,  487,  487,
      487,  487,  487,  487,  487,  487,  487, 1147,  487,  487,
      487,  487,  487,  487,  487,  487,  491, 1147, 1147,  491,
     1147, 1147, 1147, 1147,  491, 1147,  491,  491,  491, 1147,
     1147, 1147, 1147,  491,  493,  493,  493,  493,  493,  493,

      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493, 1147,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  495,  495, 1147,  495,
      495,  495,  495,  495,  495,  495,  495,  495,  495,  495,
      495,  495,  495,  495,  495,  495,  495, 1147,  495,  495,
      495,  495,  495,  495,  495,  495,  495,  495,  669, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147,  669, 1147,  669,  669,  669, 1147, 1147,
     1147, 1147,  669,  502, 1147, 1147,  502, 1147, 1147, 1147,
     1147,  502, 1147,  502,  502,  502, 1147, 1147, 1147, 1147,

      502,  506,  506, 1147,  506,  506,  506,  506,  506,  506,
      506,  506,  506,  506,  506,  506,  506,  506,  506,  506,
      506,  506,  506,  506,  506,  506,  506,  506,  506,  506,
      506,  506,  506,  509,  509, 1147,  509, 1147,  509,  509,
      509,  509,  509,  509, 1147,  509,  509,  509,  509, 1147,
      509,  509,  509,  509, 1147,  509, 1147,  509,  509,  509,
      509,  509,  509,  509,  509,  519, 1147, 1147,  519, 1147,
     1147, 1147, 1147,  519, 1147, 1147, 1147, 1147,  519,  519,
     1147,  519, 1147, 1147, 1147, 1147,  519, 1147,  519,  519,
      519,  527,  527, 1147,  527, 1147,  527,  527,  527,  527,

      527,  527,  527,  527,  527,  527,  527,  527,  527,  527,
      527,  527, 1147,  527, 1147,  527,  527,  527,  527,  527,
      527,  527,  527,  531,  531, 1147,  531, 1147,  531,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      531,  531,  531,  531, 1147,  531, 1147,  531,  531,  531,
      531,  531,  531,  531,  531,  540, 1147, 1147,  540, 1147,
     1147, 1147, 1147,  540, 1147,  540,  540,  540, 1147, 1147,
     1147, 1147,  540,  544,  544, 1147,  544,  544,  544,  544,
      544,  544, 1147, 1147,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544, 1147,  544, 1147,  544,  544,  544,

      544,  544,  544,  544,  544,  553, 1147,  553,  553, 1147,
     1147, 1147,  553, 1147,  553,  553,  553, 1147, 1147, 1147,
     1147,  553,  551, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147,  551, 1147,  551,
      551,  551, 1147, 1147, 1147, 1147,  551,  558, 1147,  558,
      558, 1147, 1147, 1147,  558, 1147,  558,  558,  558, 1147,
     1147, 1147, 1147,  558,  556, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,  556,
     1147,  556,  556,  556, 1147, 1147, 1147, 1147,  556,  561,
      561, 1147,  561,  561,  561,  561,  561,  561,  561,  561,

      561,  561,  561,  561,  561,  561,  561,  561,  561,  561,
     1147,  561, 1147,  561,  561,  561,  561,  561,  561,  561,
      561,  564, 1147, 1147,  564, 1147, 1147, 1147, 1147,  564,
     1147,  564,  564,  564, 1147, 1147, 1147, 1147,  564,  566,
      566, 1147,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566, 1147,  566,  566,  566,  566,  566,  566,
      566,  566, 1147,  566,  566,  566,  566,  566,  566,  566,
      566,  569,  569, 1147,  569,  569,  569,  569,  569,  569,
      569,  569, 1147,  569,  569,  569,  569,  569,  569,  569,
      569,  569, 1147,  569, 1147,  569,  569,  569,  569,  569,

      569,  569,  569,  572, 1147,  572,  572,  572,  572,  572,
     1147, 1147, 1147,  572, 1147,  572,  572,  572, 1147, 1147,
     1147, 1147,  572,  705, 1147, 1147, 1147, 1147,  705, 1147,
      705,  705,  705, 1147, 1147, 1147, 1147,  705,  575,  575,
     1147,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575, 1147,  575,  575,  575,  575,  575,  575,  575,  575,
      577,  577,  577,  577,  577,  577,  577,  577,  577, 1147,
     1147,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,

      577,  577,  580,  580, 1147, 1147, 1147,  580, 1147,  580,
      580,  580, 1147, 1147, 1147, 1147,  580,  710,  710, 1147,
      710,  710,  710,  710, 1147,  710,  710,  710,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  582,
      582, 1147,  582, 1147, 1147, 1147, 1147,  582, 1147,  582,
      582,  582,  310, 1147,  310,  310, 1147,  310, 1147, 1147,
     1147,  310,  310, 1147,  310,  310,  310,  589, 1147, 1147,
      589, 1147,  589,  589,  589,  589,  589,  589,  589,  589,
      589,  589,  589,  589,  589,  589,  589,  589,  589,  589,

      589,  589,  589,  589,  589,  589,  589,  589,  589,  720,
      720, 1147,  720,  720,  720,  720,  720,  720,  720,  720,
      720,  720,  720,  720,  720,  720,  720,  720,  720,  720,
      720,  720,  720,  720,  720,  720,  720,  720,  720,  720,
      720,  608, 1147, 1147,  608, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147,  608, 1147,  608,  608,  608,  334, 1147, 1147,
      334, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,  334, 1147,
      334,  334,  334,  732,  732, 1147,  732,  732,  732,  732,

      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732, 1147,  732,  732,  616, 1147, 1147, 1147, 1147,
     1147, 1147, 1147,  616, 1147,  616,  616,  616,  342, 1147,
     1147,  342, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,  342,
      342,  342,  342,  342,  628, 1147, 1147, 1147, 1147, 1147,
      628, 1147,  628,  628,  628,  628,  628, 1147, 1147,  628,
      628,  628,  628,  628,  628, 1147, 1147, 1147, 1147,  628,
      363, 1147, 1147, 1147, 1147, 1147,  363, 1147,  363,  363,

      363,  363,  363, 1147, 1147,  363,  363,  363,  363,  363,
      363, 1147, 1147, 1147, 1147,  363,  371, 1147,  371,  371,
      371, 1147, 1147, 1147, 1147,  371,  633,  633,  633,  633,
      633,  633,  633,  633,  633,  633,  633,  633,  633,  633,
      633,  633,  633,  633,  633,  633,  633,  633,  633,  633,
      633,  633,  633,  633,  633,  633,  633,  633,  636, 1147,
      636, 1147, 1147,  636, 1147,  636,  636,  636, 1147, 1147,
     1147, 1147,  636,  637, 1147, 1147, 1147, 1147, 1147,  637,
     1147,  637,  637,  637,  637,  637, 1147, 1147,  637,  637,
      637,  637,  637,  637, 1147, 1147, 1147, 1147,  637,  395,

     1147, 1147, 1147, 1147, 1147,  395, 1147,  395,  395,  395,
      395,  395, 1147, 1147,  395,  395,  395,  395,  395,  395,
     1147, 1147, 1147, 1147,  395,  746,  746, 1147,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  642,  642, 1147,
     1147, 1147, 1147, 1147,  642, 1147,  642,  642,  642,  642,
      642, 1147,  642,  642,  642,  642,  642,  642,  642, 1147,
     1147, 1147, 1147,  642,  407,  407, 1147, 1147, 1147, 1147,
     1147,  407, 1147,  407,  407,  407,  407,  407, 1147,  407,

      407,  407,  407,  407,  407,  407, 1147, 1147, 1147, 1147,
      407,  645,  645,  645,  645,  645,  645,  645,  645,  645,
      645,  645,  645,  645,  645,  645,  645,  645,  645,  645,
      645,  645,  645,  645,  645,  645,  645,  645,  645,  645,
      645,  645,  645,  647, 1147, 1147,  647, 1147, 1147, 1147,
     1147,  647, 1147, 1147, 1147, 1147, 1147, 1147, 1147,  647,
     1147, 1147, 1147, 1147,  647, 1147,  647,  647,  647, 1147,
     1147, 1147, 1147,  647,  651, 1147, 1147, 1147, 1147, 1147,
      651, 1147,  651,  651,  651,  651,  651, 1147, 1147,  651,
      651,  651,  651,  651,  651, 1147, 1147, 1147, 1147,  651,

      443, 1147, 1147, 1147, 1147, 1147,  443, 1147,  443,  443,
      443,  443,  443, 1147, 1147,  443,  443,  443,  443,  443,
      443, 1147, 1147, 1147, 1147,  443,  756,  756,  756,  756,
     1147, 1147,  756, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147,  756,  756, 1147, 1147, 1147,  756, 1147,  756,
      756,  756, 1147, 1147, 1147, 1147,  756,  654,  654,  654,
      654, 1147, 1147,  654, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147,  654, 1147, 1147, 1147,  654, 1147,
      654,  654,  654, 1147, 1147, 1147, 1147,  654,  657,  657,
      657,  657, 1147, 1147,  657, 1147, 1147, 1147, 1147, 1147,

     1147, 1147, 1147, 1147,  657,  657, 1147, 1147, 1147,  657,
     1147,  657,  657,  657, 1147, 1147, 1147, 1147,  657,  660,
     1147, 1147, 1147, 1147,  660, 1147,  660,  660,  660, 1147,
     1147, 1147, 1147,  660,  662, 1147,  662,  662,  662, 1147,
     1147, 1147, 1147,  662,  760, 1147,  760, 1147, 1147, 1147,
     1147,  760, 1147,  760,  760,  760, 1147, 1147, 1147, 1147,
      760,  669, 1147,  669,  669,  669, 1147, 1147, 1147, 1147,
      669,  766, 1147, 1147, 1147, 1147,  766, 1147,  766,  766,
      766, 1147, 1147, 1147, 1147,  766,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,

      777,  777,  777, 1147,  777,  777,  777,  777, 1147,  777,
     1147, 1147,  777,  777,  777,  777,  777,  777,  551, 1147,
      551,  551,  551, 1147, 1147, 1147, 1147,  551,  556, 1147,
      556,  556,  556, 1147, 1147, 1147, 1147,  556,  797, 1147,
      797,  797,  797,  797,  797, 1147, 1147, 1147,  797, 1147,
      797,  797,  797, 1147, 1147, 1147, 1147,  797,  710,  710,
     1147,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      802, 1147, 1147,  802, 1147, 1147, 1147, 1147,  802, 1147,

      802,  802,  802,  317, 1147,  317, 1147,  317,  317, 1147,
      317, 1147, 1147, 1147,  317,  317, 1147,  317,  317,  317,
      720,  720, 1147,  720,  720,  720,  720,  720,  720,  720,
      720,  720,  720,  720,  720,  720,  720,  720,  720,  720,
      720,  720,  720,  720,  720,  720,  720,  720,  720,  720,
      720,  720,  334, 1147, 1147,  334, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147,  334, 1147,  334,  334,  334,  732,  732,
     1147,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,

      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      733,  733,  733,  733,  733,  342, 1147, 1147,  342, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147,  342,  342,  342,  342,
      342,  310,  310, 1147,  310, 1147, 1147, 1147, 1147, 1147,
     1147, 1147,  310, 1147,  310,  310, 1147,  310,  310, 1147,
     1147,  310,  310, 1147,  310,  310,  310, 1147,  310,  363,
     1147, 1147, 1147, 1147, 1147,  363, 1147,  363,  363,  363,
      363,  363, 1147, 1147,  363,  363,  363,  363,  363,  363,
     1147, 1147, 1147, 1147,  363,  633,  633,  633,  633,  633,

      633,  633,  633,  633,  633,  633,  633,  633,  633,  633,
      633,  633,  633,  633,  633,  633,  633,  633,  633,  633,
      633,  633,  633,  633,  633,  633,  633,  395, 1147, 1147,
     1147, 1147, 1147,  395, 1147,  395,  395,  395,  395,  395,
     1147, 1147,  395,  395,  395,  395,  395,  395, 1147, 1147,
     1147, 1147,  395,  746,  746, 1147,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  407,  407, 1147, 1147, 1147,
     1147, 1147,  407, 1147,  407,  407,  407,  407,  407, 1147,

      407,  407,  407,  407,  407,  407,  407, 1147, 1147, 1147,
     1147,  407,  443, 1147, 1147, 1147, 1147, 1147,  443, 1147,
      443,  443,  443,  443,  443, 1147, 1147,  443,  443,  443,
      443,  443,  443, 1147, 1147, 1147, 1147,  443,  829, 1147,
      829,  829,  829, 1147, 1147, 1147, 1147,  829,  756,  756,
      756,  756, 1147, 1147,  756, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147,  756,  756, 1147, 1147, 1147,  756,
     1147,  756,  756,  756, 1147, 1147, 1147, 1147,  756,  654,
      654,  654,  654, 1147, 1147,  654, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147,  654, 1147, 1147, 1147,

      654, 1147,  654,  654,  654, 1147, 1147, 1147, 1147,  654,
      760, 1147,  760, 1147, 1147, 1147, 1147,  760, 1147,  760,
      760,  760, 1147, 1147, 1147, 1147,  760,  766, 1147, 1147,
     1147, 1147,  766, 1147,  766,  766,  766, 1147, 1147, 1147,
     1147,  766,  875,  875, 1147,  875, 1147, 1147, 1147, 1147,
      875, 1147,  875,  875,  875,  882,  882, 1147,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  900,  900,  900,
      900, 1147, 1147,  900, 1147, 1147, 1147, 1147, 1147, 1147,

     1147, 1147, 1147,  900,  900, 1147, 1147, 1147,  900, 1147,
      900,  900,  900, 1147, 1147, 1147, 1147,  900,  926,  926,
      926,  926,  926,  926,  926,  926,  926,  926,  926,  926,
      926,  926,  926,  926,  926, 1147,  926,  926,  926,  926,
     1147,  926, 1147,  926, 1147,  926,  926,  926,  926,  926,
      954,  954, 1147,  954,  954,  954,  954,  954,  954,  954,
      954,  954,  954,  954,  954,  954,  954,  954,  954,  954,
      954,  954,  954,  954,  954,  954,  954,  954,  954,  954,
      954,  954,  995,  995,  995,  995,  995,  995,  995,  995,
      995,  995,  995,  995,  995,  995,  995,  995,  995, 1147,

      995,  995,  995,  995, 1147,  995, 1147, 1147, 1147,  995,
      995,  995,  995,  995,  996,  996,  996,  996,  996,  996,
      996,  996,  996,  996,  996,  996,  996,  996,  996,  996,
      996, 1147,  996,  996,  996,  996, 1147,  996, 1147, 1147,
     1147,  996,  996,  996,  996,  996, 1044, 1044, 1044, 1044,
     1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044,
     1044, 1044, 1044, 1147, 1044, 1044, 1044, 1044, 1147, 1044,
     1147, 1147, 1147, 1044, 1044, 1044, 1044, 1044, 1055, 1055,
     1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055,
     1055, 1055, 1055, 1055, 1055, 1147, 1055, 1055, 1055, 1055,

     1147, 1055, 1147, 1147, 1147, 1055, 1055, 1055, 1055, 1055,
     1099, 1099, 1147, 1099, 1099, 1099, 1099, 1099, 1099, 1099,
     1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099,
     1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099,
     1099, 1099,   87, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,

     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147
    } ;

static yyconst flex_int16_t yy_chk[9819] =
    {   0,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    4,   21,   22,    4,   23,
       21,   22,   24,   23,   49, 1142,   24,    4,    4,   37,
        4,    4,   38,   41,    4,    4,    4,   42,   50,  102,

       37,   59,  102,   38,   41,  239,  322,  119,   42,  239,
       45,   45,  119,   45,   60,   45,   41, 1140,   21,   22,
       42,   23,   46,   46,   24,   46,   49,   46,  322,   53,
       53,   37,   53,   65,   38,   41,   66,   83,   84,   42,
       50,   54,   54,   59,   54,    4,    5,    5,    5,    5,
        5,    5,    5,   45,    5,    5,   60,    5,    5,    5,
       47,    5,   47,    5,    5,   46,  288,  857,    5,    5,
        5,   47,   53, 1138,  857,   65,   47,  222,   66,   83,
       84,  265,  222,   47,   54,   48,  265,   48,   95,    5,
        5,    5,   55,  288,   55,   85,   48,   95,   77, 1135,

      173,   48,   47,  173,   85,   85,   95,   56,   48,   56,
       91,   91,   77,   91,  173,   55,    5,    5,    5,    5,
        6,    6,    6,    6,    6,    6,    6,   48,    6,    6,
       56,    6,    6,    6,   55,    6,   71,    6,    6,   57,
       77,   57,    6,    6,    6,   58,   63,   58,   86,   56,
     1132,  103,  324,   91,  103,   63,   63,   86,   86,   71,
     1131,  270,   57,    6,    6,    6,  270, 1102,   58,   63,
      129,  129,  129,  129,  324,  103,  227,  129,   71,  227,
     1102,   57,  151,  151,  151,  151,  227,   58,   63,  151,
        6,    6,    6,    6,    9,    9,    9,    9,    9,    9,

        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   13,   13,   13,   13,   13,   13,
       13,   72,   13,   13,   64,   13,   13,   13,   73,   13,
       74,   13,   13,   64,   64,   78,   13,   13,   13,   79,
      212,   80, 1127,  212,   72,  212,  528,   64,  528,   78,
       79,   73,   80,   74, 1124,  111,  111,   13,   13,   13,
      111,  402,   79,   72,   80,  106,   64,  106,  106,  106,

       73,   90,   74,  106,   90,  112,  112,   78, 1123,  402,
      112,   79,  111,   80,   13,   13,   13,   13,   14,   14,
       14,   14,   14,   14,   14,   90,   14,   14, 1122,   14,
       14,   14,  112,   14,  312,   14,   14,  312,  535,  203,
       14,   14,   14,   96,   90,   96,   96,   96,   96,  313,
      203,  325,  535, 1121,  120,  120,   96,  120,  313,  133,
      133,   14,   14,   14,  133,   99,  318,   99,   99,  318,
       99,   99,   99,  325,  240,   96,   99,  128,  128,  240,
      128,  203,  323,  240,  155,  155,  133,  155,   14,   14,
       14,   14,   15,   15,   15,   15,   15,   15,   15,  120,

       15,   15,  323,   15,   15,   15,  912,   15,  230,   15,
       15,  230, 1137,  327,   15,   15,   15,  104,  230, 1137,
      104,  912,  128,  104,  323,  107,  134,  134,  107,  155,
      300,  134,  104,  300,  327,   15,   15,   15,  104,  328,
      107,  104,  233,  233,  347,  233,  107,  347,  159,  159,
     1120,  159, 1119,  134,  300,  163,  163,  352,  163,  333,
      352,  328,   15,   15,   15,   15,   16,   16,   16,   16,
       16,   16,   16,  300,   16,   16,  563,   16,   16,   16,
      333,   16,  567,   16,   16,  233, 1115,  104,   16,   16,
       16,  105,  105,  159,  105,  107,  122,  122,  122,  122,

      163,  567,  105,  563,  105,  105,  105,  105,  320,   16,
       16,   16,  122,  349,  349,  105,  349,  122,  187,  187,
      187,  187, 1141,  244,  371,  187, 1141,  244, 1114,  371,
      320,  320,  320,  244,  105,  244,   16,   16,   16,   16,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,

       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       25,   25,   25,   25,   25,   25,   25,  449,   25,   25,

      449,   25,   25,   25,  718,   25,  364,   25,   25,  337,
      364,  449,   25,   25,   25,  123,  123,  123,  123, 1112,
     1111,  124,  124,  124,  124,  167,  167,  718,  124,  593,
      167,  123,  364,   25,   25,   25,  123,  124,  125,  125,
      125,  125,  124,  373,  337,  125,  178,  178,  373,  178,
     1110,  593,  167,  350,  125,  350,  350,  350,  844,  125,
       25,   25,   25,   25,   26,   26,   26,   26,   26,   26,
       26,  337,   26,   26,  844,   26,   26,   26, 1109,   26,
      342,   26,   26,  342, 1108, 1107,   26,   26,   26,  303,
      303,  178,  303,  124, 1106,  127,  127,  127,  127,  145,

      145,  145,  145,  146,  146,  146,  146,   26,   26,   26,
      125,  127,  597,  245, 1117,  145,  127,  127,  245,  146,
      145, 1105,  245,  342,  146, 1117,  355,  355,  245,  355,
      245, 1104,  303,  597,   26,   26,   26,   26,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,

       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,

       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,

       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,

       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,

       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,  113,
      113,   51,  113, 1099,  640,   51,   51,   51,   51,  168,
      168,  321,  551,  140,  168,  113,  113,  551,  366,  366,

      113,  366,  640,  321,  140,  140,   51,   51,   51,  140,
      596,  140,  321,  553,  186,  186,  168,  186,  553, 1096,
      192,  192,  113,  192,  113,  321,  583,  195,  195,  583,
      195,  140,  596,   51,   51,   51,   51,   51,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,  136,  136,   52,  136, 1095,  186,
       52,   52,   52,   52, 1093,  192,  375,  375,  141,  375,
      136,  136,  195,  504,  357,  136,  504,  357,  504,  141,
      141,   52,   52,   52,  141,  341,  141,  341,  341,  556,
      341,  341,  341, 1092,  556, 1091,  341,  136,  357,  136,

      383,  383,  383,  383, 1090, 1089,  141,  383,   52,   52,
       52,   52,   52,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,

       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,

       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,

       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,  142,  861, 1088,   81,   81,   81,   81,  150,
      150,  150,  150,  142,  142, 1087, 1086,  861,  142,  150,
      142,  180,  180,  180,  180,  150,   81,   81,   81, 1085,
      150,  147,  147,  147,  147, 1084,  450,  180,  147,  450,
      142, 1082,  180,  198,  198, 1075,  198,  147,  207,  207,
      450,  207,  147,   81,   81,   81,   81,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,

       82,   82,   82,   82,   82,   82, 1074, 1061, 1060,   82,
       82,   82,   82,  181,  181,  181,  181,  602,  198,  144,
      144,  207,  144,  207,  144,  185,  185,  185,  185,  181,
       82,   82,   82,  147,  181,  144,  144, 1144,  558,  602,
      144,  185,  144,  558,  363,  363,  185,  225,  225,  363,
      225,  386,  386,  386,  386, 1144, 1058,   82,   82,   82,
       82,   97,  144, 1057,  144,  148,  148,  148,  148, 1051,
      426,  363,  148,  426,   97,  182,  182,  182,  182, 1050,
      426,  148,  182,  396,   97,   97,  148,  396, 1049,   97,
       97,  182,  225, 1129,   97,   97,  182,   97,   97, 1048,

      452,  231,  231,  452,  231,   97,   97, 1047, 1129,  396,
       97,   97,  169,  169,  452,  169,   97,   97,   97,   97,
       97,   97,   98,   98,   98,   98,  724,  343,  169,  169,
      343,   98,  408,  169, 1046,  599,  408,  148,   98,   98,
       98, 1045,  177,  177,  177,  177,  231,  182,  724,  177,
     1043,  248,  248,  603,  248,  169,  599,  169,  408,   98,
      177,  177,  177,  177, 1021, 1020,   98,   98,  252,  252,
      343,  252,  365,  365,  603,  258,  258,  365,  258,  183,
      183,  183,  183,  343, 1018,   98,  183,   98,   98,  100,
      100,  100,  100,  604,  608,  183,  248,  608,  100,  365,

      183,  206,  206,  206,  206,  100,  100,  100,  261,  261,
     1017,  261,  598,  252,  604,  598,  715,  206,  206,  206,
      258,  304,  304, 1016,  304, 1015,  100,  344,  100, 1014,
      344,  395,  395,  100,  100,  598,  395,  715,  206,  345,
      326,  611,  345,  326,  611,  348,  345,  621,  348, 1013,
      621,  183,  100,  261,  100,  100,  101,  444,  395,  101,
      348,  444, 1012,  326,  304,  326,  348,  206,  101,  101,
      344,  101,  101, 1011,  719,  101,  101,  101, 1010,  326,
      101,  345,  345,  444,  600,  344,  326,  600,  351,  353,
      722,  351,  353,  387,  387,  719,  387,  354,  354,  101,

      354,  326,  627,  351,  353,  627,  493,  600,  345,  351,
      353,  722,  354,  398,  398,  348,  398,  493,  354,  397,
      397,  354,  359, 1009,  397,  359,  101,  139,  139, 1008,
      139,  139,  139,  139, 1007,  139,  139,  359,  139,  139,
      139, 1006,  139,  359,  139,  139,  397, 1005,  493,  139,
      139,  139,  358,  808,  358,  358,  358, 1004,  351,  353,
      358,  360,  411,  411,  360,  411, 1003,  354,  368,  368,
      139,  139,  139,  368,  808,  812,  360,  390,  390,  390,
      390, 1002,  360,  879,  390,  953,  391,  391,  391,  391,
     1001,  701,  359,  391,  701,  368,  812,  139,  139,  139,

      139,  301,  301,  301,  301,  879, 1000,  953,  368,  378,
      378,  378,  378,  428,  428,  998,  428,  301,  301,  301,
      379,  379,  379,  379,  997,  378,  713,  379,  993,  713,
      378,  360,  381,  381,  381,  381,  379,  517,  301,  381,
      517,  379,  992,  991,  990,  301,  301,  517,  381,  433,
      433,  728,  433,  381,  728,  989,  382,  382,  382,  382,
      385,  385,  385,  385,  301,  988,  301,  301,  302,  302,
      302,  302,  382,  987,  443,  443,  385,  382,  382,  443,
      612,  385,  385,  612,  302,  302,  302,  414,  414,  414,
      414,  985,  379,  384,  384,  384,  384,  400,  400,  984,

      384,  443,  400,  414,  381,  302,  983,  721,  414,  384,
      721,  982,  302,  302,  384,  419,  419,  419,  419,  980,
      438,  438,  419,  438,  400,  424,  424,  424,  424,  612,
      721,  302,  424,  302,  302,  316,  794,  400,  316,  794,
      316,  316,  316,  316,  316,  316,  316,  316,  316,  316,
      316,  316,  316,  316,  979,  407,  978,  316,  316,  316,
      316,  425,  425,  425,  425,  384,  407,  407,  425,  446,
      446,  407,  446,  407,  409,  977,  445,  445,  316,  316,
      316,  445,  976,  975,  413,  409,  409,  974,  459,  459,
      409,  459,  409,  407,  519,  413,  413,  519,  470,  470,

      413,  470,  413,  445,  519,  316,  316,  316,  316,  316,
      334,  646,  409,  334,  646,  973,  334,  334,  334,  334,
      972,  646,  413,  448,  448,  971,  479,  479,  448,  479,
      970,  968,  334,  334,  334,  413,  415,  415,  415,  415,
      967,  966,  963,  415,  417,  417,  417,  417,  962,  957,
      448,  417,  415,  334,  956,  484,  484,  415,  484,  954,
      417,  488,  488,  448,  488,  417,  952,  951,  418,  418,
      418,  418,  950,  453,  453,  453,  453,  949,  418,  334,
      453,  334,  334,  346,  418,  948,  346,  499,  499,  418,
      499,  453,  453,  453,  453,  346,  346,  847,  346,  346,

      847,  947,  346,  346,  346,  946,  933,  346,  415,  933,
      945,  420,  420,  420,  420,  944,  417,  943,  420,  421,
      421,  421,  421,  942,  941,  619,  346,  420,  619,  421,
      514,  514,  420,  514,  940,  421,  520,  520,  647,  520,
      421,  647,  939,  454,  454,  454,  454,  938,  647,  467,
      467,  467,  467,  346,  403,  403,  467,  403,  403,  403,
      403,  937,  403,  403,  454,  403,  403,  403,  619,  403,
     1059,  403,  403, 1059,  619,  936,  403,  403,  403,  423,
      423,  423,  423,  420,  456,  456,  456,  456,  935,  423,
      934,  456,  932,  537,  537,  423,  537,  403,  403,  403,

      423,  930,  456,  456,  456,  456,  473,  473,  473,  473,
      927,  925,  924,  473,  462,  462,  462,  462,  523,  523,
      683,  523,  923,  683,  403,  403,  403,  403,  404,  404,
      462,  404,  404,  404,  404,  462,  404,  404,  922,  404,
      404,  404,  921,  404,  817,  404,  404,  817,  920,  919,
      404,  404,  404,  918,  917,  916,  458,  458,  458,  458,
      915,  523,  914,  458,  466,  466,  466,  466,  913,  911,
      910,  404,  404,  404,  458,  458,  458,  458,  683,  909,
      466,  463,  463,  463,  463,  466,  908,  817,  463,  465,
      465,  465,  465,  907,  817,  906,  465,  463,  404,  404,

      404,  404,  463,  905,  903,  465,  468,  468,  468,  468,
      465,  708,  902,  468,  469,  469,  469,  469,  474,  474,
      474,  474,  468,  541,  541,  474,  541,  468,  545,  545,
      469,  545,  901,  548,  548,  469,  548,  897,  609,  896,
      622,  609,  622,  622,  622,  609,  708,  620,  620,  895,
      620,  623,  623,  463,  623,  618, 1023, 1023,  618, 1023,
      723,  465,  620,  723,  731,  892,  623,  731,  620,  891,
      885,  884,  623,  708,  886,  882,  878,  886,  468,  588,
      609,  877,  588,  723,  588,  588,  588,  588,  588,  588,
      588,  588,  588,  588,  588,  588,  588,  588,  618, 1023,

      875,  588,  588,  588,  588,  625,  625,  609,  625,  618,
      626,  626,  874,  626,  628,  628,  873,  620,  731,  628,
      625,  623,  588,  588,  588,  626,  625,  629,  629,  625,
      872,  626,  629,  630,  630,  637,  637,  886,  630,  871,
      637,  628,  633,  633,  633,  633,  870,  869,  868,  588,
      588,  588,  588,  588,  629,  634,  634,  634,  634,  867,
      630,  642,  637,  638,  638,  633,  866,  865,  638,  639,
      639,  630,  642,  642,  639,  625,  864,  642,  634,  642,
      626,  863, 1022,  651,  651, 1022,  643,  862,  651,  860,
      638,  859,  741,  741,  741,  741,  639,  643,  643,  642,

      652,  652,  643,  734,  643,  652,  734,  639,  641,  641,
      651,  641,  641,  641,  641,  741,  641,  641,  858,  641,
      641,  641,  644,  641,  643,  641,  641,  652,  856,  855,
      641,  641,  641,  644,  644,  854,  653,  653,  644,  853,
      644,  653, 1101, 1022,  852, 1101,  734,  654,  654,  654,
      654,  641,  641,  641,  654,  655,  655,  655,  655,  851,
      644,  734,  655,  653,  850,  654,  654,  654,  654,  735,
     1113,  644,  735, 1113,  653,  849,  655,  848,  641,  641,
      641,  641,  656,  656,  656,  656,  846,  845, 1101,  656,
      657,  657,  657,  657,  712,  843,  712,  657,  712,  712,

      656,  656,  656,  656,  842,  841,  840,  712,  657,  657,
      657,  657,  735,  736,  736,  839,  736,  737,  737,  838,
      737,  738,  738,  735,  738,  739,  739,  837,  736,  836,
      739,  835,  737,  834,  736,  833,  738,  832,  737,  745,
      745,  831,  738,  830,  745,  738,  743,  743,  743,  743,
      827,  826,  739,  755,  755,  755,  755,  753,  753,  825,
      755,  822,  753,  821,  748,  809,  745,  739,  809,  743,
      816,  755,  755,  755,  755,  748,  748,  814,  813,  807,
      748,  745,  748,  736,  753,  806,  815,  737,  809,  815,
      805,  738,  746,  746,  802,  746,  746,  746,  746,  753,

      746,  746,  748,  746,  746,  746,  800,  746, 1126,  746,
      746, 1126,  799,  798,  746,  746,  746,  748,  797,  796,
      756,  756,  756,  756,  795,  820,  820,  756,  793,  803,
      820,  803,  792,  803,  803,  746,  746,  746,  756,  756,
      756,  756,  803, 1080,  815,  791, 1080,  757,  757,  757,
      757,  790,  820,  810,  757,  818,  810,  880,  818,  820,
      880,  789,  746,  746,  746,  746,  747,  747,  757,  747,
      747,  747,  747,  788,  747,  747,  810,  747,  747,  747,
      880,  747,  958,  747,  747,  958,  770,  770,  747,  747,
      747,  770,  823,  823,  770,  770,  787,  823,  818,  770,

      786, 1080,  770,  770,  883,  770,  785,  883,  784,  747,
      747,  747,  824,  818,  819,  819,  783,  819,  782,  823,
      828,  828,  780,  824,  824,  828,  823,  883,  824,  819,
      824,  888,  958,  779,  888,  819,  747,  747,  747,  747,
      778,  829,  829,  829,  829,  776,  889,  828,  829,  889,
      824,  775,  955, 1128,  828,  955, 1128,  824,  774,  829,
      829,  829,  829,  890,  890,  893,  893,  773,  890,  894,
      893,  898,  898,  772,  888,  955,  898,  771,  888, 1133,
      894,  894, 1133,  959,  819,  894,  959,  894, 1136,  889,
      890, 1136,  893,  769,  890,  768,  893,  960,  898,  767,

      960,  765,  898,  899,  899,  899,  899,  894,  764,  889,
      899,  894,  900,  900,  900,  900,  763, 1024,  762,  900,
     1024,  899,  899,  899,  899, 1019,  959,  761, 1019,  760,
      900,  900,  900,  900,  961,  961,  964,  964,  965,  961,
      960,  964, 1139, 1143,  959, 1139, 1143,  960, 1019,  965,
      965,  759, 1076,  758,  965, 1076,  965,  969,  969,  752,
     1024,  961,  969,  964, 1025, 1025, 1028, 1028,  751, 1025,
      750, 1028, 1033, 1033, 1029, 1076,  965, 1033, 1024,  961,
     1100,  964,  744, 1100,  969, 1029, 1029,  740,  733,  732,
     1029, 1025, 1029, 1028,  965, 1081, 1081, 1083, 1081, 1033,

     1083, 1103,  969, 1100, 1103, 1116, 1118, 1130, 1116, 1118,
     1130, 1307, 1029, 1146, 1146,  726, 1146,  725,  720, 1307,
      717,  716, 1307, 1307, 1319,  710, 1319, 1319, 1319, 1323,
      709, 1323, 1323, 1323, 1350,  707,  706,  705, 1081,  704,
     1083,  702, 1350,  700, 1103, 1350, 1350, 1103,  699, 1118,
     1130,  695,  693,  691,  690, 1083, 1146,  689,  688,  687,
      686, 1116, 1118, 1148, 1148, 1148, 1148, 1148, 1148, 1148,
     1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148,
     1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148,
     1148, 1148, 1148, 1148, 1148, 1149, 1149, 1149, 1149, 1149,

     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1150, 1150, 1150,
     1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150,
     1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150,
     1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,

     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1154, 1154, 1154, 1154, 1154,
     1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154,
     1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154,
     1154, 1154, 1154, 1154, 1154, 1154, 1154, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,

     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157,
     1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157,
     1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157,
     1157, 1157, 1157, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,

     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1159, 1159, 1159, 1159, 1159,
     1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159,
     1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159,
     1159, 1159, 1159, 1159, 1159, 1159, 1159, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1161,
     1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161,
     1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161,

     1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161,
     1161, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,
     1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,
     1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,
     1162, 1162, 1162, 1163, 1163, 1163, 1163, 1163, 1163, 1163,
     1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163,
     1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163,
     1163, 1163, 1163, 1163, 1163, 1164, 1164, 1164, 1164, 1164,
     1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164,
     1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164,

     1164, 1164, 1164, 1164, 1164, 1164, 1164, 1165, 1165, 1165,
     1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165,
     1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165,
     1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1166,
     1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166,
     1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166,
     1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166,
     1166, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167,
     1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167,
     1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167,

     1167, 1167, 1167, 1168, 1168, 1168, 1168, 1168, 1168, 1168,
     1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168,
     1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168,
     1168, 1168, 1168, 1168, 1168, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1170, 1170, 1170,
     1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170,
     1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170,
     1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1171,

     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
     1171, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1173, 1173, 1173, 1173, 1173, 1173, 1173,
     1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173,
     1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173,
     1173, 1173, 1173, 1173, 1173, 1174, 1174,  685, 1174, 1174,

     1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174,
     1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174,
     1174, 1174, 1174, 1174, 1174, 1174, 1174, 1175, 1356,  684,
     1356, 1356, 1356, 1383,  682, 1383, 1383, 1383,  681,  680,
      679,  678, 1175,  677, 1175, 1175, 1175,  676,  675,  674,
      673, 1175, 1176,  672, 1176, 1176,  671, 1176,  670,  667,
      666, 1176, 1176,  665, 1176, 1176, 1176, 1177,  664, 1177,
     1177, 1177, 1177,  663, 1177,  662,  659,  658, 1177, 1177,
     1177, 1177, 1177, 1177, 1178, 1178, 1178,  650,  649,  648,
      645,  636, 1178,  635,  632,  607,  606, 1178, 1178, 1178,

     1178, 1178, 1178, 1178, 1178, 1178,  605, 1178, 1178, 1179,
      595, 1179, 1179,  594, 1179,  592,  590,  589, 1179, 1179,
      587, 1179, 1179, 1179, 1180, 1180, 1180,  584,  582,  580,
      579,  578, 1180,  576,  574,  572,  571, 1180, 1180, 1180,
     1180, 1180, 1180, 1180, 1180, 1180,  568, 1180, 1180, 1181,
     1181,  565, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1182,  562,  560,  559,  557,  555, 1182,  554, 1182,
     1182, 1182, 1182, 1182,  552,  550, 1182, 1182, 1182, 1182,

     1182, 1182,  547,  543,  539,  536, 1182, 1183, 1183, 1183,
     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1184,
      534, 1184, 1184, 1184,  533,  532,  530,  529, 1184, 1185,
      526, 1185, 1185,  525,  522,  516, 1185,  513, 1185, 1185,
     1185,  512,  508,  506,  505, 1185, 1186, 1186, 1186, 1186,
      503,  501, 1186,  498,  496,  495,  492,  490,  486,  483,
     1186,  482,  481, 1186,  478,  477,  476, 1186,  472, 1186,
     1186, 1186,  464,  461,  457, 1186, 1186, 1187, 1187, 1187,

     1187,  441,  440,  436,  435,  431,  430,  416,  410,  405,
      401, 1187,  393, 1187, 1187, 1187,  392,  389, 1187,  380,
     1187, 1187, 1187,  377,  374,  372,  369, 1187, 1188, 1188,
     1188, 1188,  361,  336, 1188,  335,  332,  330,  329,  319,
      317,  310,  309,  306,  305,  295,  292,  291,  287, 1188,
      283, 1188, 1188, 1188,  282,  279,  275,  274, 1188, 1189,
     1189,  271, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189,
     1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189,
     1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189,
     1189, 1190,  266,  235,  221,  220,  219, 1190,  215, 1190,

     1190, 1190, 1190, 1190,  214,  210, 1190, 1190, 1190, 1190,
     1190, 1190,  205,  202,  194,  191, 1190, 1191, 1191,  184,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1192,
     1192,  166,  162,  158,  149,  135, 1192,  132, 1192, 1192,
     1192, 1192, 1192,  126, 1192, 1192, 1192, 1192, 1192, 1192,
     1192,  114,  110,   94,   93, 1192, 1193, 1193, 1193, 1193,
       92,   87, 1193,    8,    7,    0,    0,    0,    0,    0,
     1193,    0,    0, 1193,    0,    0,    0, 1193,    0, 1193,

     1193, 1193,    0,    0,    0, 1193, 1193, 1194, 1194, 1194,
     1194,    0,    0,    0,    0, 1194,    0,    0,    0,    0,
        0, 1194,    0, 1194, 1194,    0,    0,    0, 1194,    0,
     1194, 1194, 1194,    0,    0,    0,    0, 1194, 1195, 1195,
     1195, 1195,    0,    0, 1195,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1195,
        0, 1195, 1195, 1195,    0,    0,    0,    0, 1195, 1196,
        0,    0, 1196,    0,    0,    0,    0, 1196,    0, 1196,
     1196, 1196,    0,    0,    0,    0, 1196, 1197, 1197,    0,
     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,

     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1198,
     1198,    0, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198,
     1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198,
     1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198,
     1198, 1199, 1199,    0, 1199, 1199, 1199, 1199, 1199, 1199,
     1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199,
     1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199,
     1199, 1199, 1199, 1200,    0,    0,    0,    0,    0, 1200,
        0, 1200, 1200, 1200, 1200, 1200,    0,    0, 1200, 1200,

     1200, 1200, 1200, 1200,    0,    0,    0,    0, 1200, 1201,
        0, 1201, 1201, 1201,    0,    0,    0,    0, 1201, 1202,
        0,    0, 1202,    0,    0,    0,    0,    0,    0,    0,
        0, 1202,    0,    0,    0, 1202,    0,    0,    0,    0,
     1202,    0, 1202, 1202, 1202,    0,    0,    0,    0, 1202,
     1203,    0, 1203, 1203, 1203,    0,    0,    0,    0, 1203,
     1204, 1204, 1204, 1204,    0,    0, 1204,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1204, 1204,    0,    0,
        0, 1204,    0, 1204, 1204, 1204,    0,    0,    0,    0,
     1204, 1205, 1205, 1205, 1205,    0,    0, 1205,    0,    0,

        0,    0,    0,    0,    0, 1205,    0,    0, 1205,    0,
        0,    0, 1205,    0, 1205, 1205, 1205,    0,    0,    0,
     1205, 1205, 1206, 1206, 1206, 1206,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1206,    0, 1206, 1206,
        0,    0,    0, 1206,    0, 1206, 1206, 1206,    0,    0,
        0,    0, 1206, 1207, 1207, 1207, 1207,    0,    0, 1207,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1207,    0, 1207, 1207, 1207,    0,
        0,    0,    0, 1207, 1208,    0, 1208, 1208, 1208,    0,
        0,    0,    0, 1208, 1209,    0, 1209,    0,    0,    0,

        0, 1209,    0, 1209, 1209, 1209,    0,    0,    0,    0,
     1209, 1210, 1210,    0, 1210,    0,    0,    0,    0, 1210,
        0, 1210, 1210, 1210,    0,    0,    0,    0, 1210, 1211,
     1211,    0, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211,
        0, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211,
     1211, 1211,    0, 1211, 1211, 1211, 1211, 1211, 1211, 1211,
     1211, 1212,    0,    0, 1212,    0,    0,    0,    0, 1212,
        0, 1212, 1212, 1212,    0,    0,    0,    0, 1212, 1213,
     1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213,
     1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213,

        0, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213,
     1213, 1214, 1214,    0, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214,    0, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1215, 1215,    0, 1215,    0, 1215, 1215,
     1215,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1215, 1215, 1215,    0, 1215, 1215,    0,    0,    0,
        0,    0, 1215, 1216,    0,    0, 1216,    0,    0,    0,
        0, 1216,    0, 1216, 1216, 1216,    0,    0,    0,    0,
     1216, 1217, 1217,    0, 1217, 1217, 1217, 1217, 1217, 1217,

     1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217,
     1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217,
     1217, 1217, 1217, 1218, 1218,    0, 1218,    0, 1218, 1218,
     1218, 1218, 1218, 1218,    0, 1218, 1218, 1218, 1218,    0,
     1218, 1218, 1218, 1218,    0, 1218,    0, 1218, 1218, 1218,
     1218, 1218, 1218, 1218, 1218, 1219,    0,    0, 1219,    0,
        0,    0,    0, 1219,    0,    0,    0,    0, 1219, 1219,
        0, 1219,    0,    0,    0,    0, 1219,    0, 1219, 1219,
     1219, 1220, 1220,    0, 1220,    0, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,

     1220, 1220,    0, 1220,    0, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1221, 1221,    0, 1221,    0, 1221, 1221,
     1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221,
     1221, 1221, 1221, 1221,    0, 1221,    0, 1221, 1221, 1221,
     1221, 1221, 1221, 1221, 1221, 1222,    0,    0, 1222,    0,
        0,    0,    0, 1222,    0, 1222, 1222, 1222,    0,    0,
        0,    0, 1222, 1223, 1223,    0, 1223, 1223, 1223, 1223,
     1223, 1223,    0,    0, 1223, 1223, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1223,    0, 1223,    0, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1224,    0, 1224, 1224, 1224,

        0,    0,    0,    0, 1224, 1225,    0, 1225, 1225,    0,
        0,    0, 1225,    0, 1225, 1225, 1225,    0,    0,    0,
        0, 1225, 1226,    0, 1226, 1226, 1226,    0,    0,    0,
        0, 1226, 1227,    0, 1227, 1227,    0,    0,    0, 1227,
        0, 1227, 1227, 1227,    0,    0,    0,    0, 1227, 1228,
     1228,    0, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228,
     1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228,
        0, 1228,    0, 1228, 1228, 1228, 1228, 1228, 1228, 1228,
     1228, 1229,    0,    0, 1229,    0,    0,    0,    0, 1229,
        0, 1229, 1229, 1229,    0,    0,    0,    0, 1229, 1230,

     1230,    0, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230,    0, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230,    0, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1231, 1231,    0, 1231, 1231, 1231, 1231, 1231, 1231,
     1231, 1231,    0, 1231, 1231, 1231, 1231, 1231, 1231, 1231,
     1231, 1231,    0, 1231,    0, 1231, 1231, 1231, 1231, 1231,
     1231, 1231, 1231, 1232,    0, 1232, 1232, 1232, 1232, 1232,
        0,    0,    0, 1232,    0, 1232, 1232, 1232,    0,    0,
        0,    0, 1232, 1233, 1233,    0, 1233, 1233, 1233, 1233,
     1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233,

     1233, 1233, 1233, 1233, 1233, 1233,    0, 1233, 1233, 1233,
     1233, 1233, 1233, 1233, 1233, 1234, 1234, 1234, 1234, 1234,
     1234, 1234, 1234, 1234,    0,    0, 1234, 1234, 1234, 1234,
     1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234,
     1234, 1234, 1234, 1234, 1234, 1234, 1234, 1235, 1235, 1235,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235,    0,
     1235, 1235, 1236, 1236,    0, 1236, 1236, 1236, 1236, 1236,
     1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236,
     1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236,

     1236, 1236, 1236, 1236, 1237,    0, 1237, 1237, 1237,    0,
        0,    0,    0, 1237, 1238, 1238,    0,    0,    0, 1238,
        0, 1238, 1238, 1238,    0,    0,    0,    0, 1238, 1239,
        0, 1239, 1239,    0, 1239,    0,    0,    0, 1239, 1239,
        0, 1239, 1239, 1239, 1240,    0,    0, 1240,    0,    0,
        0,    0, 1240,    0, 1240, 1240, 1240, 1241,    0,    0,
     1241,    0, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241,
     1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241,
     1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1242,
        0, 1242, 1242, 1242,    0,    0,    0, 1242, 1243,    0,

        0,    0,    0,    0,    0,    0, 1243,    0, 1243, 1243,
     1243, 1244,    0, 1244, 1244,    0, 1244,    0,    0,    0,
     1244, 1244,    0, 1244, 1244, 1244, 1245,    0,    0, 1245,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1245, 1245, 1245,
     1245, 1245, 1246, 1246,    0, 1246, 1246, 1246, 1246, 1246,
     1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246,
     1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246,
     1246, 1246, 1246, 1246, 1247,    0,    0,    0,    0,    0,
     1247,    0, 1247, 1247, 1247, 1247, 1247,    0,    0, 1247,

     1247, 1247, 1247, 1247, 1247,    0,    0,    0,    0, 1247,
     1248,    0,    0,    0,    0,    0, 1248,    0, 1248,    0,
     1248, 1248, 1248,    0,    0, 1248, 1248, 1248, 1248, 1248,
     1248,    0,    0,    0,    0, 1248, 1249, 1249, 1249, 1249,
     1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249,
     1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249,
     1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1250,    0,
     1250, 1250,    0,    0,    0, 1250,    0, 1250, 1250, 1250,
        0,    0,    0,    0, 1250, 1251,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

     1251,    0, 1251, 1251, 1251,    0,    0,    0,    0, 1251,
     1252, 1252, 1252, 1252,    0,    0, 1252,    0,    0,    0,
        0,    0,    0,    0, 1252,    0,    0, 1252,    0,    0,
        0, 1252,    0, 1252, 1252, 1252,    0,    0,    0, 1252,
     1252, 1253, 1253, 1253, 1253,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1253,    0, 1253, 1253, 1253,
        0,    0, 1253,    0, 1253, 1253, 1253,    0,    0,    0,
        0, 1253, 1254, 1254, 1254, 1254,    0,    0, 1254,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1254,    0, 1254, 1254, 1254,    0,    0,

        0,    0, 1254, 1255, 1255, 1255, 1255, 1255, 1255, 1255,
     1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255,
     1255, 1255, 1255,    0, 1255, 1255, 1255, 1255, 1255, 1255,
     1255, 1255, 1255, 1255, 1255, 1256,    0, 1256,    0,    0,
     1256,    0, 1256, 1256, 1256,    0,    0,    0,    0, 1256,
     1257, 1257,    0, 1257, 1257, 1257, 1257, 1257, 1257, 1257,
     1257, 1257, 1257, 1257, 1257, 1257, 1257, 1257, 1257, 1257,
     1257, 1257, 1257, 1257, 1257, 1257, 1257, 1257, 1257, 1257,
     1257, 1257, 1258,    0,    0,    0,    0,    0, 1258,    0,
     1258, 1258, 1258, 1258, 1258,    0,    0, 1258, 1258, 1258,

     1258, 1258, 1258,    0,    0,    0,    0, 1258, 1259,    0,
        0,    0,    0,    0, 1259,    0, 1259,    0, 1259, 1259,
     1259,    0,    0, 1259, 1259, 1259, 1259, 1259, 1259,    0,
        0,    0,    0, 1259, 1260, 1260,    0, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1261, 1261,    0, 1261,
     1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261,
     1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261,
     1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1262, 1262,

        0,    0,    0,    0,    0, 1262,    0, 1262, 1262, 1262,
     1262, 1262,    0, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
        0,    0,    0,    0, 1262, 1263,    0,    0,    0,    0,
        0, 1263,    0, 1263,    0, 1263, 1263, 1263,    0,    0,
     1263, 1263, 1263, 1263, 1263, 1263,    0,    0,    0,    0,
     1263, 1264, 1264, 1264, 1264,    0,    0, 1264,    0,    0,
        0,    0,    0,    0,    0, 1264,    0,    0, 1264,    0,
        0,    0, 1264,    0, 1264, 1264, 1264,    0,    0,    0,
     1264, 1264, 1265, 1265, 1265, 1265,    0,    0,    0,    0,
     1265,    0,    0,    0,    0,    0, 1265,    0, 1265, 1265,

        0,    0,    0, 1265,    0, 1265, 1265, 1265,    0,    0,
        0,    0, 1265, 1266, 1266, 1266, 1266,    0,    0, 1266,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1266,    0, 1266, 1266, 1266,    0,
        0,    0,    0, 1266, 1267, 1267, 1267, 1267, 1267, 1267,
     1267, 1267, 1267, 1267,    0, 1267, 1267, 1267, 1267, 1267,
     1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267,
     1267, 1267, 1267, 1267, 1267, 1267, 1268,    0,    0, 1268,
        0,    0,    0,    0, 1268,    0,    0,    0,    0,    0,
        0,    0, 1268,    0,    0,    0,    0, 1268,    0, 1268,

     1268, 1268,    0,    0,    0,    0, 1268, 1269,    0,    0,
     1269,    0,    0,    0,    0, 1269,    0, 1269, 1269, 1269,
        0,    0,    0,    0, 1269, 1270, 1270,    0, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1271, 1271,    0,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1272,
     1272,    0, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272,

     1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272,
     1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272,
     1272, 1273,    0,    0,    0,    0,    0, 1273,    0, 1273,
     1273, 1273, 1273, 1273,    0,    0, 1273, 1273, 1273, 1273,
     1273, 1273,    0,    0,    0,    0, 1273, 1274,    0,    0,
        0,    0,    0, 1274,    0, 1274,    0, 1274, 1274, 1274,
        0,    0, 1274, 1274, 1274, 1274, 1274, 1274,    0,    0,
        0,    0, 1274, 1275,    0,    0, 1275,    0,    0,    0,
        0,    0,    0,    0,    0, 1275,    0,    0,    0, 1275,
        0,    0,    0,    0, 1275,    0, 1275, 1275, 1275,    0,

        0,    0,    0, 1275, 1276, 1276, 1276, 1276,    0,    0,
     1276,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1276, 1276,    0,    0,    0, 1276,    0, 1276, 1276, 1276,
        0,    0,    0,    0, 1276, 1277,    0, 1277, 1277, 1277,
        0,    0,    0,    0, 1277, 1278, 1278, 1278, 1278,    0,
        0, 1278,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1278, 1278,    0,    0,    0, 1278,    0, 1278, 1278,
     1278,    0,    0,    0,    0, 1278, 1279, 1279, 1279, 1279,
        0,    0, 1279,    0,    0,    0,    0,    0,    0,    0,
     1279,    0,    0, 1279,    0,    0,    0, 1279,    0, 1279,

     1279, 1279,    0,    0,    0, 1279, 1279, 1280, 1280, 1280,
     1280,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1280,    0, 1280, 1280,    0,    0,    0, 1280,    0,
     1280, 1280, 1280,    0,    0,    0,    0, 1280, 1281, 1281,
     1281, 1281,    0,    0, 1281,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1281,
        0, 1281, 1281, 1281,    0,    0,    0,    0, 1281, 1282,
        0,    0,    0,    0, 1282,    0, 1282, 1282, 1282,    0,
        0,    0,    0, 1282, 1283,    0, 1283,    0,    0,    0,
        0, 1283,    0, 1283, 1283, 1283,    0,    0,    0,    0,

     1283, 1284,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1284,    0, 1284, 1284,
     1284,    0,    0,    0,    0, 1284, 1285, 1285,    0, 1285,
        0,    0,    0,    0, 1285,    0, 1285, 1285, 1285,    0,
        0,    0,    0, 1285, 1286, 1286,    0, 1286, 1286, 1286,
     1286, 1286, 1286, 1286, 1286,    0, 1286, 1286, 1286, 1286,
     1286, 1286, 1286, 1286, 1286, 1286, 1286,    0, 1286, 1286,
     1286, 1286, 1286, 1286, 1286, 1286, 1287,    0,    0, 1287,
        0,    0,    0,    0, 1287,    0, 1287, 1287, 1287,    0,
        0,    0,    0, 1287, 1288, 1288, 1288, 1288, 1288, 1288,

     1288, 1288, 1288, 1288, 1288, 1288, 1288, 1288, 1288, 1288,
     1288, 1288, 1288, 1288, 1288,    0, 1288, 1288, 1288, 1288,
     1288, 1288, 1288, 1288, 1288, 1288, 1289, 1289,    0, 1289,
     1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289,
     1289, 1289, 1289, 1289, 1289, 1289, 1289,    0, 1289, 1289,
     1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1290,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1290,    0, 1290, 1290, 1290,    0,    0,
        0,    0, 1290, 1291,    0,    0, 1291,    0,    0,    0,
        0, 1291,    0, 1291, 1291, 1291,    0,    0,    0,    0,

     1291, 1292, 1292,    0, 1292, 1292, 1292, 1292, 1292, 1292,
     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,
     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,
     1292, 1292, 1292, 1293, 1293,    0, 1293,    0, 1293, 1293,
     1293, 1293, 1293, 1293,    0, 1293, 1293, 1293, 1293,    0,
     1293, 1293, 1293, 1293,    0, 1293,    0, 1293, 1293, 1293,
     1293, 1293, 1293, 1293, 1293, 1294,    0,    0, 1294,    0,
        0,    0,    0, 1294,    0,    0,    0,    0, 1294, 1294,
        0, 1294,    0,    0,    0,    0, 1294,    0, 1294, 1294,
     1294, 1295, 1295,    0, 1295,    0, 1295, 1295, 1295, 1295,

     1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295,
     1295, 1295,    0, 1295,    0, 1295, 1295, 1295, 1295, 1295,
     1295, 1295, 1295, 1296, 1296,    0, 1296,    0, 1296, 1296,
     1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296,
     1296, 1296, 1296, 1296,    0, 1296,    0, 1296, 1296, 1296,
     1296, 1296, 1296, 1296, 1296, 1297,    0,    0, 1297,    0,
        0,    0,    0, 1297,    0, 1297, 1297, 1297,    0,    0,
        0,    0, 1297, 1298, 1298,    0, 1298, 1298, 1298, 1298,
     1298, 1298,    0,    0, 1298, 1298, 1298, 1298, 1298, 1298,
     1298, 1298, 1298, 1298,    0, 1298,    0, 1298, 1298, 1298,

     1298, 1298, 1298, 1298, 1298, 1299,    0, 1299, 1299,    0,
        0,    0, 1299,    0, 1299, 1299, 1299,    0,    0,    0,
        0, 1299, 1300,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1300,    0, 1300,
     1300, 1300,    0,    0,    0,    0, 1300, 1301,    0, 1301,
     1301,    0,    0,    0, 1301,    0, 1301, 1301, 1301,    0,
        0,    0,    0, 1301, 1302,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1302,
        0, 1302, 1302, 1302,    0,    0,    0,    0, 1302, 1303,
     1303,    0, 1303, 1303, 1303, 1303, 1303, 1303, 1303, 1303,

     1303, 1303, 1303, 1303, 1303, 1303, 1303, 1303, 1303, 1303,
        0, 1303,    0, 1303, 1303, 1303, 1303, 1303, 1303, 1303,
     1303, 1304,    0,    0, 1304,    0,    0,    0,    0, 1304,
        0, 1304, 1304, 1304,    0,    0,    0,    0, 1304, 1305,
     1305,    0, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305,
     1305, 1305, 1305,    0, 1305, 1305, 1305, 1305, 1305, 1305,
     1305, 1305,    0, 1305, 1305, 1305, 1305, 1305, 1305, 1305,
     1305, 1306, 1306,    0, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306,    0, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306,    0, 1306,    0, 1306, 1306, 1306, 1306, 1306,

     1306, 1306, 1306, 1308,    0, 1308, 1308, 1308, 1308, 1308,
        0,    0,    0, 1308,    0, 1308, 1308, 1308,    0,    0,
        0,    0, 1308, 1309,    0,    0,    0,    0, 1309,    0,
     1309, 1309, 1309,    0,    0,    0,    0, 1309, 1310, 1310,
        0, 1310, 1310, 1310, 1310, 1310, 1310, 1310, 1310, 1310,
     1310, 1310, 1310, 1310, 1310, 1310, 1310, 1310, 1310, 1310,
     1310,    0, 1310, 1310, 1310, 1310, 1310, 1310, 1310, 1310,
     1311, 1311, 1311, 1311, 1311, 1311, 1311, 1311, 1311,    0,
        0, 1311, 1311, 1311, 1311, 1311, 1311, 1311, 1311, 1311,
     1311, 1311, 1311, 1311, 1311, 1311, 1311, 1311, 1311, 1311,

     1311, 1311, 1312, 1312,    0,    0,    0, 1312,    0, 1312,
     1312, 1312,    0,    0,    0,    0, 1312, 1313, 1313,    0,
     1313, 1313, 1313, 1313,    0, 1313, 1313, 1313, 1313, 1313,
     1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313,
     1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1314,
     1314,    0, 1314,    0,    0,    0,    0, 1314,    0, 1314,
     1314, 1314, 1315,    0, 1315, 1315,    0, 1315,    0,    0,
        0, 1315, 1315,    0, 1315, 1315, 1315, 1316,    0,    0,
     1316,    0, 1316, 1316, 1316, 1316, 1316, 1316, 1316, 1316,
     1316, 1316, 1316, 1316, 1316, 1316, 1316, 1316, 1316, 1316,

     1316, 1316, 1316, 1316, 1316, 1316, 1316, 1316, 1316, 1317,
     1317,    0, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317,
     1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317,
     1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317,
     1317, 1318,    0,    0, 1318,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1318,    0, 1318, 1318, 1318, 1320,    0,    0,
     1320,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1320,    0,
     1320, 1320, 1320, 1321, 1321,    0, 1321, 1321, 1321, 1321,

     1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321,
     1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321,
     1321, 1321,    0, 1321, 1321, 1322,    0,    0,    0,    0,
        0,    0,    0, 1322,    0, 1322, 1322, 1322, 1324,    0,
        0, 1324,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1324,
     1324, 1324, 1324, 1324, 1325,    0,    0,    0,    0,    0,
     1325,    0, 1325, 1325, 1325, 1325, 1325,    0,    0, 1325,
     1325, 1325, 1325, 1325, 1325,    0,    0,    0,    0, 1325,
     1326,    0,    0,    0,    0,    0, 1326,    0, 1326, 1326,

     1326, 1326, 1326,    0,    0, 1326, 1326, 1326, 1326, 1326,
     1326,    0,    0,    0,    0, 1326, 1327,    0, 1327, 1327,
     1327,    0,    0,    0,    0, 1327, 1328, 1328, 1328, 1328,
     1328, 1328, 1328, 1328, 1328, 1328, 1328, 1328, 1328, 1328,
     1328, 1328, 1328, 1328, 1328, 1328, 1328, 1328, 1328, 1328,
     1328, 1328, 1328, 1328, 1328, 1328, 1328, 1328, 1329,    0,
     1329,    0,    0, 1329,    0, 1329, 1329, 1329,    0,    0,
        0,    0, 1329, 1330,    0,    0,    0,    0,    0, 1330,
        0, 1330, 1330, 1330, 1330, 1330,    0,    0, 1330, 1330,
     1330, 1330, 1330, 1330,    0,    0,    0,    0, 1330, 1331,

        0,    0,    0,    0,    0, 1331,    0, 1331, 1331, 1331,
     1331, 1331,    0,    0, 1331, 1331, 1331, 1331, 1331, 1331,
        0,    0,    0,    0, 1331, 1332, 1332,    0, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1333, 1333,    0,
        0,    0,    0,    0, 1333,    0, 1333, 1333, 1333, 1333,
     1333,    0, 1333, 1333, 1333, 1333, 1333, 1333, 1333,    0,
        0,    0,    0, 1333, 1334, 1334,    0,    0,    0,    0,
        0, 1334,    0, 1334, 1334, 1334, 1334, 1334,    0, 1334,

     1334, 1334, 1334, 1334, 1334, 1334,    0,    0,    0,    0,
     1334, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335,
     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335,
     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335,
     1335, 1335, 1335, 1336,    0,    0, 1336,    0,    0,    0,
        0, 1336,    0,    0,    0,    0,    0,    0,    0, 1336,
        0,    0,    0,    0, 1336,    0, 1336, 1336, 1336,    0,
        0,    0,    0, 1336, 1337,    0,    0,    0,    0,    0,
     1337,    0, 1337, 1337, 1337, 1337, 1337,    0,    0, 1337,
     1337, 1337, 1337, 1337, 1337,    0,    0,    0,    0, 1337,

     1338,    0,    0,    0,    0,    0, 1338,    0, 1338, 1338,
     1338, 1338, 1338,    0,    0, 1338, 1338, 1338, 1338, 1338,
     1338,    0,    0,    0,    0, 1338, 1339, 1339, 1339, 1339,
        0,    0, 1339,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1339, 1339,    0,    0,    0, 1339,    0, 1339,
     1339, 1339,    0,    0,    0,    0, 1339, 1340, 1340, 1340,
     1340,    0,    0, 1340,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1340,    0,    0,    0, 1340,    0,
     1340, 1340, 1340,    0,    0,    0,    0, 1340, 1341, 1341,
     1341, 1341,    0,    0, 1341,    0,    0,    0,    0,    0,

        0,    0,    0,    0, 1341, 1341,    0,    0,    0, 1341,
        0, 1341, 1341, 1341,    0,    0,    0,    0, 1341, 1342,
        0,    0,    0,    0, 1342,    0, 1342, 1342, 1342,    0,
        0,    0,    0, 1342, 1343,    0, 1343, 1343, 1343,    0,
        0,    0,    0, 1343, 1344,    0, 1344,    0,    0,    0,
        0, 1344,    0, 1344, 1344, 1344,    0,    0,    0,    0,
     1344, 1345,    0, 1345, 1345, 1345,    0,    0,    0,    0,
     1345, 1346,    0,    0,    0,    0, 1346,    0, 1346, 1346,
     1346,    0,    0,    0,    0, 1346, 1347, 1347, 1347, 1347,
     1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347,

     1347, 1347, 1347,    0, 1347, 1347, 1347, 1347,    0, 1347,
        0,    0, 1347, 1347, 1347, 1347, 1347, 1347, 1348,    0,
     1348, 1348, 1348,    0,    0,    0,    0, 1348, 1349,    0,
     1349, 1349, 1349,    0,    0,    0,    0, 1349, 1351,    0,
     1351, 1351, 1351, 1351, 1351,    0,    0,    0, 1351,    0,
     1351, 1351, 1351,    0,    0,    0,    0, 1351, 1352, 1352,
        0, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1353,    0,    0, 1353,    0,    0,    0,    0, 1353,    0,

     1353, 1353, 1353, 1354,    0, 1354,    0, 1354, 1354,    0,
     1354,    0,    0,    0, 1354, 1354,    0, 1354, 1354, 1354,
     1355, 1355,    0, 1355, 1355, 1355, 1355, 1355, 1355, 1355,
     1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355,
     1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355,
     1355, 1355, 1357,    0,    0, 1357,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1357,    0, 1357, 1357, 1357, 1358, 1358,
        0, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358,
     1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358,

     1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358,
     1359, 1359, 1359, 1359, 1359, 1360,    0,    0, 1360,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1360, 1360, 1360, 1360,
     1360, 1361, 1361,    0, 1361,    0,    0,    0,    0,    0,
        0,    0, 1361,    0, 1361, 1361,    0, 1361, 1361,    0,
        0, 1361, 1361,    0, 1361, 1361, 1361,    0, 1361, 1362,
        0,    0,    0,    0,    0, 1362,    0, 1362, 1362, 1362,
     1362, 1362,    0,    0, 1362, 1362, 1362, 1362, 1362, 1362,
        0,    0,    0,    0, 1362, 1363, 1363, 1363, 1363, 1363,

     1363, 1363, 1363, 1363, 1363, 1363, 1363, 1363, 1363, 1363,
     1363, 1363, 1363, 1363, 1363, 1363, 1363, 1363, 1363, 1363,
     1363, 1363, 1363, 1363, 1363, 1363, 1363, 1364,    0,    0,
        0,    0,    0, 1364,    0, 1364, 1364, 1364, 1364, 1364,
        0,    0, 1364, 1364, 1364, 1364, 1364, 1364,    0,    0,
        0,    0, 1364, 1365, 1365,    0, 1365, 1365, 1365, 1365,
     1365, 1365, 1365, 1365, 1365, 1365, 1365, 1365, 1365, 1365,
     1365, 1365, 1365, 1365, 1365, 1365, 1365, 1365, 1365, 1365,
     1365, 1365, 1365, 1365, 1365, 1366, 1366,    0,    0,    0,
        0,    0, 1366,    0, 1366, 1366, 1366, 1366, 1366,    0,

     1366, 1366, 1366, 1366, 1366, 1366, 1366,    0,    0,    0,
        0, 1366, 1367,    0,    0,    0,    0,    0, 1367,    0,
     1367, 1367, 1367, 1367, 1367,    0,    0, 1367, 1367, 1367,
     1367, 1367, 1367,    0,    0,    0,    0, 1367, 1368,    0,
     1368, 1368, 1368,    0,    0,    0,    0, 1368, 1369, 1369,
     1369, 1369,    0,    0, 1369,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1369, 1369,    0,    0,    0, 1369,
        0, 1369, 1369, 1369,    0,    0,    0,    0, 1369, 1370,
     1370, 1370, 1370,    0,    0, 1370,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1370,    0,    0,    0,

     1370,    0, 1370, 1370, 1370,    0,    0,    0,    0, 1370,
     1371,    0, 1371,    0,    0,    0,    0, 1371,    0, 1371,
     1371, 1371,    0,    0,    0,    0, 1371, 1372,    0,    0,
        0,    0, 1372,    0, 1372, 1372, 1372,    0,    0,    0,
        0, 1372, 1373, 1373,    0, 1373,    0,    0,    0,    0,
     1373,    0, 1373, 1373, 1373, 1374, 1374,    0, 1374, 1374,
     1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374,
     1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374,
     1374, 1374, 1374, 1374, 1374, 1374, 1374, 1375, 1375, 1375,
     1375,    0,    0, 1375,    0,    0,    0,    0,    0,    0,

        0,    0,    0, 1375, 1375,    0,    0,    0, 1375,    0,
     1375, 1375, 1375,    0,    0,    0,    0, 1375, 1376, 1376,
     1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376,
     1376, 1376, 1376, 1376, 1376,    0, 1376, 1376, 1376, 1376,
        0, 1376,    0, 1376,    0, 1376, 1376, 1376, 1376, 1376,
     1377, 1377,    0, 1377, 1377, 1377, 1377, 1377, 1377, 1377,
     1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377,
     1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377,
     1377, 1377, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378,
     1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378,    0,

     1378, 1378, 1378, 1378,    0, 1378,    0,    0,    0, 1378,
     1378, 1378, 1378, 1378, 1379, 1379, 1379, 1379, 1379, 1379,
     1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379,
     1379,    0, 1379, 1379, 1379, 1379,    0, 1379,    0,    0,
        0, 1379, 1379, 1379, 1379, 1379, 1380, 1380, 1380, 1380,
     1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380,
     1380, 1380, 1380,    0, 1380, 1380, 1380, 1380,    0, 1380,
        0,    0,    0, 1380, 1380, 1380, 1380, 1380, 1381, 1381,
     1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381,
     1381, 1381, 1381, 1381, 1381,    0, 1381, 1381, 1381, 1381,

        0, 1381,    0,    0,    0, 1381, 1381, 1381, 1381, 1381,
     1382, 1382,    0, 1382, 1382, 1382, 1382, 1382, 1382, 1382,
     1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382,
     1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382,
     1382, 1382, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,

     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147
    } ;

extern int commentscanYY_flex_debug;
int commentscanYY_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *commentscanYYtext;
#line 1 "commentscan.l"
/*****************************************************************************
 *
 * Copyright (C) 1997-2015 by Dimitri van Heesch.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation under the terms of the GNU General Public License is hereby 
 * granted. No representations are made about the suitability of this software 
 * for any purpose. It is provided "as is" without express or implied warranty.
 * See the GNU General Public License for more details.
 *
 * Documents produced by Doxygen are derivative works derived from the
 * input used in their production; they are not affected by this license.
 *
 */
#line 20 "commentscan.l"

/*
 *	includes
 */
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <ctype.h>

#include <qarray.h>
#include <qstack.h>
#include <qregexp.h>
#include <qfile.h>
  
#include "scanner.h"
#include "entry.h"
#include "doxygen.h"
#include "message.h"
#include "config.h"
#include "util.h"
#include "index.h"
#include "defargs.h"
#include "language.h"
#include "outputlist.h"
#include "membergroup.h"
#include "reflist.h"
#include "debug.h"
#include "parserintf.h"
#include "cite.h"
#include "markdown.h"
#include "condparser.h"
#include "formula.h"

#define YY_NO_INPUT 1
#define YY_NO_UNISTD_H 1

// forward declarations
static bool handleBrief(const QCString &);
static bool handleFn(const QCString &);
static bool handleDef(const QCString &);
static bool handleOverload(const QCString &);
static bool handleEnum(const QCString &);
static bool handleDefGroup(const QCString &);
static bool handleAddToGroup(const QCString &);
static bool handleWeakGroup(const QCString &);
static bool handleNamespace(const QCString &);
static bool handlePackage(const QCString &);
static bool handleClass(const QCString &);
static bool handleHeaderFile(const QCString &);
static bool handleProtocol(const QCString &);
static bool handleCategory(const QCString &);
static bool handleUnion(const QCString &);
static bool handleStruct(const QCString &);
static bool handleInterface(const QCString &);
static bool handleIdlException(const QCString &);
static bool handlePage(const QCString &);
static bool handleMainpage(const QCString &);
static bool handleFile(const QCString &);
static bool handleDir(const QCString &);
static bool handleExample(const QCString &);
static bool handleDetails(const QCString &);
static bool handleName(const QCString &);
static bool handleTodo(const QCString &);
static bool handleTest(const QCString &);
static bool handleBug(const QCString &);
static bool handleSubpage(const QCString &s);
static bool handleDeprecated(const QCString &);
static bool handleXRefItem(const QCString &);
static bool handleRelated(const QCString &);
static bool handleRelatedAlso(const QCString &);
static bool handleMemberOf(const QCString &);
static bool handleRefItem(const QCString &);
static bool handleSection(const QCString &);
static bool handleAnchor(const QCString &);
static bool handleCite(const QCString &);
static bool handleFormatBlock(const QCString &);
static bool handleAddIndex(const QCString &);
static bool handleIf(const QCString &);
static bool handleIfNot(const QCString &);
static bool handleElseIf(const QCString &);
static bool handleElse(const QCString &);
static bool handleEndIf(const QCString &);
static bool handleIngroup(const QCString &);
static bool handleNoSubGrouping(const QCString &);
static bool handleShowInitializer(const QCString &);
static bool handleHideInitializer(const QCString &);
static bool handleCallgraph(const QCString &);
static bool handleHideCallgraph(const QCString &);
static bool handleCallergraph(const QCString &);
static bool handleHideCallergraph(const QCString &);
static bool handleInternal(const QCString &);
static bool handleLineBr(const QCString &);
static bool handleStatic(const QCString &);
static bool handlePure(const QCString &);
static bool handlePrivate(const QCString &);
static bool handlePrivateSection(const QCString &);
static bool handleProtected(const QCString &);
static bool handleProtectedSection(const QCString &);
static bool handlePublic(const QCString &s);
static bool handlePublicSection(const QCString &s);
static bool handleToc(const QCString &s);
static bool handleInherit(const QCString &);
static bool handleExtends(const QCString &);
static bool handleCopyDoc(const QCString &);
static bool handleCopyBrief(const QCString &);
static bool handleCopyDetails(const QCString &);
static bool handleParBlock(const QCString &);
static bool handleEndParBlock(const QCString &);
static bool handleParam(const QCString &);
static bool handleRetval(const QCString &);

typedef bool (*DocCmdFunc)(const QCString &name);

struct DocCmdMap
{
  const char *cmdName;
  DocCmdFunc handler;
  bool endsBrief;
};

// map of command to handler function
static DocCmdMap docCmdMap[] =
{
  // command name      handler function         ends brief description
  { "brief",           &handleBrief,            FALSE },
  { "short",           &handleBrief,            FALSE },
  { "fn",              &handleFn,               FALSE },
  { "var",             &handleFn,               FALSE },
  { "typedef",         &handleFn,               FALSE },
  { "property",        &handleFn,               FALSE },
  { "def",             &handleDef,              FALSE },
  { "overload",        &handleOverload,         FALSE },
  { "enum",            &handleEnum,             FALSE },
  { "defgroup",        &handleDefGroup,         FALSE },
  { "addtogroup",      &handleAddToGroup,       FALSE },
  { "weakgroup",       &handleWeakGroup,        FALSE },
  { "namespace",       &handleNamespace,        FALSE },
  { "package",         &handlePackage,          FALSE },
  { "class",           &handleClass,            FALSE },
  { "headerfile",      &handleHeaderFile,       FALSE },
  { "protocol",        &handleProtocol,         FALSE },
  { "category",        &handleCategory,         FALSE },
  { "union",           &handleUnion,            FALSE },
  { "struct",          &handleStruct,           FALSE },
  { "interface",       &handleInterface,        FALSE },
  { "idlexcept",       &handleIdlException,     FALSE },
  { "page",            &handlePage,             FALSE },
  { "mainpage",        &handleMainpage,         FALSE },
  { "file",            &handleFile,             FALSE },
  { "dir",             &handleDir,              FALSE },
  { "example",         &handleExample,          FALSE },
  { "details",         &handleDetails,          TRUE  },
  { "name",            &handleName,             FALSE },
  { "todo",            &handleTodo,             FALSE }, // end brief will be done differently
  { "test",            &handleTest,             FALSE }, // end brief will be done differently
  { "bug",             &handleBug,              FALSE }, // end brief will be done differently
  { "deprecated",      &handleDeprecated,       FALSE }, // end brief will be done differently
  { "xrefitem",        &handleXRefItem,         FALSE }, // end brief will be done differently
  { "related",         &handleRelated,          TRUE  },
  { "relates",         &handleRelated,          TRUE  },
  { "relatedalso",     &handleRelatedAlso,      TRUE  },
  { "relatesalso",     &handleRelatedAlso,      TRUE  },
  { "parblock",        &handleParBlock,         TRUE  },
  { "endparblock",     &handleEndParBlock,      TRUE  },
  { "refitem",         &handleRefItem,          TRUE  },
  { "cite",            &handleCite,             FALSE },
  { "subpage",         &handleSubpage,          TRUE  },
  { "section",         &handleSection,          TRUE  },
  { "subsection",      &handleSection,          TRUE  },
  { "subsubsection",   &handleSection,          TRUE  },
  { "paragraph",       &handleSection,          TRUE  },
  { "anchor",          &handleAnchor,           TRUE  },
  { "verbatim",        &handleFormatBlock,      TRUE  },
  { "latexonly",       &handleFormatBlock,      FALSE },
  { "htmlonly",        &handleFormatBlock,      FALSE },
  { "xmlonly",         &handleFormatBlock,      FALSE },
  { "docbookonly",     &handleFormatBlock,      FALSE },
  { "rtfonly",         &handleFormatBlock,      FALSE },
  { "manonly",         &handleFormatBlock,      FALSE },
  { "dot",             &handleFormatBlock,      TRUE  },
  { "msc",             &handleFormatBlock,      TRUE  },
  { "startuml",        &handleFormatBlock,      TRUE  },
  { "code",            &handleFormatBlock,      TRUE  },
  { "addindex",        &handleAddIndex,         FALSE },
  { "if",              &handleIf,               FALSE },
  { "ifnot",           &handleIfNot,            FALSE },
  { "elseif",          &handleElseIf,           FALSE },
  { "else",            &handleElse,             FALSE },
  { "endif",           &handleEndIf,            FALSE },
  { "ingroup",         &handleIngroup,          FALSE },
  { "nosubgrouping",   &handleNoSubGrouping,    FALSE },
  { "showinitializer", &handleShowInitializer,  FALSE },
  { "hideinitializer", &handleHideInitializer,  FALSE },
  { "callgraph",       &handleCallgraph,        FALSE },
  { "hidecallgraph",   &handleHideCallgraph,    FALSE },
  { "callergraph",     &handleCallergraph,      FALSE },
  { "hidecallergraph", &handleHideCallergraph,  FALSE },
  { "internal",        &handleInternal,         TRUE  },
  { "_linebr",         &handleLineBr,           FALSE },
  { "static",          &handleStatic,           FALSE },
  { "pure",            &handlePure,             FALSE },
  { "private",         &handlePrivate,          FALSE },
  { "privatesection",  &handlePrivateSection,   FALSE },
  { "protected",       &handleProtected,        FALSE },
  { "protectedsection",&handleProtectedSection, FALSE },
  { "public",          &handlePublic,           FALSE },
  { "publicsection",   &handlePublicSection,    FALSE },
  { "tableofcontents", &handleToc,              FALSE },
  { "inherit",         &handleInherit,          TRUE  },
  { "extends",         &handleExtends,          TRUE  },
  { "implements",      &handleExtends,          TRUE  },
  { "memberof",        &handleMemberOf,         TRUE  },
  { "arg",             0,                       TRUE  },
  { "attention",       0,                       TRUE  },
  { "author",          0,                       TRUE  },
  { "authors",         0,                       TRUE  },
  { "copydoc",         &handleCopyDoc,          TRUE  },
  { "copybrief",       &handleCopyBrief,        FALSE },
  { "copydetails",     &handleCopyDetails,      TRUE  },
  { "copyright",       0,                       TRUE  },
  { "date",            0,                       TRUE  },
  { "dotfile",         0,                       TRUE  },
  { "htmlinclude",     0,                       FALSE },
  { "image",           0,                       TRUE  },
  { "include",         0,                       TRUE  },
  { "includelineno",   0,                       TRUE  },
  { "invariant",       0,                       TRUE  },
  { "latexinclude",    0,                       FALSE },
  { "li",              0,                       TRUE  },
  { "line",            0,                       TRUE  },
  { "note",            0,                       TRUE  },
  { "par",             0,                       TRUE  },
  { "param",           &handleParam,            TRUE  },
  { "tparam",          0,                       TRUE  },
  { "post",            0,                       TRUE  },
  { "pre",             0,                       TRUE  },
  { "remark",          0,                       TRUE  },
  { "remarks",         0,                       TRUE  },
  { "result",          0,                       TRUE  },
  { "return",          0,                       TRUE  },
  { "returns",         0,                       TRUE  },
  { "exception",       0,                       TRUE  },
  { "retval",          &handleRetval,           TRUE  },
  { "sa",              0,                       TRUE  },
  { "see",             0,                       TRUE  },
  { "since",           0,                       TRUE  },
  { "throw",           0,                       TRUE  },
  { "throws",          0,                       TRUE  },
  { "until",           0,                       TRUE  },
  { "verbinclude",     0,                       FALSE },
  { "version",         0,                       TRUE  },
  { "warning",         0,                       TRUE  },
  { 0, 0, FALSE }
};

/** @brief Command mapper.
 *
 *  Maps a command name (as found in a comment block) onto a
 *  specific handler function.
 */
class DocCmdMapper
{
  public:
    struct Cmd
    {
      DocCmdFunc func;
      bool endsBrief;
    };

    /** maps a command name to a handler function */
    static Cmd *map(const char *name)
    {
      return instance()->find(name);
    }

    /** release the singleton */
    static void freeInstance()
    {
      delete s_instance; s_instance=0;
    }

  private:
    static DocCmdMapper *instance()
    {
      if (s_instance==0) s_instance = new DocCmdMapper;
      return s_instance;
    }

    DocCmdMapper() : m_map(113)
    {
      m_map.setAutoDelete(TRUE);
      DocCmdMap *p = docCmdMap;
      while (p->cmdName)
      {
	if (m_map.find(p->cmdName)!=0)
	{
	  err("DocCmdMapper: command %s already added\n",p->cmdName);
	  exit(1);
	}
	Cmd *cmd = new Cmd;
	cmd->func = p->handler;
	cmd->endsBrief = p->endsBrief;
	m_map.insert(p->cmdName,cmd);
	p++;
      }
    }

    Cmd *find(const char *name)
    {
      return m_map.find(name);
    }
    QDict<Cmd> m_map;
    static DocCmdMapper *s_instance;
};

DocCmdMapper *DocCmdMapper::s_instance=0;
  
bool inInternalDocs = FALSE;
  
#define YY_NEVER_INTERACTIVE 1

enum XRefKind
{
  XRef_Item,
  XRef_Todo,
  XRef_Test,
  XRef_Bug,
  XRef_Deprecated,
  XRef_None
};

enum OutputContext
{
  OutputDoc,
  OutputBrief,
  OutputXRef,
  OutputInbody
};

enum GuardType
{
  Guard_If,
  Guard_IfNot,
  Guard_Skip
};

class GuardedSection
{
  public:
    GuardedSection(bool enabled,bool parentVisible) 
      : m_enabled(enabled),m_parentVisible(parentVisible) {}
    bool isEnabled() const { return m_enabled; }
    bool parentVisible() const { return m_parentVisible; }
  
  private:
    bool m_enabled;
    bool m_parentVisible;
};

void openGroup(Entry *e,const char *file,int line);
void closeGroup(Entry *e,const char *file,int line,bool foundInline=FALSE);
void initGroupInfo(Entry *e);
static void groupAddDocs(Entry *e);

/* -----------------------------------------------------------------
 *
 *	statics
 */

static ParserInterface *langParser;          // the language parser that is calling us
static QCString         inputString;         // input string
static int		inputPosition;       // read pointer
static QCString		yyFileName;          // file name that is read from
static int		yyLineNr;            // line number in the input
static bool             inBody;              // was the comment found inside the body of a function?
static OutputContext    inContext;           // are we inside the brief, details or xref part
static bool             briefEndsAtDot;      // does the brief description stop at a dot?
static QCString         formulaText;         // Running text of a formula
static QCString         formulaEnv;          // environment name
static int              formulaNewLines;     // amount of new lines in the formula
static QCString        *pOutputString;       // pointer to string to which the output is appended.
static QCString         outputXRef;          // temp argument of todo/test/../xrefitem commands
static QCString         blockName;           // preformatted block name (e.g. verbatim, latexonly,...)
static XRefKind         xrefKind;            // kind of cross-reference command
static XRefKind         newXRefKind;         // 
static GuardType        guardType;           // kind of guard for conditional section
static bool             enabledSectionFound;
static QCString         functionProto;       // function prototype
static QStack<GuardedSection> guards;        // tracks nested conditional sections (if,ifnot,..)
static Entry*		current      = 0 ;   // working entry
//static Entry*		current_root = 0 ;   // parent of working entry


//static Entry*		previous     = 0 ;   // TODO: remove need for this
static bool             needNewEntry;

static QCString         g_sectionLabel;
static QCString		g_sectionTitle;
static int              g_sectionLevel;
static QCString         xrefItemKey;
static QCString         newXRefItemKey;
static QCString         xrefItemTitle;
static QCString         xrefListTitle;
static Protection	protection;

static bool             xrefAppendFlag;
static bool             inGroupParamFound;
static int              braceCount;
static bool             insidePre;
static bool             parseMore;
static int              g_condCount;

static int              g_commentCount;
static QCString         g_spaceBeforeCmd;
static QCString         g_spaceBeforeIf;
static QCString         g_copyDocArg;

static QCString         g_guardExpr;
static int              g_roundCount;

static bool             g_insideParBlock;

//-----------------------------------------------------------------------------

static QStack<Grouping> g_autoGroupStack;
static int              g_memberGroupId = DOX_NOGROUP;
static QCString         g_memberGroupHeader;
static QCString         g_memberGroupDocs;
static QCString         g_memberGroupRelates;
static QCString         g_compoundName;

//-----------------------------------------------------------------------------

static void initParser()
{
  g_sectionLabel.resize(0);
  g_sectionTitle.resize(0);
  g_memberGroupHeader.resize(0);
  g_insideParBlock = FALSE;
}

//-----------------------------------------------------------------------------

static bool getDocSectionName(int s)
{
  switch(s)
  {
    case Entry::CLASSDOC_SEC:
    case Entry::STRUCTDOC_SEC:
    case Entry::UNIONDOC_SEC:
    case Entry::EXCEPTIONDOC_SEC:
    case Entry::NAMESPACEDOC_SEC:
    case Entry::PROTOCOLDOC_SEC:
    case Entry::CATEGORYDOC_SEC:
    case Entry::ENUMDOC_SEC:
    case Entry::PAGEDOC_SEC:
    case Entry::VARIABLEDOC_SEC:
    case Entry::MEMBERDOC_SEC:
    case Entry::OVERLOADDOC_SEC:
    case Entry::FILEDOC_SEC:
    case Entry::DEFINEDOC_SEC:
    case Entry::GROUPDOC_SEC:
    case Entry::MAINPAGEDOC_SEC:
    case Entry::PACKAGEDOC_SEC:
    case Entry::DIRDOC_SEC:
    case Entry::EXAMPLE_SEC:
    case Entry::MEMBERGRP_SEC:
      return TRUE;
    default: 
      return FALSE;
  }
}

//-----------------------------------------------------------------------------

static bool makeStructuralIndicator(Entry::Sections s)
{
  //printf("current->section=%x\n",current->section);
  if (getDocSectionName(current->section))
  {
    return TRUE;
  }
  else
  {
    needNewEntry = TRUE;
    current->section = s;
    current->fileName = yyFileName;
    current->startLine = yyLineNr;
    return FALSE;
  }
}

static void lineCount()
{
  for( const char* c = commentscanYYtext ; *c ; ++c )
    yyLineNr += (*c == '\n') ;
}


static QCString stripQuotes(const char *s)
{
  QCString name;
  if (s==0 || *s==0) return name;
  name=s;
  if (name.at(0)=='"' && name.at(name.length()-1)=='"')
  {
    name=name.mid(1,name.length()-2);
  }
  return name;
}

//-----------------------------------------------------------------

static void addXRefItem(const char *listName,const char *itemTitle,
                        const char *listTitle,bool append)
{
  Entry *docEntry = current; // inBody && previous ? previous : current;
  if (listName==0) return;
  //printf("addXRefItem(%s,%s,%s,%d)\n",listName,itemTitle,listTitle,append);

  ListItemInfo *lii=0;
  RefList *refList = Doxygen::xrefLists->find(listName);
  if (refList==0) // new list
  {
    refList = new RefList(listName,listTitle,itemTitle);
    Doxygen::xrefLists->insert(listName,refList);
    //printf("new list!\n");
  }
  if (docEntry->sli)
  {
    QListIterator<ListItemInfo> slii(*docEntry->sli);
    for (slii.toFirst();(lii=slii.current());++slii)
    {
      if (qstrcmp(lii->type,listName)==0) 
      {
        //printf("found %s lii->type=%s\n",listName,lii->type);
        break;
      }
    }
  }
  if (lii && append) // already found item of same type just before this one
  {
    //printf("listName=%s item id = %d existing\n",listName,lii->itemId);
    RefItem *item = refList->getRefItem(lii->itemId);
    ASSERT(item!=0);
    item->text += " <p>";
    if (Doxygen::markdownSupport)
    {
      item->text += processMarkdown(yyFileName,yyLineNr,current,outputXRef);
    }
    else
    {
      item->text += outputXRef;
    }
    //printf("%s: text +=%s\n",listName,item->text.data());
  }
  else // new item
  {
    int itemId  = refList->addRefItem();
    //printf("listName=%s item id = %d new current=%p\n",listName,itemId,current);

    // if we have already an item from the same list type (e.g. a second @todo)
    // in the same Entry (i.e. lii!=0) then we reuse its link anchor.
    char anchorLabel[1024];
    //sprintf(anchorLabel,"_%s%06d",listName,lii ? lii->itemId : itemId);
    sprintf(anchorLabel,"_%s%06d",listName,itemId);
    RefItem *item = refList->getRefItem(itemId);
    ASSERT(item!=0);
    if (Doxygen::markdownSupport)
    {
      item->text = processMarkdown(yyFileName,yyLineNr,current,outputXRef);
    }
    else
    {
      item->text = outputXRef;
    }
    item->listAnchor = anchorLabel;
    docEntry->addSpecialListItem(listName,itemId);
    QCString cmdString;
    cmdString.sprintf("\\xrefitem %s %d.",listName,itemId);
    if (inBody)
    {
      docEntry->inbodyDocs += cmdString;
    }
    else
    {
      docEntry->doc += cmdString;
    }
    SectionInfo *si = Doxygen::sectionDict->find(anchorLabel);
    if (si)
    {
      if (si->lineNr != -1)
      {
        warn(listName,yyLineNr,"multiple use of section label '%s', (first occurrence: %s, line %d)",anchorLabel,si->fileName.data(),si->lineNr);
      }
      else
      {
        warn(listName,yyLineNr,"multiple use of section label '%s', (first occurrence: %s)",anchorLabel,si->fileName.data());
      }
    }
    else
    {
      si=new SectionInfo(listName,yyLineNr,anchorLabel,
                         g_sectionTitle,SectionInfo::Anchor,
                         g_sectionLevel);
      Doxygen::sectionDict->append(anchorLabel,si);
      docEntry->anchors->append(si);
    }
  }
  outputXRef.resize(0);
}

//-----------------------------------------------------------------------------

// Adds a formula text to the list/dictionary of formulas if it was
// not already added. Returns the label of the formula.
static QCString addFormula()
{
  QCString formLabel;
  QCString fText=formulaText.simplifyWhiteSpace();
  Formula *f=0;
  if ((f=Doxygen::formulaDict->find(fText))==0)
  {
    f = new Formula(fText);
    Doxygen::formulaList->append(f);
    Doxygen::formulaDict->insert(fText,f);
    formLabel.sprintf("\\form#%d",f->getId());
    Doxygen::formulaNameDict->insert(formLabel,f);
  }
  else
  {
    formLabel.sprintf("\\form#%d",f->getId());
  }
  int i;
  for (i=0;i<formulaNewLines;i++) formLabel+="@_fakenl"; // add fake newlines to
                                                         // keep the warnings 
                                                         // correctly aligned.
  return formLabel;
}

//-----------------------------------------------------------------------------

static void checkFormula();
//-----------------------------------------------------------------------------

static SectionInfo::SectionType sectionLevelToType(int level)
{
  if (level>=0 && level<5) return (SectionInfo::SectionType)level;
  return SectionInfo::Anchor;
}

static void addSection()
{
  SectionInfo *si = Doxygen::sectionDict->find(g_sectionLabel);
  if (si)
  {
    if (si->lineNr != -1)
    {
      warn(yyFileName,yyLineNr,"multiple use of section label '%s' while adding section, (first occurrence: %s, line %d)",g_sectionLabel.data(),si->fileName.data(),si->lineNr);
    }
    else
    {
      warn(yyFileName,yyLineNr,"multiple use of section label '%s' while adding section, (first occurrence: %s)",g_sectionLabel.data(),si->fileName.data());
    }
  }
  else
  {
    // create a new section element
    g_sectionTitle+=commentscanYYtext;
    g_sectionTitle=g_sectionTitle.stripWhiteSpace();
    si = new SectionInfo(yyFileName,yyLineNr,g_sectionLabel,
                          g_sectionTitle,sectionLevelToType(g_sectionLevel),g_sectionLevel);

    // add section to this entry
    current->anchors->append(si);

    // add section to the global dictionary
    Doxygen::sectionDict->append(g_sectionLabel,si);
  }
}

//-----------------------------------------------------------------------------

static void addCite()
{
  Doxygen::citeDict->insert(commentscanYYtext);
}

//-----------------------------------------------------------------------------

// strip trailing whitespace (excluding newlines) from string s
static void stripTrailingWhiteSpace(QCString &s)
{
  uint len = s.length();
  int i = (int)len-1;
  char c;
  while (i>=0 && ((c = s.at(i))==' ' || c=='\t' || c=='\r')) i--;
  if (i!=(int)len-1) 
  {
    s.resize(i+2); // string up to and including char at pos i and \0 terminator
  }
}

// selects the output to write to
static inline void setOutput(OutputContext ctx)
{
  bool xrefAppendToPrev = xrefAppendFlag;
  // determine append flag for the next item (i.e. the end of this item)
  xrefAppendFlag = !inBody &&
                   inContext==OutputXRef && ctx==OutputXRef && // two consecutive xref items
                   newXRefKind==xrefKind &&                    // of the same kind
                   (xrefKind!=XRef_Item || 
		    newXRefItemKey==xrefItemKey);              // with the same key if \xrefitem
  //printf("%d && %d && %d && (%d || %d)\n",
  //                 inContext==OutputXRef,
  //                 ctx==OutputXRef,
  //                 newXRefKind==xrefKind,
  //                 xrefKind!=XRef_Item,
  //	  	     newXRefItemKey==xrefItemKey);
      
  //printf("refKind=%d newXRefKind=%d xrefAppendToPrev=%d xrefAppendFlag=%d\n",
  //   	  xrefKind,newXRefKind,xrefAppendToPrev,xrefAppendFlag);

  //printf("setOutput(inContext=%d ctx=%d)\n",inContext,ctx);
  if (inContext==OutputXRef) // end of XRef section => add the item 
  {
    // See if we can append this new xref item to the previous one.
    // We know this at the start of the next item of the same
    // type and need to remember this until the end of that item.
    switch(xrefKind)
    {
      case XRef_Todo:
	addXRefItem("todo",
	            theTranslator->trTodo(),
	            theTranslator->trTodoList(),
		    xrefAppendToPrev
		   );
	break;
      case XRef_Test:
	addXRefItem("test",
	            theTranslator->trTest(),
		    theTranslator->trTestList(),
		    xrefAppendToPrev
		   );
	break;
      case XRef_Bug:
	addXRefItem("bug",
	            theTranslator->trBug(),
		    theTranslator->trBugList(),
		    xrefAppendToPrev
		   );
	break;
      case XRef_Deprecated:
	addXRefItem("deprecated",
	            theTranslator->trDeprecated(),
		    theTranslator->trDeprecatedList(),
		    xrefAppendToPrev
		   );
	break;
      case XRef_Item:  // user defined list
	addXRefItem(xrefItemKey,
	            xrefItemTitle,
		    xrefListTitle,
		    xrefAppendToPrev
		   );
	break;
      case XRef_None:
	ASSERT(0);
	break;
    }
  }
  xrefItemKey = newXRefItemKey;

  int oldContext = inContext;
  inContext = ctx;
  if (inContext!=OutputXRef && inBody) inContext=OutputInbody;
  switch(inContext)
  {
    case OutputDoc:
      if (oldContext!=inContext)
      {
        stripTrailingWhiteSpace(current->doc);
        if (current->docFile.isEmpty())
        {
          current->docFile = yyFileName;
          current->docLine = yyLineNr;
        }
      }
      pOutputString = &current->doc;
      break;
    case OutputBrief:
      if (oldContext!=inContext)
      {
	if (current->briefFile.isEmpty())
	{
	  current->briefFile = yyFileName;
	  current->briefLine = yyLineNr;
	}
      }
      if (current->brief.stripWhiteSpace().isEmpty()) // we only want one brief
	                                              // description even if multiple
	                                              // are given...
      {
        pOutputString = &current->brief;
      }
      else
      {
        pOutputString = &current->doc;
	inContext = OutputDoc; // need to switch to detailed docs, see bug 631380
      }
      break;
    case OutputXRef:
      pOutputString = &outputXRef;
      // first item found, so can't append to previous
      //xrefAppendFlag = FALSE;
      break;
    case OutputInbody:
      pOutputString = &current->inbodyDocs;
      break;
  }
}


static void addAnchor(const char *anchor)
{
  SectionInfo *si = Doxygen::sectionDict->find(anchor);
  if (si)
  {
    if (si->lineNr != -1)
    {
      warn(yyFileName,yyLineNr,"multiple use of section label '%s' while adding anchor, (first occurrence: %s, line %d)",anchor,si->fileName.data(),si->lineNr);
    }
    else
    {
      warn(yyFileName,yyLineNr,"multiple use of section label '%s' while adding anchor, (first occurrence: %s)",anchor,si->fileName.data());
    }
  }
  else
  {
    si = new SectionInfo(yyFileName,yyLineNr,anchor,0,SectionInfo::Anchor,0);
    Doxygen::sectionDict->append(anchor,si);
    current->anchors->append(si);
  }
}

// add a string to the output
static inline void addOutput(const char *s)
{
  //printf("addOutput(%s)\n",s);
  *pOutputString+=s;
}

// add a character to the output
static inline void addOutput(char c)
{
  *pOutputString+=c;
}

static void endBrief(bool addToOutput=TRUE)
{
  if (!current->brief.stripWhiteSpace().isEmpty())
  { // only go to the detailed description if we have
    // found some brief description and not just whitespace
    briefEndsAtDot=FALSE;
    setOutput(OutputDoc);
    if (addToOutput) addOutput(commentscanYYtext);
  }
}

static void handleGuard(const QCString &expr);
/* ----------------------------------------------------------------- */
#undef	YY_INPUT
#define	YY_INPUT(buf,result,max_size) result=yyread(buf,max_size);

static int prevPosition=0;

static int yyread(char *buf,int max_size)
{
    prevPosition=inputPosition;
    int c=0;
    while( c < max_size && inputString[inputPosition] )
    {
	*buf = inputString[inputPosition++] ;
	//printf("%d (%c)\n",*buf,*buf);
	c++; buf++;
    }
    return c;
}

/* start command character */
/* comment parsing states. */










































#line 4122 "/home/INTRANET/aitoumel/myfiles/NeuronProject/Week1/doxygen-master/build/generated_src/commentscan.cpp"

#define INITIAL 0
#define Comment 1
#define PageDocArg1 2
#define PageDocArg2 3
#define RelatesParam1 4
#define ClassDocArg1 5
#define ClassDocArg2 6
#define ClassDocArg3 7
#define CategoryDocArg1 8
#define XRefItemParam1 9
#define XRefItemParam2 10
#define XRefItemParam3 11
#define FileDocArg1 12
#define ParamArg1 13
#define EnumDocArg1 14
#define NameSpaceDocArg1 15
#define PackageDocArg1 16
#define GroupDocArg1 17
#define GroupDocArg2 18
#define SectionLabel 19
#define SectionTitle 20
#define SubpageLabel 21
#define SubpageTitle 22
#define FormatBlock 23
#define LineParam 24
#define GuardParam 25
#define GuardParamEnd 26
#define SkipGuardedSection 27
#define SkipInternal 28
#define NameParam 29
#define InGroupParam 30
#define FnParam 31
#define OverloadParam 32
#define InheritParam 33
#define ExtendsParam 34
#define ReadFormulaShort 35
#define ReadFormulaLong 36
#define AnchorLabel 37
#define HtmlComment 38
#define SkipLang 39
#define CiteLabel 40
#define CopyDoc 41
#define GuardExpr 42

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int commentscanYYlex_destroy (void );

int commentscanYYget_debug (void );

void commentscanYYset_debug (int debug_flag  );

YY_EXTRA_TYPE commentscanYYget_extra (void );

void commentscanYYset_extra (YY_EXTRA_TYPE user_defined  );

FILE *commentscanYYget_in (void );

void commentscanYYset_in  (FILE * in_str  );

FILE *commentscanYYget_out (void );

void commentscanYYset_out  (FILE * out_str  );

int commentscanYYget_leng (void );

char *commentscanYYget_text (void );

int commentscanYYget_lineno (void );

void commentscanYYset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int commentscanYYwrap (void );
#else
extern int commentscanYYwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( commentscanYYtext, commentscanYYleng, 1, commentscanYYout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( commentscanYYin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( commentscanYYin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, commentscanYYin))==0 && ferror(commentscanYYin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(commentscanYYin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int commentscanYYlex (void);

#define YY_DECL int commentscanYYlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after commentscanYYtext and commentscanYYleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( commentscanYYleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(commentscanYYtext[commentscanYYleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 1007 "commentscan.l"


  /* What can happen in while parsing a comment block:
   *   commands (e.g. @page, or \page)
   *   escaped commands (e.g. @@page or \\page).
   *   formulas (e.g. \f$ \f[ \f{..)
   *   directories (e.g. \doxygen\src\)
   *   autolist end. (e.g. a dot on an otherwise empty line)
   *   newlines.
   *   end of brief description due to blank line.
   *   end of brief description due to some command (@command, or <command>).
   *   words and whitespace and other characters (#,?!, etc).
   *   grouping commands (e.g. @{ and @})
   *   language switch (e.g. \~english or \~).
   *   mail address (e.g. dimitri@stack.nl).
   *   quoted text, such as "foo@bar"
   *   XML commands, <summary></summary><remarks></remarks>
   */

#line 4374 "/home/INTRANET/aitoumel/myfiles/NeuronProject/Week1/doxygen-master/build/generated_src/commentscan.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)commentscanYYalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in commentscanYYlex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! commentscanYYin )
			commentscanYYin = stdin;

		if ( ! commentscanYYout )
			commentscanYYout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			commentscanYYensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				commentscanYY_create_buffer(commentscanYYin,YY_BUF_SIZE );
		}

		commentscanYY_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of commentscanYYtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1148 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_current_state != 1147 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 1026 "commentscan.l"
{ // escaped command
  					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 1029 "commentscan.l"
{ // escaped command
  					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 1032 "commentscan.l"
{ // mail address
  					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 1035 "commentscan.l"
{ // quoted text
                                          addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 1038 "commentscan.l"
{ // directory (or chain of commands!)
  					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 1041 "commentscan.l"
{ // HTML command that ends a brief description
					  setOutput(OutputDoc);
					  // continue with the same input
                                          REJECT;
					}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 1046 "commentscan.l"
{ // HTML command that ends a brief description
					  if (current->lang==SrcLangExt_CSharp)
                                          {
                                            setOutput(OutputDoc);
                                          }
					  // continue with the same input
                                          REJECT;
					}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 1054 "commentscan.l"
{ // start of a .NET XML style brief description
					  setOutput(OutputBrief);
                                          addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 1058 "commentscan.l"
{ // start of a .NET XML style detailed description
					  setOutput(OutputDoc);
                                          addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 1062 "commentscan.l"
{ // start of a .NET XML style detailed description
                                          addOutput(commentscanYYtext);
					  setOutput(OutputDoc);
  					}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 1066 "commentscan.l"
{ // end of a brief or detailed description
                                          addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 1069 "commentscan.l"
{
                                          QCString tag=commentscanYYtext;
                                          int s=tag.find("id=");
                                          if (s!=-1) // command has id attribute
                                          {
                                            char c=tag[s+3];
                                            if (c=='\'' || c=='"') // valid start
                                            {
                                              int e=tag.find(c,s+4);
                                              if (e!=-1) // found matching end
                                              {
                                                QCString id=tag.mid(s+4,e-s-4); // extract id
                                                addAnchor(id);
                                              }
                                            }
                                          }
                                          addOutput(commentscanYYtext);
                                        }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 1087 "commentscan.l"
{
                                          insidePre=TRUE;
                                          addOutput(commentscanYYtext);
                                        }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 1091 "commentscan.l"
{
                                          insidePre=FALSE;
                                          addOutput(commentscanYYtext);
                                        }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 1095 "commentscan.l"
{ // RCS tag which end a brief description
  					  setOutput(OutputDoc);
					  REJECT;
  					}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 1099 "commentscan.l"
{ 
  					  BEGIN(HtmlComment);
					}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 1102 "commentscan.l"
{
                                          addOutput("\\endinternal "); 
                                          if (!inInternalDocs)
  					    warn(yyFileName,yyLineNr,
                                               "found \\endinternal without matching \\internal"
                                              );
                                          inInternalDocs = FALSE;
  					}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 1110 "commentscan.l"
{ // potentially interesting command
                                          // the {B}* in the front was added for bug620924
  					  QCString cmdName = QCString(commentscanYYtext).stripWhiteSpace().data()+1;
					  DocCmdMapper::Cmd *cmdPtr = DocCmdMapper::map(cmdName);
					  if (cmdPtr) // special action is required
					  {
                                            int i=0;
                                            while (commentscanYYtext[i]==' ' || commentscanYYtext[i]=='\t') i++;
					    g_spaceBeforeCmd = QCString(commentscanYYtext).left(i);
					    if (cmdPtr->endsBrief && !(inContext==OutputXRef && cmdName=="parblock"))
					    {
					      briefEndsAtDot=FALSE;
					      // this command forces the end of brief description
					      setOutput(OutputDoc);
					    }
                                            //if (i>0) addOutput(QCString(commentscanYYtext).left(i)); // removed for bug 689341
					    if (cmdPtr->func && cmdPtr->func(cmdName))
					    {
					      // implicit split of the comment block into two
					      // entries. Restart the next block at the start
					      // of this command.
					      parseMore=TRUE;

					      // yuk, this is probably not very portable across lex implementations, 
					      // but we need to know the position in the input buffer where this 
					      // rule matched.
					      // for flex 2.5.33+ we should use YY_CURRENT_BUFFER_LVALUE
#if YY_FLEX_MAJOR_VERSION>=2 && (YY_FLEX_MINOR_VERSION>5 || (YY_FLEX_MINOR_VERSION==5 && YY_FLEX_SUBMINOR_VERSION>=33))
					      inputPosition=prevPosition + (int)(yy_bp - YY_CURRENT_BUFFER_LVALUE->yy_ch_buf);
#else
					      inputPosition=prevPosition + (int)(yy_bp - yy_current_buffer->yy_ch_buf);
#endif
					      yyterminate();
					    }
					    else if (cmdPtr->func==0)
					    {
					      // command without handler, to be processed
					      // later by parsedoc.cpp
					      addOutput(commentscanYYtext);
					    }
					  }
					  else // command not relevant
					  {
					    addOutput(commentscanYYtext);
					  }
  					}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 1156 "commentscan.l"
{ // escaped formula command
  					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 1159 "commentscan.l"
{ // language switch command
                                          QCString langId = QString(commentscanYYtext).stripWhiteSpace().data()+2;
			       	          if (!langId.isEmpty() &&
					      qstricmp(Config_getEnum(OUTPUT_LANGUAGE),langId)!=0)
				          { // enable language specific section
				            BEGIN(SkipLang);
				          }
  					}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 1167 "commentscan.l"
{ // start of a formula with custom environment
					  formulaText="\\begin";
					  formulaEnv=QString(commentscanYYtext).stripWhiteSpace().data()+2;
					  if (formulaEnv.at(formulaEnv.length()-1)=='{')
					  {
					    // remove trailing open brace
					    formulaEnv=formulaEnv.left(formulaEnv.length()-1);
					  }
					  formulaText+=formulaEnv;
					  formulaNewLines=0;
					  BEGIN(ReadFormulaLong);
  					}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 1179 "commentscan.l"
{ // start of a inline formula
					  formulaText="$";
					  formulaNewLines=0;
					  BEGIN(ReadFormulaShort);
  					}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 1184 "commentscan.l"
{ // start of a block formula
					  formulaText="\\[";
					  formulaNewLines=0;
					  BEGIN(ReadFormulaLong);
  					}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 1189 "commentscan.l"
{ // begin of a group
                                          //langParser->handleGroupStartCommand(g_memberGroupHeader);
                                          openGroup(current,yyFileName,yyLineNr);
                                        }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 1193 "commentscan.l"
{ // end of a group
                                          //langParser->handleGroupEndCommand();
                                          closeGroup(current,yyFileName,yyLineNr,TRUE);
                                          g_memberGroupHeader.resize(0);
					  parseMore=TRUE;
                                          needNewEntry = TRUE;
#if YY_FLEX_MAJOR_VERSION>=2 && (YY_FLEX_MINOR_VERSION>5 || (YY_FLEX_MINOR_VERSION==5 && YY_FLEX_SUBMINOR_VERSION>=33))
				          inputPosition=prevPosition + (int)(yy_bp - YY_CURRENT_BUFFER_LVALUE->yy_ch_buf) + strlen(commentscanYYtext);
#else
				          inputPosition=prevPosition + (int)(yy_bp - yy_current_buffer->yy_ch_buf) + strlen(commentscanYYtext);
#endif
					  yyterminate();
                                        }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 1206 "commentscan.l"
{ // escaped character
  					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 1209 "commentscan.l"
{ // normal word
					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 28:
/* rule 28 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 1212 "commentscan.l"
{ // explicit end autolist: e.g "  ."
  				          addOutput(commentscanYYtext); 
					}
	YY_BREAK
case 29:
#line 1216 "commentscan.l"
case 30:
YY_RULE_SETUP
#line 1216 "commentscan.l"
{ // start of autolist
                                          if (!Doxygen::markdownSupport)
                                          {
                                            REJECT;
                                          }
                                          else
                                          {
                                            if (inContext!=OutputXRef) 
                                            {
                                              briefEndsAtDot=FALSE;
                                              setOutput(OutputDoc);
                                            }
                                            addOutput(commentscanYYtext); 
                                          }
  					}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 1231 "commentscan.l"
{ // start of autolist
					  if (inContext!=OutputXRef) 
					  {
					    briefEndsAtDot=FALSE;
					    setOutput(OutputDoc);
					  }
  				          addOutput(commentscanYYtext); 
  					}
	YY_BREAK
case 32:
/* rule 32 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 1239 "commentscan.l"
{ // horizontal line (dashed)
  				          addOutput(commentscanYYtext); 
                                        }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 1242 "commentscan.l"
{ // escaped mdash
                                          addOutput(commentscanYYtext);
                                        }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 1245 "commentscan.l"
{ // escaped mdash
                                          addOutput(commentscanYYtext);
                                        }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 1248 "commentscan.l"
{ // mdash
                                          addOutput(insidePre || Doxygen::markdownSupport ? commentscanYYtext : "&mdash;");
                                        }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 1251 "commentscan.l"
{ // ndash
                                          addOutput(insidePre || Doxygen::markdownSupport ? commentscanYYtext : "&ndash;");
                                        }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 1254 "commentscan.l"
{ // numbered item
                                          addOutput(commentscanYYtext);
                                        }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 1257 "commentscan.l"
{ // . at start or in the middle of a word, or ellipsis
  					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 1260 "commentscan.l"
{ // . with escaped space.
  					  addOutput(commentscanYYtext[0]);
  					  addOutput(commentscanYYtext[2]);
  					}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 1264 "commentscan.l"
{ // . with comma such as "e.g.," 
  					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 1267 "commentscan.l"
{ // ellipsis with escaped space.
  					  addOutput("... ");
  					}
	YY_BREAK
case 42:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 1270 "commentscan.l"
{ // internal ellipsis 
  					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 1273 "commentscan.l"
{ // at least one blank line (or blank line command)
					  if (inContext==OutputXRef)
					  {
					    // see bug 613024, we need to put the newlines after ending the XRef section.
					    if (!g_insideParBlock) setOutput(OutputDoc);
                                            int i;
                                            for (i=0;i<commentscanYYleng;)
                                            {
                                              if (commentscanYYtext[i]=='\n') addOutput('\n'),i++;
                                              else if (strcmp(commentscanYYtext+i,"\\_linebr")==0) addOutput('\n'),i+=8;
                                              else i++;
                                            }
					  }
					  else if (inContext!=OutputBrief)
					  {
                                            int i;
                                            for (i=0;i<commentscanYYleng;)
                                            {
                                              if (commentscanYYtext[i]=='\n') addOutput('\n'),i++;
                                              else if (strcmp(commentscanYYtext+i,"\\_linebr")==0) addOutput('\n'),i+=8;
                                              else i++;
                                            }
					    setOutput(OutputDoc);
					  }
					  else // inContext==OutputBrief
					  { // only go to the detailed description if we have
					    // found some brief description and not just whitespace
					    endBrief(FALSE);
					  }
  					  lineCount();
  					}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 1304 "commentscan.l"
{ // potential end of a JavaDoc style comment
  					  addOutput(*commentscanYYtext);
  					  if (briefEndsAtDot)
					  {
					    setOutput(OutputDoc);
					    briefEndsAtDot=FALSE;
					  }
  					}
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 1312 "commentscan.l"
{ // newline
  					  addOutput(*commentscanYYtext);
  					  yyLineNr++;
  					}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 1316 "commentscan.l"
{ // catch-all for anything else
  					  addOutput(*commentscanYYtext);
  					}
	YY_BREAK
/* --------------   Rules for handling HTML comments ----------- */
case 47:
YY_RULE_SETUP
#line 1323 "commentscan.l"
{ BEGIN( Comment ); }
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 1324 "commentscan.l"
{ 
  					  if (*commentscanYYtext=='\n') yyLineNr++;
  					}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 1327 "commentscan.l"
{ // ignore unimportant characters
  					}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 1329 "commentscan.l"
{ // ignore every else
  					}
	YY_BREAK
/* --------------   Rules for handling formulas ---------------- */
case 51:
YY_RULE_SETUP
#line 1334 "commentscan.l"
{ // end of inline formula
  					  formulaText+="$";
					  addOutput(" "+addFormula());
					  BEGIN(Comment);
  					}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 1339 "commentscan.l"
{ // end of block formula
					  formulaText+="\\]";
					  addOutput(" "+addFormula());
					  BEGIN(Comment);
  					}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 1344 "commentscan.l"
{ // end of custom env formula
					  formulaText+="\\end";
					  formulaText+=formulaEnv;
					  addOutput(" "+addFormula());
					  BEGIN(Comment);
  					}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 1350 "commentscan.l"
{ // any non-special character
                                          formulaText+=commentscanYYtext; 
 					} 
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 1353 "commentscan.l"
{ // new line
                                          formulaNewLines++;
                                          formulaText+=*commentscanYYtext; 
					  yyLineNr++; 
					}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 1358 "commentscan.l"
{ // any othe character
                                          formulaText+=*commentscanYYtext; 
					}
	YY_BREAK
/* ------------ handle argument of enum command --------------- */
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 1364 "commentscan.l"
{ // handle argument
  					  current->name = commentscanYYtext;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 1368 "commentscan.l"
{ // line continuation
  					  yyLineNr++;
					  addOutput('\n');
                                        }
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 1372 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
                                               "missing argument after \\enum."
                                              );
					  addOutput('\n');
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 1380 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* ------------ handle argument of namespace command --------------- */
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 1385 "commentscan.l"
{ // handle argument
  					  current->name = substitute(commentscanYYtext,".","::");
					  BEGIN( Comment );
  					}
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 1389 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 1393 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
                                               "missing argument after "
					       "\\namespace."
                                              );
					  addOutput('\n');
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 1402 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* ------------ handle argument of package command --------------- */
case 65:
YY_RULE_SETUP
#line 1407 "commentscan.l"
{ // handle argument
  					  current->name = commentscanYYtext;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 1411 "commentscan.l"
{ // line continuation 
                                          yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 1415 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
                                               "missing argument after "
					       "\\package."
                                              );
					  addOutput('\n');
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 1424 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* ------ handle argument of class/struct/union command --------------- */
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 1429 "commentscan.l"
{ 
  					  current->name = substitute(removeRedundantWhiteSpace(commentscanYYtext),".","::");
					  BEGIN( ClassDocArg2 );
                                        }
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 1433 "commentscan.l"
{ // first argument
  					  current->name = substitute(commentscanYYtext,".","::");
					  if (current->section==Entry::PROTOCOLDOC_SEC)
					  {
					    current->name+="-p";
					  }
					  // prepend outer scope name 
					  BEGIN( ClassDocArg2 );
					}
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
#line 1442 "commentscan.l"
{
  					  current->name = substitute(commentscanYYtext,".","::");
					  BEGIN( ClassDocArg2 );
   					}
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 1446 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 1450 "commentscan.l"
{
  					  warn(yyFileName,yyLineNr,
                                               "missing argument after "
					       "\\%s.",YY_START==ClassDocArg1?"class":"category"
                                              );
					  addOutput('\n');
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 1459 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 1462 "commentscan.l"
{ // second argument; include file
					  current->includeFile = commentscanYYtext;
					  BEGIN( ClassDocArg3 );
					}
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 1466 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 1470 "commentscan.l"
{ 
					  addOutput('\n');
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  BEGIN( Comment );
					}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 1475 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 1478 "commentscan.l"
{ // third argument; include file name
 					  current->includeName = commentscanYYtext;
					  BEGIN( Comment );
					}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 1482 "commentscan.l"
{ // line continuation
                                          yyLineNr++;
					  addOutput('\n');
                                        }
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 1486 "commentscan.l"
{ 
  					  if (*commentscanYYtext=='\n') yyLineNr++;
  					  BEGIN( Comment );
					}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 1490 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* --------- handle arguments of {def,add,weak}group commands --------- */
case 83:
YY_RULE_SETUP
#line 1495 "commentscan.l"
{ // group name
  					  current->name = commentscanYYtext;
					  //lastDefGroup.groupname = commentscanYYtext;
					  //lastDefGroup.pri = current->groupingPri();
  					  // the .html stuff is for Qt compatibility
					  if (current->name.right(5)==".html") 
					  {
					    current->name=current->name.left(current->name.length()-5);
					  }
					  current->type.resize(0);
					  BEGIN(GroupDocArg2);
  					}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 1507 "commentscan.l"
{ // line continuation
  					  yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 1511 "commentscan.l"
{ // missing argument!
  					  warn(yyFileName,yyLineNr,
                                               "missing group name after %s",
					       current->groupDocCmd()
                                              );
					  addOutput('\n');
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 1520 "commentscan.l"
{ // line continuation
  					  yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 1524 "commentscan.l"
{ // title (stored in type)
					  current->type += commentscanYYtext;
					  current->type = current->type.stripWhiteSpace();
  					}
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 1528 "commentscan.l"
{
                                          if ( current->groupDocType==Entry::GROUPDOC_NORMAL &&
                                               current->type.isEmpty() 
					     ) // defgroup requires second argument
					  {
  					    warn(yyFileName,yyLineNr,
                                                 "missing title after "
					         "\\defgroup %s", current->name.data()
                                                );
					  }
  					  if (*commentscanYYtext=='\n') yyLineNr++; 
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
/* --------- handle arguments of page/mainpage command ------------------- */
case 89:
YY_RULE_SETUP
#line 1545 "commentscan.l"
{ // first argument; page name
					  current->name = stripQuotes(commentscanYYtext);
					  BEGIN( PageDocArg2 ); 
					}
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
#line 1549 "commentscan.l"
{ yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 1552 "commentscan.l"
{
  					  warn(yyFileName,yyLineNr,
                                               "missing argument after "
					       "\\page."
                                              );
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 1561 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 1563 "commentscan.l"
{ // second argument; page title
  				          yyLineNr++;
					  current->args = commentscanYYtext;
					  addOutput('\n');
					  BEGIN( Comment );
					}
	YY_BREAK
/* --------- handle arguments of the param command ------------ */
case 94:
YY_RULE_SETUP
#line 1571 "commentscan.l"
{
                                          if (commentscanYYtext[0]=='_' && Config_getBool(MARKDOWN_SUPPORT))
                                          {
                                            addOutput('\\');
                                          }
                                          addOutput(commentscanYYtext);
                                        }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 1578 "commentscan.l"
{
                                          addOutput(" , ");
                                        }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 1581 "commentscan.l"
{
                                          if (commentscanYYtext[0]=='_' && Config_getBool(MARKDOWN_SUPPORT))
                                          {
                                            addOutput('\\');
                                          }
                                          addOutput(commentscanYYtext);
                                          BEGIN( Comment );
                                        }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 1589 "commentscan.l"
{
                                          unput(commentscanYYtext[0]);
                                          BEGIN( Comment );
                                        }
	YY_BREAK
/* --------- handle arguments of the file/dir/example command ------------ */
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 1596 "commentscan.l"
{ // no file name specfied
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
					}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 1601 "commentscan.l"
{ // first argument; name
  					  current->name = stripQuotes(commentscanYYtext);
					  BEGIN( Comment );
  				        }
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 1605 "commentscan.l"
{ yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 1608 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* --------- handle arguments of the xrefitem command ------------ */
case 102:
YY_RULE_SETUP
#line 1613 "commentscan.l"
{ // first argument
  					  newXRefItemKey=commentscanYYtext;
                                          setOutput(OutputXRef);
					  BEGIN(XRefItemParam2);
					}
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 1618 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 1622 "commentscan.l"
{ // missing arguments
  					  warn(yyFileName,yyLineNr,
					       "Missing first argument of \\xrefitem"
					      );
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  inContext = OutputDoc;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 1631 "commentscan.l"
{ // ignore other stuff 
  					}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 1634 "commentscan.l"
{ // second argument
  					  xrefItemTitle = stripQuotes(commentscanYYtext);
					  BEGIN(XRefItemParam3);
  					}
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 1638 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 1642 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "Missing second argument of \\xrefitem"
					      );
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  inContext = OutputDoc;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 1651 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 1654 "commentscan.l"
{ // third argument
  					  xrefListTitle = stripQuotes(commentscanYYtext);
                                          xrefKind = XRef_Item;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 1659 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
#line 1663 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "Missing third argument of \\xrefitem"
					      );
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  inContext = OutputDoc;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 1672 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* ----- handle arguments of the relates(also)/memberof command ------- */
case 114:
YY_RULE_SETUP
#line 1678 "commentscan.l"
{ // argument
  					  current->relates = commentscanYYtext;
                                          //if (current->mGrpId!=DOX_NOGROUP) 
                                          //{
                                          //  memberGroupRelates = commentscanYYtext;
                                          //}
					  BEGIN( Comment );
					}
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 1686 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 1690 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "Missing argument of \\relates or \\memberof command"
					      );
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 1698 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* ----- handle arguments of the relates(also)/addindex commands ----- */
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 1704 "commentscan.l"
{ // end of argument
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 119:
/* rule 119 can match eol */
YY_RULE_SETUP
#line 1709 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 1713 "commentscan.l"
{ // ignore other stuff
  					  addOutput(*commentscanYYtext);
  					}
	YY_BREAK
/* ----- handle arguments of the section/subsection/.. commands ------- */
case 121:
YY_RULE_SETUP
#line 1719 "commentscan.l"
{ // first argyment
  					  g_sectionLabel=commentscanYYtext;
                                          addOutput(commentscanYYtext);
					  g_sectionTitle.resize(0);
					  BEGIN(SectionTitle);
  					}
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
#line 1725 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "\\section command has no label"
					      );
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 1733 "commentscan.l"
{ // invalid character for section label
  					  warn(yyFileName,yyLineNr,
					      "Invalid or missing section label"
					      );
					  BEGIN(Comment);
  					}
	YY_BREAK
case 124:
/* rule 124 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 1739 "commentscan.l"
{ // end of section title
  					  addSection();
                                          addOutput(commentscanYYtext);
					  BEGIN( Comment );
  					}
	YY_BREAK
case 125:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 8;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 1744 "commentscan.l"
{ // end of section title
  					  addSection();
                                          addOutput(commentscanYYtext);
					  BEGIN( Comment );
  					}
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
#line 1749 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 1753 "commentscan.l"
{ // any character without special meaning
  					  g_sectionTitle+=commentscanYYtext;
					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 1757 "commentscan.l"
{ // unescape escaped command
  					  g_sectionTitle+=&commentscanYYtext[1];
					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 1761 "commentscan.l"
{ // unescape escaped character
  					  g_sectionTitle+=commentscanYYtext[1];
  					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 1765 "commentscan.l"
{ // anything else
  					  g_sectionTitle+=commentscanYYtext;
					  addOutput(*commentscanYYtext);
  					}
	YY_BREAK
/* ----- handle arguments of the subpage command ------- */
case 131:
YY_RULE_SETUP
#line 1772 "commentscan.l"
{ // first argument
                                          addOutput(commentscanYYtext);
					  // we add subpage labels as a kind of "inheritance" relation to prevent
					  // needing to add another list to the Entry class.
					  current->extends->append(new BaseInfo(commentscanYYtext,Public,Normal));
					  BEGIN(SubpageTitle);
  					}
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
#line 1779 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "\\subpage command has no label"
					      );
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
#line 1787 "commentscan.l"
{ // no title, end command
  					  addOutput(commentscanYYtext);
					  BEGIN( Comment );
  					}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 1791 "commentscan.l"
{ // add title, end of command
  					  addOutput(commentscanYYtext);
					  BEGIN( Comment );
  					}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 1795 "commentscan.l"
{ // no title, end of command
  					  unput(*commentscanYYtext);
					  BEGIN( Comment );
  					}
	YY_BREAK
/* ----- handle arguments of the anchor command ------- */
case 136:
YY_RULE_SETUP
#line 1802 "commentscan.l"
{ // found argument
                                          addAnchor(commentscanYYtext);
					  addOutput(commentscanYYtext);
					  BEGIN( Comment );
  					}
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
#line 1807 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "\\anchor command has no label"
					      );
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 1815 "commentscan.l"
{ // invalid character for anchor label
  					  warn(yyFileName,yyLineNr,
					      "Invalid or missing anchor label"
					      );
					  BEGIN(Comment);
  					}
	YY_BREAK
/* ----- handle arguments of the preformatted block commands ------- */
case 139:
/* rule 139 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 1825 "commentscan.l"
{ // possible ends
  					  addOutput(commentscanYYtext);
					  if (&commentscanYYtext[4]==blockName) // found end of the block
					  {
  					    BEGIN(Comment);
					  }
  					}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 1832 "commentscan.l"
{
  					  addOutput(commentscanYYtext);
					  if (blockName=="startuml") // found end of the block
					  {
  					    BEGIN(Comment);
					  }
                                        }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 1839 "commentscan.l"
{ // some word
  					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 142:
/* rule 142 can match eol */
YY_RULE_SETUP
#line 1842 "commentscan.l"
{ // new line
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
  					}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 1846 "commentscan.l"
{ // start of a C-comment
  					  g_commentCount++;
  					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 1850 "commentscan.l"
{ // end of a C-comment
  					  addOutput(commentscanYYtext);
  					  g_commentCount--;
					  if (g_commentCount<0 && blockName!="verbatim")
					  {
					    warn(yyFileName,yyLineNr,
					         "found */ without matching /* while inside a \\%s block! Perhaps a missing \\end%s?\n",blockName.data(),blockName.data());
					  }
  					}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 1859 "commentscan.l"
{
  					  addOutput(*commentscanYYtext);
  					}
	YY_BREAK
case YY_STATE_EOF(FormatBlock):
#line 1862 "commentscan.l"
{
                                          QCString endTag = "@end"+blockName;
                                          if (blockName=="startuml") endTag="enduml";
                                          warn(yyFileName,yyLineNr,
	                                    "reached end of comment while inside a @%s block; check for missing @%s tag!",
	                                    blockName.data(),endTag.data()
	                                  );				
					  yyterminate();
    					}
	YY_BREAK
/* ----- handle arguments of if/ifnot commands ------- */
case 146:
YY_RULE_SETUP
#line 1874 "commentscan.l"
{
                                          g_guardExpr=commentscanYYtext;
                                          g_roundCount=1;
                                          BEGIN(GuardExpr);
                                        }
	YY_BREAK
case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
#line 1879 "commentscan.l"
{
                                          g_guardExpr+=commentscanYYtext;
                                        }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 1882 "commentscan.l"
{
                                          g_guardExpr+=commentscanYYtext;
                                          g_roundCount++;
                                        }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 1886 "commentscan.l"
{
                                          g_guardExpr+=commentscanYYtext;
                                          g_roundCount--;
                                          if (g_roundCount==0)
                                          {
                                            handleGuard(g_guardExpr);
                                          }
                                        }
	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
#line 1894 "commentscan.l"
{
					  warn(yyFileName,yyLineNr,
						"invalid expression '%s' for guard",g_guardExpr.data());
                                          unput(*commentscanYYtext);
                                          BEGIN(GuardParam);
                                        }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 1900 "commentscan.l"
{ // parameter of if/ifnot guard
                                          handleGuard(commentscanYYtext);
  					}
	YY_BREAK
case 152:
/* rule 152 can match eol */
YY_RULE_SETUP
#line 1903 "commentscan.l"
{ // end of argument
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  //next line is commented out due to bug620924
					  //addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 153:
/* rule 153 can match eol */
YY_RULE_SETUP
#line 1909 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 1913 "commentscan.l"
{ // ignore other stuff
  					  addOutput(*commentscanYYtext);
  					}
	YY_BREAK
case 155:
/* rule 155 can match eol */
YY_RULE_SETUP
#line 1916 "commentscan.l"
{
  					  g_spaceBeforeIf.resize(0);
  					  BEGIN(Comment);
  					}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 1920 "commentscan.l"
{
  					  if (!g_spaceBeforeIf.isEmpty()) // needed for 665313 in combation with bug620924
					  {
					    addOutput(g_spaceBeforeIf);
					  }
  					  g_spaceBeforeIf.resize(0);
  					  BEGIN(Comment);
  					}
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 1928 "commentscan.l"
{
  					  unput(*commentscanYYtext);
  					  BEGIN(Comment);
  					}
	YY_BREAK
/* ----- handle skipping of conditional sections ------- */
case 158:
/* rule 158 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 1935 "commentscan.l"
{
                                          guardType = Guard_IfNot;
  					  BEGIN( GuardParam );
  					}
	YY_BREAK
case 159:
/* rule 159 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 1939 "commentscan.l"
{
                                          guardType = Guard_If;
  					  BEGIN( GuardParam );
  					}
	YY_BREAK
case 160:
/* rule 160 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 1943 "commentscan.l"
{
  					  if (guards.isEmpty())
					  {
					    warn(yyFileName,yyLineNr,
						"found @endif without matching start command");
					  }
					  else
					  {
					    GuardedSection *s = guards.pop();
                                            bool parentVisible = s->parentVisible();
                                            delete s;
                                            if (parentVisible)
                                            {
					      enabledSectionFound=TRUE;
					      BEGIN( GuardParamEnd );
                                            }
					  }
  					}
	YY_BREAK
case 161:
/* rule 161 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 1961 "commentscan.l"
{
  					  if (guards.isEmpty())
					  {
					    warn(yyFileName,yyLineNr,
						"found @else without matching start command");
					  }
					  else
					  {
					    if (!enabledSectionFound && guards.top()->parentVisible())
					    {
					      delete guards.pop();
					      guards.push(new GuardedSection(TRUE,TRUE));
					      enabledSectionFound=TRUE;
					      BEGIN( GuardParamEnd );
					    }
					  }
  					}
	YY_BREAK
case 162:
/* rule 162 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 1978 "commentscan.l"
{
  					  if (guards.isEmpty())
					  {
					    warn(yyFileName,yyLineNr,
						"found @elseif without matching start command");
					  }
					  else
					  {
					    if (!enabledSectionFound && guards.top()->parentVisible())
					    {
                                              guardType=Guard_If;
					      delete guards.pop();
					      BEGIN( GuardParam );
					    }
					  }
  					}
	YY_BREAK
case 163:
/* rule 163 can match eol */
YY_RULE_SETUP
#line 1994 "commentscan.l"
{ // skip line
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  //addOutput('\n');
  					}
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 1998 "commentscan.l"
{ // skip non-special characters
  					}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 2000 "commentscan.l"
{ // any other character
  					}
	YY_BREAK
/* ----- handle skipping of internal section ------- */
case 166:
/* rule 166 can match eol */
YY_RULE_SETUP
#line 2006 "commentscan.l"
{ // skip line
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
  					}
	YY_BREAK
case 167:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 2010 "commentscan.l"
{
                                          g_condCount++;
  					}
	YY_BREAK
case 168:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 2013 "commentscan.l"
{
                                          g_condCount++;
  					}
	YY_BREAK
case 169:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 2016 "commentscan.l"
{
                                          g_condCount--;
					  if (g_condCount<0) // handle conditional section around of \internal, see bug607743  
					  {
					    unput('\\');
					    BEGIN(Comment);
					  }
  					}
	YY_BREAK
case 170:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 2024 "commentscan.l"
{
  					  if (g_sectionLevel>0)
					  {
					    unput('\\');
					    BEGIN(Comment);
					  }
  					}
	YY_BREAK
case 171:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 2031 "commentscan.l"
{
  					  if (g_sectionLevel>1)
					  {
					    unput('\\');
					    BEGIN(Comment);
					  }
  					}
	YY_BREAK
case 172:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 2038 "commentscan.l"
{
  					  if (g_sectionLevel>2)
					  {
					    unput('\\');
					    BEGIN(Comment);
					  }
  					}
	YY_BREAK
case 173:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 2045 "commentscan.l"
{
  					  if (g_sectionLevel>3)
					  {
					    unput('\\');
					    BEGIN(Comment);
					  }
  					}
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 2052 "commentscan.l"
{
                                          addOutput("\\endinternal "); 
					  BEGIN(Comment);
					}
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 2056 "commentscan.l"
{ // skip non-special characters
  					}
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 2058 "commentscan.l"
{ // any other character
  					}
	YY_BREAK
/* ----- handle argument of name command ------- */
case 177:
/* rule 177 can match eol */
YY_RULE_SETUP
#line 2064 "commentscan.l"
{ // end of argument
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 178:
/* rule 178 can match eol */
YY_RULE_SETUP
#line 2069 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
					  g_memberGroupHeader+=' ';
  					}
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 2074 "commentscan.l"
{ // ignore other stuff
					  g_memberGroupHeader+=*commentscanYYtext;
					  current->name+=*commentscanYYtext;
  					}
	YY_BREAK
/* ----- handle argument of ingroup command ------- */
case 180:
YY_RULE_SETUP
#line 2081 "commentscan.l"
{ // group id
  					  current->groups->append(
					    new Grouping(commentscanYYtext, Grouping::GROUPING_INGROUP)
					  );
					  inGroupParamFound=TRUE;
  					}
	YY_BREAK
case 181:
/* rule 181 can match eol */
YY_RULE_SETUP
#line 2087 "commentscan.l"
{ // missing argument
  					  if (!inGroupParamFound)
					  {
  					    warn(yyFileName,yyLineNr,
					        "Missing group name for \\ingroup command"
					        );
					  }
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 182:
/* rule 182 can match eol */
YY_RULE_SETUP
#line 2098 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 2102 "commentscan.l"
{ // ignore other stuff
  					  addOutput(*commentscanYYtext);
  					}
	YY_BREAK
/* ----- handle argument of fn command ------- */
case 184:
/* rule 184 can match eol */
YY_RULE_SETUP
#line 2108 "commentscan.l"
{ // end of argument
  					  if (braceCount==0)
					  {
					    if (*commentscanYYtext=='\n') yyLineNr++;
					    addOutput('\n');
					    langParser->parsePrototype(functionProto);
					    BEGIN( Comment );
					  }
  					}
	YY_BREAK
case 185:
/* rule 185 can match eol */
YY_RULE_SETUP
#line 2117 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  functionProto+=' ';
  					}
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 2121 "commentscan.l"
{ // non-special characters
                                          functionProto+=commentscanYYtext;
  					}
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 2124 "commentscan.l"
{
                                          functionProto+=commentscanYYtext;
					  braceCount++;
					}
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 2128 "commentscan.l"
{
                                          functionProto+=commentscanYYtext;
					  braceCount--;
					}
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 2132 "commentscan.l"
{ // add other stuff
                                          functionProto+=*commentscanYYtext;
  					}
	YY_BREAK
/* ----- handle argument of overload command ------- */
case 190:
/* rule 190 can match eol */
YY_RULE_SETUP
#line 2140 "commentscan.l"
{ // end of argument
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  if (functionProto.stripWhiteSpace().isEmpty())
					  { // plain overload command
					    addOutput(getOverloadDocs());
					    addOutput('\n');
					  }
					  else // overload declaration
					  {
                                            makeStructuralIndicator(Entry::OVERLOADDOC_SEC);
					    langParser->parsePrototype(functionProto);
					  }
					  BEGIN( Comment );
  					}
	YY_BREAK
case 191:
/* rule 191 can match eol */
YY_RULE_SETUP
#line 2154 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  functionProto+=' ';
  					}
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 2158 "commentscan.l"
{ // add other stuff
                                          functionProto+=*commentscanYYtext;
  					}
	YY_BREAK
/* ----- handle argument of inherit command ------- */
case 193:
YY_RULE_SETUP
#line 2164 "commentscan.l"
{ // found argument
					  current->extends->append(
					    new BaseInfo(removeRedundantWhiteSpace(commentscanYYtext),Public,Normal)
					  );
					  BEGIN( Comment );
  					}
	YY_BREAK
case 194:
/* rule 194 can match eol */
YY_RULE_SETUP
#line 2170 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "\\inherit command has no argument"
					      );
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 2178 "commentscan.l"
{ // invalid character for anchor label
  					  warn(yyFileName,yyLineNr,
					      "Invalid or missing name for \\inherit command"
					      );
					  BEGIN(Comment);
  					}
	YY_BREAK
/* ----- handle argument of extends and implements commands ------- */
case 196:
YY_RULE_SETUP
#line 2187 "commentscan.l"
{ // found argument
					  current->extends->append(
					    new BaseInfo(removeRedundantWhiteSpace(commentscanYYtext),Public,Normal)
					  );
					  BEGIN( Comment );
  					}
	YY_BREAK
case 197:
/* rule 197 can match eol */
YY_RULE_SETUP
#line 2193 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "\\extends or \\implements command has no argument"
					      );
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 2201 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* ----- handle language specific sections ------- */
case 199:
YY_RULE_SETUP
#line 2206 "commentscan.l"
{ /* language switch */
                                     QCString langId = &commentscanYYtext[2];
				     if (langId.isEmpty() ||
					 qstricmp(Config_getEnum(OUTPUT_LANGUAGE),langId)==0)
				     { // enable language specific section
				       BEGIN(Comment);
				     }
                                   }
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 2214 "commentscan.l"
{ /* any character not a *, @, backslash or new line */
                                   }
	YY_BREAK
case 201:
/* rule 201 can match eol */
YY_RULE_SETUP
#line 2216 "commentscan.l"
{ /* new line in verbatim block */
  		                     if (*commentscanYYtext=='\n') yyLineNr++;
                                   }
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 2219 "commentscan.l"
{ /* any other character */
                                   }
	YY_BREAK
/* ----- handle arguments of the cite command ------- */
case 203:
YY_RULE_SETUP
#line 2224 "commentscan.l"
{ // found argyment
  					  addCite();
                                          addOutput(commentscanYYtext);
					  BEGIN(Comment);
  					}
	YY_BREAK
case 204:
/* rule 204 can match eol */
YY_RULE_SETUP
#line 2229 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "\\cite command has no label"
					      );
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 2237 "commentscan.l"
{ // invalid character for cite label
  					  warn(yyFileName,yyLineNr,
					      "Invalid or missing cite label"
					      );
					  BEGIN(Comment);
  					}
	YY_BREAK
/* ----- handle argument of the copydoc command ------- */
case YY_STATE_EOF(CopyDoc):
#line 2246 "commentscan.l"
case 206:
/* rule 206 can match eol */
YY_RULE_SETUP
#line 2247 "commentscan.l"
{
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  setOutput(OutputDoc);
                                          addOutput("\\copydetails ");
					  addOutput(g_copyDocArg);
					  addOutput("\n");
					  BEGIN(Comment);
  					}
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 2256 "commentscan.l"
{
  					  g_copyDocArg+=commentscanYYtext;
					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 2260 "commentscan.l"
{
  					  g_copyDocArg+=commentscanYYtext;
					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 2266 "commentscan.l"
ECHO;
	YY_BREAK
#line 6626 "/home/INTRANET/aitoumel/myfiles/NeuronProject/Week1/doxygen-master/build/generated_src/commentscan.cpp"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(Comment):
			case YY_STATE_EOF(PageDocArg1):
			case YY_STATE_EOF(PageDocArg2):
			case YY_STATE_EOF(RelatesParam1):
			case YY_STATE_EOF(ClassDocArg1):
			case YY_STATE_EOF(ClassDocArg2):
			case YY_STATE_EOF(ClassDocArg3):
			case YY_STATE_EOF(CategoryDocArg1):
			case YY_STATE_EOF(XRefItemParam1):
			case YY_STATE_EOF(XRefItemParam2):
			case YY_STATE_EOF(XRefItemParam3):
			case YY_STATE_EOF(FileDocArg1):
			case YY_STATE_EOF(ParamArg1):
			case YY_STATE_EOF(EnumDocArg1):
			case YY_STATE_EOF(NameSpaceDocArg1):
			case YY_STATE_EOF(PackageDocArg1):
			case YY_STATE_EOF(GroupDocArg1):
			case YY_STATE_EOF(GroupDocArg2):
			case YY_STATE_EOF(SectionLabel):
			case YY_STATE_EOF(SectionTitle):
			case YY_STATE_EOF(SubpageLabel):
			case YY_STATE_EOF(SubpageTitle):
			case YY_STATE_EOF(LineParam):
			case YY_STATE_EOF(GuardParam):
			case YY_STATE_EOF(GuardParamEnd):
			case YY_STATE_EOF(SkipGuardedSection):
			case YY_STATE_EOF(SkipInternal):
			case YY_STATE_EOF(NameParam):
			case YY_STATE_EOF(InGroupParam):
			case YY_STATE_EOF(FnParam):
			case YY_STATE_EOF(OverloadParam):
			case YY_STATE_EOF(InheritParam):
			case YY_STATE_EOF(ExtendsParam):
			case YY_STATE_EOF(ReadFormulaShort):
			case YY_STATE_EOF(ReadFormulaLong):
			case YY_STATE_EOF(AnchorLabel):
			case YY_STATE_EOF(HtmlComment):
			case YY_STATE_EOF(SkipLang):
			case YY_STATE_EOF(CiteLabel):
			case YY_STATE_EOF(GuardExpr):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed commentscanYYin at a new source and called
			 * commentscanYYlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = commentscanYYin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( commentscanYYwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * commentscanYYtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of commentscanYYlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			commentscanYYrestart(commentscanYYin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) commentscanYYrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1148 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1148 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1147);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up commentscanYYtext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					commentscanYYrestart(commentscanYYin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( commentscanYYwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve commentscanYYtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void commentscanYYrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        commentscanYYensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            commentscanYY_create_buffer(commentscanYYin,YY_BUF_SIZE );
	}

	commentscanYY_init_buffer(YY_CURRENT_BUFFER,input_file );
	commentscanYY_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void commentscanYY_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		commentscanYYpop_buffer_state();
	 *		commentscanYYpush_buffer_state(new_buffer);
     */
	commentscanYYensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	commentscanYY_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (commentscanYYwrap()) processing, but the only time this flag
	 * is looked at is after commentscanYYwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void commentscanYY_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	commentscanYYin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE commentscanYY_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) commentscanYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in commentscanYY_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) commentscanYYalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in commentscanYY_create_buffer()" );

	b->yy_is_our_buffer = 1;

	commentscanYY_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with commentscanYY_create_buffer()
 * 
 */
    void commentscanYY_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		commentscanYYfree((void *) b->yy_ch_buf  );

	commentscanYYfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a commentscanYYrestart() or at EOF.
 */
    static void commentscanYY_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	commentscanYY_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then commentscanYY_init_buffer was _probably_
     * called from commentscanYYrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void commentscanYY_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		commentscanYY_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void commentscanYYpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	commentscanYYensure_buffer_stack();

	/* This block is copied from commentscanYY_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from commentscanYY_switch_to_buffer. */
	commentscanYY_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void commentscanYYpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	commentscanYY_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		commentscanYY_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void commentscanYYensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)commentscanYYalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in commentscanYYensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)commentscanYYrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in commentscanYYensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE commentscanYY_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) commentscanYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in commentscanYY_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	commentscanYY_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to commentscanYYlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       commentscanYY_scan_bytes() instead.
 */
YY_BUFFER_STATE commentscanYY_scan_string (yyconst char * yystr )
{
    
	return commentscanYY_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to commentscanYYlex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE commentscanYY_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) commentscanYYalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in commentscanYY_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = commentscanYY_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in commentscanYY_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up commentscanYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		commentscanYYtext[commentscanYYleng] = (yy_hold_char); \
		(yy_c_buf_p) = commentscanYYtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		commentscanYYleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int commentscanYYget_lineno  (void)
{
        
    return commentscanYYlineno;
}

/** Get the input stream.
 * 
 */
FILE *commentscanYYget_in  (void)
{
        return commentscanYYin;
}

/** Get the output stream.
 * 
 */
FILE *commentscanYYget_out  (void)
{
        return commentscanYYout;
}

/** Get the length of the current token.
 * 
 */
int commentscanYYget_leng  (void)
{
        return commentscanYYleng;
}

/** Get the current token.
 * 
 */

char *commentscanYYget_text  (void)
{
        return commentscanYYtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void commentscanYYset_lineno (int  line_number )
{
    
    commentscanYYlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see commentscanYY_switch_to_buffer
 */
void commentscanYYset_in (FILE *  in_str )
{
        commentscanYYin = in_str ;
}

void commentscanYYset_out (FILE *  out_str )
{
        commentscanYYout = out_str ;
}

int commentscanYYget_debug  (void)
{
        return commentscanYY_flex_debug;
}

void commentscanYYset_debug (int  bdebug )
{
        commentscanYY_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from commentscanYYlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    commentscanYYin = stdin;
    commentscanYYout = stdout;
#else
    commentscanYYin = (FILE *) 0;
    commentscanYYout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * commentscanYYlex_init()
     */
    return 0;
}

/* commentscanYYlex_destroy is for both reentrant and non-reentrant scanners. */
int commentscanYYlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		commentscanYY_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		commentscanYYpop_buffer_state();
	}

	/* Destroy the stack itself. */
	commentscanYYfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    commentscanYYfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * commentscanYYlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *commentscanYYalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *commentscanYYrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void commentscanYYfree (void * ptr )
{
	free( (char *) ptr );	/* see commentscanYYrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 2266 "commentscan.l"



//----------------------------------------------------------------------------

static bool handleBrief(const QCString &)
{
  //printf("handleBrief\n");
  setOutput(OutputBrief);
  return FALSE;
}

static bool handleFn(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::MEMBERDOC_SEC);
  functionProto.resize(0);
  braceCount=0;
  BEGIN(FnParam);
  return stop;
}

static bool handleDef(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::DEFINEDOC_SEC);
  functionProto.resize(0);
  BEGIN(FnParam);
  return stop;
}

static bool handleOverload(const QCString &)
{
  functionProto.resize(0);
  BEGIN(OverloadParam);
  return FALSE;
}

static bool handleEnum(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::ENUMDOC_SEC);
  BEGIN(EnumDocArg1);
  return stop;
}

static bool handleDefGroup(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::GROUPDOC_SEC);
  current->groupDocType = Entry::GROUPDOC_NORMAL;
  BEGIN( GroupDocArg1 );
  return stop;
}

static bool handleAddToGroup(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::GROUPDOC_SEC);
  current->groupDocType = Entry::GROUPDOC_ADD;
  BEGIN( GroupDocArg1 );
  return stop;
}

static bool handleWeakGroup(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::GROUPDOC_SEC);
  current->groupDocType = Entry::GROUPDOC_WEAK;
  BEGIN( GroupDocArg1 );
  return stop;
}

static bool handleNamespace(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::NAMESPACEDOC_SEC);
  BEGIN( NameSpaceDocArg1 );
  return stop;
}

static bool handlePackage(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::PACKAGEDOC_SEC);
  BEGIN( PackageDocArg1 );
  return stop;
}

static bool handleClass(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::CLASSDOC_SEC);
  BEGIN( ClassDocArg1 ); 
  return stop;
}

static bool handleHeaderFile(const QCString &)
{
  BEGIN( ClassDocArg2 );
  return FALSE;
}

static bool handleProtocol(const QCString &)
{ // Obj-C protocol
  bool stop=makeStructuralIndicator(Entry::PROTOCOLDOC_SEC);
  BEGIN( ClassDocArg1 ); 
  return stop;
}

static bool handleCategory(const QCString &)
{ // Obj-C category
  bool stop=makeStructuralIndicator(Entry::CATEGORYDOC_SEC);
  BEGIN( CategoryDocArg1 ); 
  return stop;
}

static bool handleUnion(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::UNIONDOC_SEC);
  BEGIN( ClassDocArg1 ); 
  return stop;
}

static bool handleStruct(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::STRUCTDOC_SEC);
  BEGIN( ClassDocArg1 ); 
  return stop;
}

static bool handleInterface(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::INTERFACEDOC_SEC);
  BEGIN( ClassDocArg1 ); 
  return stop;
}

static bool handleIdlException(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::EXCEPTIONDOC_SEC);
  BEGIN( ClassDocArg1 ); 
  return stop;
}

static bool handlePage(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::PAGEDOC_SEC);
  BEGIN( PageDocArg1 );
  return stop;
}

static bool handleMainpage(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::MAINPAGEDOC_SEC);
  if (!stop) 
  {
    current->name = "mainpage";
  }
  BEGIN( PageDocArg2 );
  return stop;
}

static bool handleFile(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::FILEDOC_SEC);
  if (!stop) 
  {
    current->name = yyFileName;
  }
  BEGIN( FileDocArg1 );
  return stop;
}

static bool handleParam(const QCString &)
{
  // we need process param and retval arguments to escape leading underscores in case of
  // markdown processing, see bug775493
  addOutput("@param ");
  BEGIN( ParamArg1 );
  return FALSE;
}

static bool handleRetval(const QCString &)
{
  addOutput("@retval ");
  BEGIN( ParamArg1 );
  return FALSE;
}

static bool handleDir(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::DIRDOC_SEC);
  if (!stop) current->name = yyFileName;
  BEGIN( FileDocArg1 );
  return stop;
}

static bool handleExample(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::EXAMPLE_SEC);
  if (!stop) current->name = yyFileName;
  BEGIN( FileDocArg1 );
  return stop;
}

static bool handleDetails(const QCString &)
{
  if (inContext!=OutputBrief)
  {
    addOutput("\n\n"); // treat @details outside brief description
                       // as a new paragraph
  }
  setOutput(OutputDoc);
  return FALSE;
}

static bool handleName(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::MEMBERGRP_SEC);
  if (!stop)
  {
    g_memberGroupHeader.resize(0);
    BEGIN( NameParam );
    if (g_memberGroupId!=DOX_NOGROUP) // end of previous member group
    {
      closeGroup(current,yyFileName,yyLineNr,TRUE);
    }
  }
  return stop;
}

static bool handleTodo(const QCString &)
{
  newXRefKind = XRef_Todo;
  setOutput(OutputXRef);
  xrefKind = XRef_Todo;
  return FALSE;
}

static bool handleTest(const QCString &)
{
  newXRefKind = XRef_Test;
  setOutput(OutputXRef);
  xrefKind = XRef_Test;
  return FALSE;
}

static bool handleBug(const QCString &)
{
  newXRefKind = XRef_Bug;
  setOutput(OutputXRef);
  xrefKind = XRef_Bug;
  return FALSE;
}

static bool handleDeprecated(const QCString &)
{
  newXRefKind = XRef_Deprecated;
  setOutput(OutputXRef);
  xrefKind = XRef_Deprecated;
  return FALSE;
}

static bool handleXRefItem(const QCString &)
{
  newXRefKind = XRef_Item;
  BEGIN(XRefItemParam1);
  return FALSE;
}

static bool handleParBlock(const QCString &)
{
  if (g_insideParBlock)
  {
    warn(yyFileName,yyLineNr,
	"found \\parblock command while already in a parblock!");
  }
  if (!g_spaceBeforeCmd.isEmpty()) 
  {
    addOutput(g_spaceBeforeCmd);
    g_spaceBeforeCmd.resize(0);
  }
  addOutput("@parblock ");
  g_insideParBlock = TRUE;
  return FALSE;
}

static bool handleEndParBlock(const QCString &)
{
  if (!g_insideParBlock)
  {
    warn(yyFileName,yyLineNr,
	"found \\endparblock command without matching \\parblock!");
  }
  addOutput("@endparblock");
  setOutput(OutputDoc); // to end a parblock inside a xrefitem like context
  g_insideParBlock = FALSE;
  return FALSE;
}

static bool handleRelated(const QCString &)
{
  BEGIN(RelatesParam1);
  return FALSE;
}

static bool handleRelatedAlso(const QCString &)
{
  current->relatesType = Duplicate;
  BEGIN(RelatesParam1);
  return FALSE;
}

static bool handleMemberOf(const QCString &)
{
  current->relatesType = MemberOf;
  BEGIN(RelatesParam1);
  return FALSE;
}

static bool handleRefItem(const QCString &)
{
  addOutput("@refitem ");
  BEGIN(LineParam);
  return FALSE;
}

static bool handleSection(const QCString &s)
{
  setOutput(OutputDoc);
  addOutput("@"+s+" ");
  BEGIN(SectionLabel);
  if      (s=="section")       g_sectionLevel=1;
  else if (s=="subsection")    g_sectionLevel=2;
  else if (s=="subsubsection") g_sectionLevel=3;
  else if (s=="paragraph")     g_sectionLevel=4;
  return FALSE;
}

static bool handleSubpage(const QCString &s)
{
  if (current->section!=Entry::EMPTY_SEC && 
      current->section!=Entry::PAGEDOC_SEC &&
      current->section!=Entry::MAINPAGEDOC_SEC
     )
  {
    warn(yyFileName,yyLineNr,
	"found \\subpage command in a comment block that is not marked as a page!");
  }
  if (!g_spaceBeforeCmd.isEmpty()) 
  {
    addOutput(g_spaceBeforeCmd);
    g_spaceBeforeCmd.resize(0);
  }
  addOutput("@"+s+" ");
  BEGIN(SubpageLabel);
  return FALSE;
}

static bool handleAnchor(const QCString &s)
{
  addOutput("@"+s+" ");
  BEGIN(AnchorLabel);
  return FALSE;
}

static bool handleCite(const QCString &s)
{
  if (!g_spaceBeforeCmd.isEmpty()) 
  {
    addOutput(g_spaceBeforeCmd);
    g_spaceBeforeCmd.resize(0);
  }
  addOutput("@"+s+" ");
  BEGIN(CiteLabel);
  return FALSE;
}

static bool handleFormatBlock(const QCString &s)
{
  addOutput("@"+s+" ");
  //printf("handleFormatBlock(%s)\n",s.data());
  blockName=s;
  g_commentCount=0;
  BEGIN(FormatBlock);
  return FALSE;
}

static bool handleAddIndex(const QCString &)
{
  addOutput("@addindex ");
  BEGIN(LineParam);
  return FALSE;
}

static bool handleIf(const QCString &)
{
  enabledSectionFound=FALSE;
  guardType = Guard_If;
  g_spaceBeforeIf = g_spaceBeforeCmd;
  BEGIN(GuardParam);
  return FALSE;
}

static bool handleIfNot(const QCString &)
{
  enabledSectionFound=FALSE;
  guardType = Guard_IfNot;
  g_spaceBeforeIf = g_spaceBeforeCmd;
  BEGIN(GuardParam);
  return FALSE;
}

static bool handleElseIf(const QCString &)
{
  if (guards.isEmpty())
  {
    warn(yyFileName,yyLineNr,
	"found \\else without matching start command");
  }
  else
  {
    guardType = enabledSectionFound ? Guard_Skip : Guard_If;
    BEGIN(GuardParam);
  }
  return FALSE;
}

static bool handleElse(const QCString &)
{
  if (guards.isEmpty())
  {
    warn(yyFileName,yyLineNr,
	"found \\else without matching start command");
  }
  else
  {
    BEGIN( SkipGuardedSection );
  }
  return FALSE;
}

static bool handleEndIf(const QCString &)
{
  if (guards.isEmpty())
  {
    warn(yyFileName,yyLineNr,
	"found \\endif without matching start command");
  }
  else
  {
    delete guards.pop();
  }
  enabledSectionFound=FALSE;
  if (!g_spaceBeforeCmd.isEmpty()) 
  {
    addOutput(g_spaceBeforeCmd);
    g_spaceBeforeCmd.resize(0);
  }
  BEGIN( GuardParamEnd );
  return FALSE;
}

static bool handleIngroup(const QCString &)
{
  inGroupParamFound=FALSE;
  BEGIN( InGroupParam );
  return FALSE;
}

static bool handleNoSubGrouping(const QCString &)
{
  current->subGrouping = FALSE; 
  return FALSE;
}

static bool handleShowInitializer(const QCString &)
{
  current->initLines = 100000; // ON
  return FALSE;
}

static bool handleHideInitializer(const QCString &)
{
  current->initLines = 0; // OFF
  return FALSE;
}

static bool handleCallgraph(const QCString &)
{
  current->callGraph = TRUE; // ON
  return FALSE;
}

static bool handleHideCallgraph(const QCString &)
{
  current->callGraph = FALSE; // OFF
  return FALSE;
}

static bool handleCallergraph(const QCString &)
{
  current->callerGraph = TRUE; // ON
  return FALSE;
}

static bool handleHideCallergraph(const QCString &)
{
  current->callerGraph = FALSE; // OFF
  return FALSE;
}

static bool handleInternal(const QCString &)
{
  if (!Config_getBool(INTERNAL_DOCS))
  {
    // make sure some whitespace before a \internal command
    // is not treated as "documentation"
    if (current->doc.stripWhiteSpace().isEmpty())
    { 
      current->doc.resize(0);
    }
    g_condCount=0;
    BEGIN( SkipInternal );
  }
  else
  {
    // re-enabled for bug640828
    addOutput("\\internal "); 
    inInternalDocs = TRUE;
  }
  return FALSE;
}

static bool handleLineBr(const QCString &)
{
  addOutput('\n');
  return FALSE;
}

static bool handleStatic(const QCString &)
{
  endBrief();
  current->stat = TRUE; 
  return FALSE;
}

static bool handlePure(const QCString &)
{
  endBrief();
  current->virt = Pure; 
  return FALSE;
}

static bool handlePrivate(const QCString &)
{
  current->protection = Private;
  return FALSE;
}

static bool handlePrivateSection(const QCString &)
{
  current->protection = protection = Private;
  return FALSE;
}

static bool handleProtected(const QCString &)
{
  current->protection = Protected;
  return FALSE;
}

static bool handleProtectedSection(const QCString &)
{
  current->protection = protection = Protected ;
  return FALSE;
}

static bool handlePublic(const QCString &)
{
  current->protection = Public;
  return FALSE;
}

static bool handlePublicSection(const QCString &)
{
  current->protection = protection = Public;
  return FALSE;
}

static bool handleToc(const QCString &)
{
  if (current->section==Entry::PAGEDOC_SEC || 
      current->section==Entry::MAINPAGEDOC_SEC)
  {
    current->stat=TRUE;  // we 'abuse' stat to pass whether or the TOC is enabled
  }
  return FALSE;
}

static bool handleInherit(const QCString &)
{
  BEGIN(InheritParam);
  return FALSE;
}

static bool handleExtends(const QCString &)
{
  BEGIN(ExtendsParam);
  return FALSE;
}

static bool handleCopyBrief(const QCString &)
{
  if (current->brief.isEmpty() && current->doc.isEmpty())
  { // if we don't have a brief or detailed description yet,
    // then the @copybrief should end up in the brief description.
    // otherwise it will be copied inline (see bug691315 & bug700788)
    setOutput(OutputBrief);
  }
  if (!g_spaceBeforeCmd.isEmpty()) 
  {
    addOutput(g_spaceBeforeCmd);
    g_spaceBeforeCmd.resize(0);
  }
  addOutput("\\copybrief ");
  return FALSE;
}

static bool handleCopyDetails(const QCString &)
{
  setOutput(OutputDoc);
  if (!g_spaceBeforeCmd.isEmpty()) 
  {
    addOutput(g_spaceBeforeCmd);
    g_spaceBeforeCmd.resize(0);
  }
  addOutput("\\copydetails ");
  return FALSE;
}

static bool handleCopyDoc(const QCString &)
{
  setOutput(OutputBrief);
  if (!g_spaceBeforeCmd.isEmpty()) 
  {
    addOutput(g_spaceBeforeCmd);
    g_spaceBeforeCmd.resize(0);
  }
  addOutput("\\copybrief ");
  g_copyDocArg.resize(0);
  BEGIN(CopyDoc);
  return FALSE;
}

//----------------------------------------------------------------------------

static void checkFormula()
{
  if (YY_START==ReadFormulaShort || YY_START==ReadFormulaLong)
  {
    warn(yyFileName,yyLineNr,"End of comment block while inside formula.");
  }
}

//----------------------------------------------------------------------------

bool parseCommentBlock(/* in */     ParserInterface *parser,
                       /* in */     Entry *curEntry,
                       /* in */     const QCString &comment,
		       /* in */     const QCString &fileName,
		       /* in,out */ int  &lineNr,
		       /* in */     bool isBrief,
		       /* in */     bool isAutoBriefOn,
		       /* in */     bool isInbody,
		       /* in,out */ Protection &prot,
		       /* in,out */ int &position,
		       /* out */    bool &newEntryNeeded
		      )
{
  //printf("parseCommentBlock() isBrief=%d isAutoBriefOn=%d lineNr=%d\n",
  //    isBrief,isAutoBriefOn,lineNr);

  initParser();
  guards.setAutoDelete(TRUE);
  guards.clear();
  langParser     = parser;
  current        = curEntry;
  if (comment.isEmpty()) return FALSE; // avoid empty strings
  inputString    = comment;
  inputString.append(" ");
  inputPosition  = position;
  yyLineNr       = lineNr;
  yyFileName     = fileName;
  protection     = prot;
  needNewEntry   = FALSE;
  xrefKind       = XRef_None;
  xrefAppendFlag = FALSE;
  insidePre      = FALSE;
  parseMore      = FALSE;
  inBody         = isInbody;
  outputXRef.resize(0);
  setOutput( isBrief || isAutoBriefOn ? OutputBrief : OutputDoc );
  briefEndsAtDot = isAutoBriefOn;
  g_condCount    = 0;
  g_sectionLevel = 0;
  g_spaceBeforeCmd.resize(0);
  g_spaceBeforeIf.resize(0);

  printlex(commentscanYY_flex_debug, TRUE, __FILE__, fileName ? fileName.data(): NULL);
  if (!current->inbodyDocs.isEmpty() && isInbody) // separate in body fragments
  {
    current->inbodyDocs+="\n\n";
  }

  Debug::print(Debug::CommentScan,0,"-----------\nCommentScanner: %s:%d\n"
               "input=[\n%s]\n",qPrint(fileName),lineNr,qPrint(comment)
              );
  
  commentscanYYrestart( commentscanYYin );
  BEGIN( Comment );
  commentscanYYlex();
  setOutput( OutputDoc );

  if (YY_START==OverloadParam) // comment ended with \overload
  {
    addOutput(getOverloadDocs());
  }

  if (!guards.isEmpty())
  {
    warn(yyFileName,yyLineNr,"Documentation block ended in the middle of a conditional section!");
  }

  if (g_insideParBlock)
  {
    warn(yyFileName,yyLineNr,
	"Documentation block ended while inside a \\parblock. Missing \\endparblock");
  }

  current->doc=stripLeadingAndTrailingEmptyLines(current->doc,current->docLine);

  if (current->section==Entry::FILEDOC_SEC && current->doc.isEmpty())
  {
    // to allow a comment block with just a @file command.
    current->doc="\n\n";
  }

  if (current->section==Entry::MEMBERGRP_SEC &&
      g_memberGroupId==DOX_NOGROUP) // @name section but no group started yet
  {
    openGroup(current,yyFileName,yyLineNr);
  }

  if (Doxygen::markdownSupport)
  {
    current->brief      = processMarkdown(fileName,lineNr,current,current->brief);
    current->doc        = processMarkdown(fileName,lineNr,current,current->doc);
    current->inbodyDocs = processMarkdown(fileName,lineNr,current,current->inbodyDocs);
  }

  Debug::print(Debug::CommentScan,0,
               "brief=[line=%d\n%s]\ndocs=[line=%d\n%s]\ninbody=[line=%d\n%s]\n===========\n",
	       current->briefLine,qPrint(current->brief),
               current->docLine,qPrint(current->doc),
               current->inbodyLine,qPrint(current->inbodyDocs)
              );
  
  checkFormula();
  prot = protection;
  
  groupAddDocs(curEntry);

  newEntryNeeded = needNewEntry;

  // if we did not proceed during this call, it does not make
  // sense to continue, since we get stuck. See bug 567346 for situations
  // were this happens
  if (parseMore && position==inputPosition) parseMore=FALSE;

  if (parseMore) position=inputPosition; else position=0;

  lineNr = yyLineNr;
  //printf("position=%d parseMore=%d newEntryNeeded=%d\n",
  //  position,parseMore,newEntryNeeded);

  printlex(commentscanYY_flex_debug, FALSE, __FILE__, fileName ? fileName.data(): NULL);
  return parseMore;
}

//---------------------------------------------------------------------------

void groupEnterFile(const char *fileName,int)
{
  g_autoGroupStack.setAutoDelete(TRUE);
  g_autoGroupStack.clear();
  g_memberGroupId = DOX_NOGROUP;
  g_memberGroupDocs.resize(0);
  g_memberGroupRelates.resize(0);
  g_compoundName=fileName;
}

void groupLeaveFile(const char *fileName,int line)
{
  //if (g_memberGroupId!=DOX_NOGROUP)
  //{
  //  warn(fileName,line,"end of file while inside a member group\n");
  //}
  g_memberGroupId=DOX_NOGROUP;
  g_memberGroupRelates.resize(0);
  g_memberGroupDocs.resize(0);
  if (!g_autoGroupStack.isEmpty())
  {
    warn(fileName,line,"end of file while inside a group\n");
  }
}

void groupEnterCompound(const char *fileName,int line,const char *name)
{
  if (g_memberGroupId!=DOX_NOGROUP)
  {
    warn(fileName,line,"try to put compound %s inside a member group\n",name);
  }
  g_memberGroupId=DOX_NOGROUP;
  g_memberGroupRelates.resize(0);
  g_memberGroupDocs.resize(0);
  g_compoundName = name;
  int i = g_compoundName.find('(');
  if (i!=-1) 
  {
    g_compoundName=g_compoundName.left(i); // strip category (Obj-C)
  }
  if (g_compoundName.isEmpty())
  {
    g_compoundName=fileName;
  }
  //printf("groupEnterCompound(%s)\n",name);
}

void groupLeaveCompound(const char *,int,const char * /*name*/)
{
  //printf("groupLeaveCompound(%s)\n",name);
  //if (g_memberGroupId!=DOX_NOGROUP)
  //{
  //  warn(fileName,line,"end of compound %s while inside a member group\n",name);
  //}
  g_memberGroupId=DOX_NOGROUP;
  g_memberGroupRelates.resize(0);
  g_memberGroupDocs.resize(0);
  g_compoundName.resize(0);
}

static int findExistingGroup(int &groupId,const MemberGroupInfo *info)
{
  //printf("findExistingGroup %s:%s\n",info->header.data(),info->compoundName.data());
  QIntDictIterator<MemberGroupInfo> di(Doxygen::memGrpInfoDict);
  MemberGroupInfo *mi;
  for (di.toFirst();(mi=di.current());++di)
  {
    if (g_compoundName==mi->compoundName &&  // same file or scope
	!mi->header.isEmpty() &&             // not a nameless group
	qstricmp(mi->header,info->header)==0  // same header name
       )
    {
      //printf("Found it!\n");
      return (int)di.currentKey(); // put the item in this group
    }
  }
  groupId++; // start new group
  return groupId;
}

void openGroup(Entry *e,const char *,int)
{
  //printf("==> openGroup(name=%s,sec=%x) g_autoGroupStack=%d\n",
  //  	e->name.data(),e->section,g_autoGroupStack.count());
  if (e->section==Entry::GROUPDOC_SEC) // auto group
  {
    g_autoGroupStack.push(new Grouping(e->name,e->groupingPri()));
  }
  else // start of a member group
  {
    //printf("    membergroup id=%d %s\n",g_memberGroupId,g_memberGroupHeader.data());
    if (g_memberGroupId==DOX_NOGROUP) // no group started yet
    {
      static int curGroupId=0;

      MemberGroupInfo *info = new MemberGroupInfo;
      info->header = g_memberGroupHeader.stripWhiteSpace();
      info->compoundName = g_compoundName;
      g_memberGroupId = findExistingGroup(curGroupId,info);
      //printf("    use membergroup %d\n",g_memberGroupId);
      Doxygen::memGrpInfoDict.insert(g_memberGroupId,info);

      g_memberGroupRelates = e->relates;
      e->mGrpId = g_memberGroupId;
    }
  }
}

void closeGroup(Entry *e,const char *fileName,int line,bool foundInline)
{
  //printf("==> closeGroup(name=%s,sec=%x,file=%s,line=%d) g_autoGroupStack=%d\n",
  //    e->name.data(),e->section,fileName,line,g_autoGroupStack.count());
  if (g_memberGroupId!=DOX_NOGROUP) // end of member group
  {
    MemberGroupInfo *info=Doxygen::memGrpInfoDict.find(g_memberGroupId);
    if (info) // known group
    {
      info->doc = g_memberGroupDocs;
      info->docFile = fileName;
      info->docLine = line;
    }
    g_memberGroupId=DOX_NOGROUP;
    g_memberGroupRelates.resize(0);
    g_memberGroupDocs.resize(0);
    if (!foundInline) e->mGrpId=DOX_NOGROUP;
    //printf("new group id=%d\n",g_memberGroupId);
  }
  else if (!g_autoGroupStack.isEmpty()) // end of auto group
  {
    Grouping *grp = g_autoGroupStack.pop();
    // see bug577005: we should not remove the last group for e
    if (!foundInline) e->groups->removeLast();
    //printf("Removing %s e=%p\n",grp->groupname.data(),e);
    delete grp;
    if (!foundInline) initGroupInfo(e);
  }
}

void initGroupInfo(Entry *e)
{
  //printf("==> initGroup(id=%d,related=%s,e=%p)\n",g_memberGroupId,
  //       g_memberGroupRelates.data(),e);
  e->mGrpId     = g_memberGroupId;
  e->relates    = g_memberGroupRelates;
  if (!g_autoGroupStack.isEmpty())
  {
    //printf("Appending group %s to %s: count=%d entry=%p\n",
    //	g_autoGroupStack.top()->groupname.data(),
    //	e->name.data(),e->groups->count(),e);
    e->groups->append(new Grouping(*g_autoGroupStack.top()));
  }
}

static void groupAddDocs(Entry *e)
{
  if (e->section==Entry::MEMBERGRP_SEC)
  {
    g_memberGroupDocs=e->brief.stripWhiteSpace();
    e->doc = stripLeadingAndTrailingEmptyLines(e->doc,e->docLine);
    if (!g_memberGroupDocs.isEmpty() && !e->doc.isEmpty())
    {
      g_memberGroupDocs+="\n\n";
    }
    g_memberGroupDocs+=e->doc;
    MemberGroupInfo *info=Doxygen::memGrpInfoDict.find(g_memberGroupId);
    if (info) 
    {
      info->doc = g_memberGroupDocs;
      info->docFile = e->docFile;
      info->docLine = e->docLine;
      info->setRefItems(e->sli);
    }
    e->doc.resize(0);
    e->brief.resize(0);
  }
}

static void handleGuard(const QCString &expr)
{
  CondParser prs;
  bool sectionEnabled=prs.parse(yyFileName,yyLineNr,expr.stripWhiteSpace());
  bool parentEnabled = TRUE;
  if (!guards.isEmpty()) parentEnabled = guards.top()->isEnabled();
  if (parentEnabled)
  {
    if (
        (sectionEnabled && guardType==Guard_If) ||  
        (!sectionEnabled && guardType==Guard_IfNot)
       ) // section is visible
    {
      guards.push(new GuardedSection(TRUE,TRUE));
      enabledSectionFound=TRUE;
      BEGIN( GuardParamEnd );
    }
    else // section is invisible
    {
      if (guardType!=Guard_Skip)
      {
        guards.push(new GuardedSection(FALSE,TRUE));
      }
      BEGIN( SkipGuardedSection );
    }
  }
  else // invisible because of parent
  {
    guards.push(new GuardedSection(FALSE,FALSE));
    BEGIN( SkipGuardedSection );
  }
}



#if !defined(YY_FLEX_SUBMINOR_VERSION) 
//----------------------------------------------------------------------------
extern "C" { // some bogus code to keep the compiler happy
  void commentscanYYdummy() { yy_flex_realloc(0,0); } 
}
#endif


