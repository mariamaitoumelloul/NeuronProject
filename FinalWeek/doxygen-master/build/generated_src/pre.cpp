#line 2 "/home/INTRANET/aitoumel/myfiles/NeuronProject/Week1/doxygen-master/build/generated_src/pre.cpp"

#line 4 "/home/INTRANET/aitoumel/myfiles/NeuronProject/Week1/doxygen-master/build/generated_src/pre.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer preYY_create_buffer
#define yy_delete_buffer preYY_delete_buffer
#define yy_flex_debug preYY_flex_debug
#define yy_init_buffer preYY_init_buffer
#define yy_flush_buffer preYY_flush_buffer
#define yy_load_buffer_state preYY_load_buffer_state
#define yy_switch_to_buffer preYY_switch_to_buffer
#define yyin preYYin
#define yyleng preYYleng
#define yylex preYYlex
#define yylineno preYYlineno
#define yyout preYYout
#define yyrestart preYYrestart
#define yytext preYYtext
#define yywrap preYYwrap
#define yyalloc preYYalloc
#define yyrealloc preYYrealloc
#define yyfree preYYfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE preYYrestart(preYYin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int preYYleng;

extern FILE *preYYin, *preYYout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up preYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up preYYtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via preYYrestart()), so that the user can continue scanning by
	 * just pointing preYYin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when preYYtext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int preYYleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow preYYwrap()'s to do buffer switches
 * instead of setting up a fresh preYYin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void preYYrestart (FILE *input_file  );
void preYY_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE preYY_create_buffer (FILE *file,int size  );
void preYY_delete_buffer (YY_BUFFER_STATE b  );
void preYY_flush_buffer (YY_BUFFER_STATE b  );
void preYYpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void preYYpop_buffer_state (void );

static void preYYensure_buffer_stack (void );
static void preYY_load_buffer_state (void );
static void preYY_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER preYY_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE preYY_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE preYY_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE preYY_scan_bytes (yyconst char *bytes,int len  );

void *preYYalloc (yy_size_t  );
void *preYYrealloc (void *,yy_size_t  );
void preYYfree (void *  );

#define yy_new_buffer preYY_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        preYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            preYY_create_buffer(preYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        preYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            preYY_create_buffer(preYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define preYYwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *preYYin = (FILE *) 0, *preYYout = (FILE *) 0;

typedef int yy_state_type;

extern int preYYlineno;

int preYYlineno = 1;

extern char *preYYtext;
#define yytext_ptr preYYtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up preYYtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	preYYleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 194
#define YY_END_OF_BUFFER 195
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[1447] =
    {   0,
      176,  176,  195,  193,  194,    1,  193,  194,  192,  194,
        3,  193,  194,  193,  194,  193,  194,    2,  193,  194,
        6,  193,  194,    1,    6,  193,  194,    6,  193,  194,
        6,  192,  194,    3,    6,  193,  194,    5,  193,  194,
        6,  193,  194,    6,  193,  194,    6,  193,  194,    6,
      193,  194,    2,    6,  193,  194,   65,  193,  194,    1,
       65,  193,  194,   60,  192,  194,    3,   65,  193,  194,
       65,  193,  194,   65,  193,  194,   62,   65,  193,  194,
       62,   65,  193,  194,   62,   65,  193,  194,   62,   65,
      193,  194,   62,   65,  193,  194,   62,   65,  193,  194,

       62,   65,  193,  194,    2,   65,  193,  194,   89,  193,
      194,    1,   89,  193,  194,   87,  192,  194,    3,   89,
      193,  194,   89,  193,  194,   89,  193,  194,   88,   89,
      193,  194,   88,   89,  193,  194,   88,   89,  193,  194,
        2,   89,  193,  194,   90,   93,  193,  194,    1,   90,
       93,  193,  194,   98,  192,  194,    3,   90,   93,  193,
      194,   92,   93,  193,  194,   93,  193,  194,   93,  193,
      194,   90,   93,  193,  194,    2,   90,   93,  193,  194,
       99,  102,  193,  194,    1,   99,  102,  193,  194,    3,
       99,  102,  193,  194,  101,  102,  193,  194,   99,  102,

      193,  194,   99,  102,  193,  194,  102,  193,  194,    2,
       99,  102,  193,  194,   27,  193,  194,    1,   27,  193,
      194,   28,  192,  194,    3,   27,  193,  194,   16,   27,
      193,  194,   17,   27,  193,  194,   27,  193,  194,   27,
      193,  194,   25,   27,  193,  194,16408,   27,  193,  194,
       25,   27,  193,  194,16408,   11,   27,  193,  194,   12,
       27,  193,  194,    2,   27,  193,  194,   18,  193,  194,
        1,   18,  193,  194,   20,  193,  194,   18,  193,  194,
       18,  193,  194,  193,  194,    2,   18,  193,  194,   21,
      193,  194,    1,   21,  193,  194,   23,  193,  194,   21,

      193,  194,   21,  193,  194,  193,  194,    2,   21,  193,
      194,  193,  194,    1,  193,  194,    3,  193,  194,  193,
      194,  193,  194,    2,  193,  194,  104,  193,  194,  108,
      193,  194,    1,  108,  193,  194,  106,  192,  194,    3,
      108,  193,  194,  108,  193,  194,  108,  193,  194,  108,
      193,  194,    2,  108,  193,  194, 8304,  193,  194,16493,
    16495,16496,  193,  194,  115,  193,  194,  116,  193,  194,
      114,  193,  194,  193,  194,  118,  193,  194,  193,  194,
      188,  193,  194,    1,  188,  193,  194,  176,  188,  193,
      194,  175,  192,  194,    3,  188,  193,  194,  179,  188,

      193,  194,  171,  188,  193,  194,  180,  188,  193,  194,
      188,  193,  194,  188,  193,  194,  178,  188,  193,  194,
      172,  188,  193,  194,  188,  193,  194,    2,  188,  193,
      194,   82,  193,  194,    1,   82,  193,  194,   81,  192,
      194,    3,   82,  193,  194,   82,  193,  194,   82,  193,
      194,    2,   82,  193,  194,   80,   82,  193,  194,    1,
       80,   82,  193,  194,   80,   82,  193,  194,   80,   81,
      192,  194,    3,   80,   82,  193,  194,   79,   82,  193,
      194,   80,   82,  193,  194,   80,   82,  193,  194,    2,
       80,   82,  193,  194,  147,  149,  193,  194,    1,  149,

      193,  194,  148,  192,  194,    3,  147,  149,  193,  194,
      149,  193,  194,  149,  193,  194,  147,  149,  193,  194,
      149,  193,  194,  149,  193,  194,    2,  147,  149,  193,
      194,  147,  149,  193,  194,  149,  193,  194,  149,  193,
      194,  149,  193,  194,   38,   41,  193,  194,    1,   38,
       41,  193,  194,   40,  192,  194,    3,   38,   41,  193,
      194,   41,  193,  194,   38,   41,  193,  194,   38,   41,
      193,  194,    2,   38,   41,  193,  194,  150,  173,  193,
      194,    1,  150,  173,  193,  194,  153,  192,  194,    3,
      150,  173,  193,  194,  173,  193,  194,  150,  173,  193,

      194,  150,  173,  193,  194,  172,  173,  193,  194,  173,
      193,  194,    2,  150,  173,  193,  194,  149,  193,  194,
      149,  193,  194,  149,  193,  194,  147,  149,  193,  194,
      149,  193,  194,  149,  193,  194,  149,  193,  194,  161,
      165,  166,  193,  194,    1,  161,  166,  193,  194,  162,
      192,  194,    3,  161,  165,  166,  193,  194,  165,  166,
      193,  194,  161,  165,  166,  193,  194,  166,  193,  194,
        2,  161,  165,  166,  193,  194,  158,  160,  193,  194,
        1,  160,  193,  194,  159,  192,  194,    3,  158,  160,
      193,  194,  160,  193,  194,  158,  160,  193,  194,  158,

      160,  193,  194,    2,  158,  160,  193,  194,  169,  170,
      193,  194,    1,  170,  193,  194,    3,  169,  170,  193,
      194,  169,  170,  193,  194,  169,  170,  193,  194,    2,
      169,  170,  193,  194,   71,  193,  194,    1,   71,  193,
      194,   72,  192,  194,    3,   71,  193,  194,   71,  193,
      194,   71,  193,  194,   70,   71,  193,  194,   71,  193,
      194,   70,   71,  193,  194,    2,   71,  193,  194,   78,
      193,  194,    1,   78,  193,  194,   76,  192,  194,    3,
       78,  193,  194,   78,  193,  194,   78,  193,  194,   74,
       78,  193,  194,   78,  193,  194,    2,   78,  193,  194,

       77,   78,  193,  194,   75,   78,  193,  194,  186,  193,
      194,    1,  186,  193,  194,    3,  186,  193,  194,  183,
      186,  193,  194,  186,  193,  194,  186,  193,  194,  186,
      193,  194,    2,  186,  193,  194,  187,  193,  194,    1,
      187,  193,  194,    3,  187,  193,  194,  185,  187,  193,
      194,  187,  193,  194,  187,  193,  194,  187,  193,  194,
        2,  187,  193,  194,   66,  193,  194,   64,  193,  194,
        1,   64,  193,  194,    3,   64,  193,  194,   64,  193,
      194,   64,  193,  194,   64,  193,  194,    2,   64,  193,
      194,   37,  193,  194,    1,   37,  193,  194,   35,  192,

      194,    3,   37,  193,  194,   33,   37,  193,  194,   34,
       37,  193,  194,   29,   37,  193,  194,   30,   37,  193,
      194,   37,  193,  194,   37,  193,  194,   36,   37,  193,
      194,    2,   37,  193,  194,   46,  193,  194,    1,   46,
      193,  194,    3,   46,  193,  194,   42,   46,  193,  194,
       43,   46,  193,  194,   46,  193,  194,   46,  193,  194,
       46,  193,  194,    2,   46,  193,  194,  133,  193,  194,
        1,  133,  193,  194,  132,  133,  193,  194,    3,  133,
      193,  194,  133,  193,  194,  133,  193,  194,    2,  133,
      193,  194,  136,  137,  193,  194,    1,  136,  137,  193,

      194,  135,  192,  194,    3,  136,  137,  193,  194,  136,
      193,  194,  136,  193,  194,  136,  137,  193,  194,  136,
      193,  194,    2,  136,  137,  193,  194,  190,  191,    6,
        6,    5,    6,    6,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   97,  190,   95,  191,   88,   88,
       88,   88,   90,   90,   99,   96,   99,  190,   94,   99,
      191,   99,  100, 8216,   25,16408,   26,   25,16408,   18,
       18,  190,   18,  191,   18,   19,   21,   21,  190,   21,
      191,   21,   22,  105,  190,  191,  103,  104,  106,  190,
      191,  107, 8304, 8303, 8301, 8304,16493,16495,16496,  116,

      115,  116,  114,  118,  118,  113,  176,  177,  119,  190,
      120,  191,  172,  174,   80,   80,   79,  147,  121,  123,
      190,  122,  191,  147,  147,   38,   39,   38,  191,   38,
      150,  152,  150,  191,  150,  151,  150,  146,  146,  190,
      147,  161,  165,  161,  165,  163,  165,  190,  164,  165,
      191,  161,  165,  158,  155,  157,  190,  156,  158,  191,
      158,  169,  167,  169,  190,  168,  169,  191,  169,   70,
       67,   70,   74,   73,   75,  182,  190,  181,  191,  184,
       66,   63,   32,  190,   44,  190,   44,  191,   45,  132,
      137,  190,  191,  137,  190,  191,    4,   62,   62,   62,

       62,   62,   54,   62,   62,   62,   62,   62,   62,   97,
       97,  190,   95,   95,  191,   88,   88,   88,   83,   88,
       88,   91,    4,   90,   96,   99,   96,   96,   99,  190,
       94,   99,   94,   94,   99,  191,    4,   99,   15,   15,
       25,16408,   18,  190,   18,  191,    4,   18,   21,  190,
       21,  191,    4,   21,  190,  191,    4,    4,  105,  190,
      191,    4,  117,  177,  119,  119,  190,  120,  120,  191,
      122,  191,    4,  147,  147,  126,  125,   38,  191,    4,
       38,  150,  191,    4,  150,  143,  147,  145,  144,  165,
      190,  165,  191,    4,  161,  165,    4,  165,  154,  158,

      191,    4,  158,  169,  190,  169,  191,    4,  169,   70,
      181,  191,   31,   32,  190,  139,  139,  190,  138,  138,
      191,    4,  137,  189,16391,16391,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   97,  189,   88,
       84,   88,   88,   88,   91,   96,   99,  189,   14,   13,
       14,   25,16408,   18,  189,   21,  189,  189,  189,  110,
      118,  122,  124,  147,  126,  125,  147,  145,  144,  165,
      189,  169,  189,   70,   31,16391,    9, 8199,   62,   62,
       55,   58,   56,   56,   62,   62,   62,   62,   62,   62,
       62,   62,   85,   88,   86,   88,   88,   13,   25,16408,

      128,   70, 8199,    9,   62,   62,   59,   51,   50,   62,
       62,   62,   62,   57,   25,16408,  127,  131,  134,  130,
       70,    8,    9,   49,   53,   52,16431,   48,   10,  129,
       70,    9, 8239,   69,   68,    9, 8239,  142,  141,    9,
      140,    9,   61,    9,    9,    9
    } ;

static yyconst flex_int16_t yy_accept[1340] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    4,    6,    9,   11,   14,
       16,   18,   21,   24,   28,   31,   34,   38,   41,   44,
       47,   50,   53,   57,   60,   64,   67,   71,   74,   77,

       81,   85,   89,   93,   97,  101,  105,  109,  112,  116,
      119,  123,  126,  129,  133,  137,  141,  145,  149,  154,
      157,  162,  166,  169,  172,  176,  181,  185,  190,  195,
      199,  203,  207,  210,  215,  218,  222,  225,  229,  233,
      237,  240,  243,  248,  251,  256,  260,  264,  268,  271,
      275,  278,  281,  284,  286,  290,  293,  297,  300,  303,
      306,  308,  312,  314,  317,  320,  322,  324,  327,  330,
      333,  337,  340,  344,  347,  350,  353,  357,  363,  365,
      368,  371,  374,  376,  379,  381,  384,  388,  392,  395,
      399,  403,  407,  411,  414,  417,  421,  425,  428,  432,

      435,  439,  442,  446,  449,  452,  456,  460,  465,  469,
      473,  478,  482,  486,  490,  495,  499,  503,  506,  511,
      514,  517,  521,  524,  527,  532,  536,  539,  542,  545,
      549,  554,  557,  562,  565,  569,  573,  578,  582,  587,
      590,  595,  598,  602,  606,  610,  613,  618,  621,  624,
      627,  631,  634,  637,  640,  645,  650,  653,  659,  663,
      668,  671,  677,  681,  685,  688,  693,  696,  700,  704,
      709,  713,  717,  722,  726,  730,  735,  738,  742,  745,
      749,  752,  755,  759,  762,  766,  770,  773,  777,  780,
      784,  787,  790,  794,  797,  801,  805,  809,  812,  816,

      820,  824,  827,  830,  833,  837,  840,  844,  848,  852,
      855,  858,  861,  865,  868,  871,  875,  879,  882,  885,
      888,  892,  895,  899,  902,  906,  910,  914,  918,  922,
      925,  928,  932,  936,  939,  943,  947,  951,  955,  958,
      961,  964,  968,  971,  975,  979,  983,  986,  989,  993,
      997, 1002, 1005, 1010, 1013, 1016, 1020, 1023, 1028, 1029,
     1030, 1030, 1031, 1032, 1033, 1034, 1035, 1035, 1035, 1036,
     1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047,
     1049, 1050, 1051, 1052, 1053, 1054, 1054, 1054, 1055, 1056,
     1059, 1062, 1063, 1064, 1064, 1064, 1064, 1065, 1067, 1068,

     1068, 1070, 1071, 1073, 1075, 1076, 1077, 1078, 1080, 1082,
     1083, 1084, 1084, 1085, 1086, 1087, 1087, 1087, 1088, 1089,
     1089, 1090, 1091, 1092, 1092, 1093, 1093, 1094, 1095, 1096,
     1100, 1100, 1100, 1101, 1102, 1103, 1104, 1104, 1105, 1105,
     1106, 1107, 1108, 1108, 1109, 1111, 1113, 1114, 1115, 1115,
     1116, 1117, 1118, 1119, 1120, 1122, 1124, 1125, 1125, 1125,
     1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 1126, 1126,
     1126, 1126, 1126, 1126, 1126, 1127, 1128, 1130, 1131, 1132,
     1132, 1133, 1135, 1136, 1137, 1138, 1139, 1141, 1141, 1141,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1144, 1145, 1146,

     1149, 1152, 1154, 1154, 1154, 1155, 1156, 1158, 1161, 1162,
     1163, 1166, 1169, 1170, 1171, 1172, 1172, 1173, 1174, 1175,
     1176, 1178, 1180, 1181, 1182, 1183, 1183, 1183, 1183, 1185,
     1187, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1195, 1195,
     1196, 1197, 1198, 1198, 1198, 1198, 1198, 1199, 1200, 1201,
     1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211,
     1213, 1214, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1222,
     1223, 1223, 1223, 1225, 1227, 1228, 1231, 1233, 1234, 1237,
     1239, 1240, 1240, 1241, 1241, 1241, 1243, 1245, 1247, 1249,
     1251, 1253, 1255, 1256, 1257, 1258, 1260, 1261, 1262, 1263,

     1263, 1263, 1264, 1264, 1265, 1266, 1268, 1269, 1271, 1273,
     1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275,
     1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275,
     1276, 1276, 1277, 1278, 1280, 1282, 1284, 1286, 1286, 1287,
     1288, 1288, 1289, 1290, 1292, 1294, 1297, 1299, 1299, 1299,
     1299, 1300, 1302, 1304, 1306, 1308, 1310, 1311, 1313, 1313,
     1314, 1314, 1314, 1316, 1317, 1319, 1320, 1322, 1324, 1324,
     1325, 1325, 1325, 1326, 1326, 1327, 1328, 1329, 1330, 1331,
     1332, 1333, 1334, 1335, 1336, 1337, 1338, 1340, 1341, 1343,
     1344, 1345, 1345, 1346, 1346, 1349, 1350, 1352, 1352, 1352,

     1354, 1356, 1358, 1359, 1360, 1361, 1362, 1363, 1363, 1363,
     1363, 1364, 1364, 1364, 1364, 1364, 1364, 1364, 1364, 1364,
     1364, 1364, 1364, 1364, 1364, 1364, 1364, 1364, 1364, 1365,
     1365, 1366, 1367, 1367, 1368, 1368, 1369, 1370, 1372, 1372,
     1372, 1374, 1375, 1375, 1376, 1376, 1376, 1376, 1377, 1377,
     1378, 1378, 1379, 1380, 1381, 1383, 1384, 1385, 1386, 1387,
     1388, 1389, 1390, 1391, 1392, 1393, 1394, 1394, 1395, 1397,
     1398, 1398, 1398, 1399, 1399, 1399, 1401, 1401, 1401, 1401,
     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
     1401, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402,

     1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1403, 1403,
     1403, 1403, 1403, 1403, 1403, 1403, 1404, 1404, 1405, 1405,
     1406, 1407, 1407, 1407, 1408, 1409, 1410, 1411, 1412, 1413,
     1414, 1415, 1415, 1415, 1417, 1417, 1417, 1417, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1419, 1420, 1420,
     1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420,
     1420, 1420, 1420, 1420, 1420, 1420, 1421, 1422, 1422, 1422,
     1422, 1422, 1423, 1423, 1424, 1424, 1425, 1425, 1426, 1427,
     1428, 1429, 1429, 1429, 1429, 1429, 1429, 1430, 1430, 1431,
     1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431,

     1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431,
     1431, 1431, 1431, 1431, 1431, 1431, 1432, 1432, 1432, 1432,
     1432, 1433, 1433, 1434, 1434, 1434, 1434, 1434, 1434, 1434,
     1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434,
     1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434,
     1435, 1436, 1436, 1436, 1436, 1436, 1437, 1437, 1438, 1438,
     1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1439,
     1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1440, 1440,
     1440, 1440, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1442,
     1442, 1442, 1442, 1442, 1442, 1442, 1442, 1442, 1442, 1442,

     1442, 1442, 1443, 1443, 1444, 1444, 1444, 1444, 1444, 1444,
     1444, 1444, 1444, 1444, 1444, 1444, 1444, 1445, 1445, 1445,
     1445, 1445, 1445, 1445, 1445, 1445, 1445, 1445, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1447, 1447, 1447,
     1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447,
     1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447,
     1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447,
     1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447,
     1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447,
     1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447,

     1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447,
     1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447,
     1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447,
     1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447,
     1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447,
     1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447,
     1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447,
     1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447,
     1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447,
     1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447,

     1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447,
     1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447,
     1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447,
     1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447,
     1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447,
     1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447,
     1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447,
     1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447,
     1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447,
     1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447,

     1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447,
     1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447,
     1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447,
     1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    2,    1,    1,    3,    4,
        1,    1,    5,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    6,    7,    8,    9,    1,   10,   11,   12,
       13,   14,    1,   15,   16,   17,   18,   19,   20,   19,
       19,   19,   19,   19,   19,   21,   21,   22,    1,   23,
       24,   25,   26,   27,   28,   28,   29,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       30,   31,   32,    1,   28,   33,   34,   35,   36,   37,

       38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
       48,   49,   43,   50,   51,   52,   53,   54,   43,   55,
       56,   43,   57,   10,   58,   59,    1,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,

       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43
    } ;

static yyconst flex_int32_t yy_meta[61] =
    {   0,
        1,    2,    3,    4,    5,    6,    7,    1,    1,    8,
        9,   10,   11,   12,    1,   11,   13,   14,   15,   15,
       15,    1,   16,   17,   17,    1,   18,   19,   19,    1,
       20,    1,   21,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,    1,    1,   21,    1
    } ;

static yyconst flex_int16_t yy_base[1467] =
    {   0,
        0,    4,    9,   69,  129,    0,  189,    0,  248,  258,
      268,  275,  335,    0,  394,  398,  404,  429,  441,  466,
      526,    0,  585,  589,  622,    0,  678,    0,  738,    0,
      595,  797,  802,  806,  812,  817,  876,  935,  832,  837,
      995,    0,    7,  447,  869,  915,  865, 1054,  926, 1058,
     1118,    0, 1178,    0, 1226,    0, 1281, 1285, 1291, 1316,
     1349,    0, 1348, 1405, 1464, 1523, 1414, 1452, 1583,    0,
        0,    0, 1642, 1701, 3654, 6517, 6517, 6517, 6517,    1,
     3623, 6517, 6517, 6517, 1761, 6517, 6517, 6517,    2, 3622,
       22,    0, 6517, 6517, 6517, 6517, 6517,   10, 3620,    0,

     3599, 3600,    0,    7, 3579, 3581, 6517, 6517, 6517, 6517,
     6517,   15, 3593,    0,   10, 3579, 6517,    0,    0, 6517,
        0, 6517, 3583,   18, 3581,    0,    0,    0,    0, 6517,
       30, 3575,    0,    0, 6517, 6517, 6517, 6517, 6517, 3569,
       38, 3570,  284,   54,  414, 6517, 6517, 6517,    0,    0,
     6517,   47, 3558,    0,    0,    0,    0, 6517,   49, 3557,
        0,    0,   24,  260,  284,  296,  290,  288,    0, 3577,
     3566, 6517, 3556,  250,   13,  252, 3555,  473,  248, 3551,
     3549, 3539, 3524,   20, 3528, 6517, 6517,  275, 6517, 6517,
     6517, 3523, 6517,  284, 3498, 6517,    0,  300, 6517, 6517,

     6517, 6517, 6517,  293, 3489, 6517, 6517, 6517,  309, 6517,
     6517, 6517,  305, 3488, 6517,    0, 6517, 6517,    0, 3492,
      306, 3473, 1795, 6517,    0,  424,  826, 3464, 3437,    0,
        0, 6517,    0, 3474,  308, 3456,    0, 3446, 3441, 6517,
     3435, 3438,  418,  299,    0,  406, 3424, 3431,  313,  294,
      439,  842, 3407, 3370,  395,    0, 6517,  405,  438,  461,
      459,  426,    0, 6517, 6517,    0, 3409,  482, 3391,    0,
        0, 6517,    0,  485, 3387,    0, 6517, 6517, 6517, 6517,
      491, 3385,    0,  477, 3372, 6517, 6517, 6517, 6517, 6517,
      493, 3381,    0, 3402, 6517, 6517,    0, 6517, 6517, 6517,

     6517,  494, 3369,    0, 6517, 6517, 6517, 6517, 6517,  496,
     3368,    0, 6517,    0, 6517, 6517, 6517,  499, 3366,  489,
     6517, 6517, 6517, 6517, 6517, 6517, 3359, 6517, 6517,  501,
     3363, 6517, 6517, 6517, 6517, 6517, 6517, 6517,  502, 3357,
        0, 6517, 6517, 6517,    0, 6517,  504, 3355, 6517,    0,
        0, 6517,    0, 6517,  507, 3335,  571,    0, 3338, 3333,
        0, 6517, 1850, 6517,  598,    0,  611,  278,    0, 3311,
     3296,  550, 3297,  910, 3276, 3288, 3286, 3275, 3293, 3288,
        0,  553, 3267,  942,    0, 3279,  504,  958,    0,  598,
      444, 1075, 6517, 3278,  614,  632, 6517,  849, 6517, 3281,

     1061,    0, 3262, 3249, 1234, 6517,    0, 3251, 3238, 1313,
     6517,  414, 6517,  879,  881, 1905,  635, 6517,  640, 3251,
     6517,  400,  484, 1927, 6517, 3247,  844, 6517, 6517,  920,
     3239,  593, 3238, 3229, 3227, 3219, 3203,  605, 3202,  607,
     6517,  326, 3207, 3195,  286,  635,    0, 6517, 3192, 6517,
      810, 6517,    0, 6517,  628, 3170, 1357, 1917, 3139, 3137,
     3137, 3128, 3128, 3123, 3104, 3113, 3104, 1408, 1414, 3113,
     3080, 1281, 3087, 3060,    0, 6517, 3097, 1437, 3077, 3071,
     6517,  240, 1967, 6517,  845, 6517, 3087, 3052,  902, 1478,
     1481, 3064, 3033, 1295, 3058, 3030,  807,    0,    0, 3074,

     3063, 1997,  795, 3024,    0,  881, 3057, 3048, 1492,    0,
     3047, 3042, 1540,    0, 6517, 3054, 3005,    0, 6517,    0,
     3029, 3023, 6517,    0, 6517, 3023, 3015,  807, 3010, 2996,
     2991, 6517,    0,    0,  904,  908, 1555, 2967, 2946, 2974,
     6517, 6517,  800,  943,  909, 2977, 2932, 2933, 2934, 2925,
     2919, 6517, 2913, 2913, 2893, 2895, 2893, 2886,    0, 2905,
        0,    0, 2877, 2870, 2864, 6517, 2867, 2864, 2883, 6517,
     2880,  939,    0,  936,    0, 1064,  956,    0, 1054,    0,
     6517, 2870, 2869,  973, 1098, 1301, 2856,    0,    0, 2845,
        0,    0, 1071,  965,  966, 6517,  864, 2854, 2848, 1101,

      896, 6517, 2825, 2835, 6517, 2818, 6517, 6517, 2817,    0,
     2785, 2784, 2772, 1060, 2766, 2782, 2776, 2751, 2761, 2750,
      868, 1031, 2749, 2734, 2718, 2714, 2721, 2701, 2704, 1485,
     1297, 2714, 2676,    0,    0, 2703, 2699, 2686, 6517, 1486,
     1461, 2688, 2657, 2697,    0, 1090,    0, 2663, 2657,  977,
     6517,    0,    0, 2684,    0,    0, 2659, 6517, 2685, 6517,
     2683, 1096, 2675, 6517, 2673, 6517, 6517,    0, 2652, 6517,
      965, 2668, 1430, 2663, 1654, 2636, 2626, 1343, 2022, 2628,
     2627, 2619, 2606, 2601, 2606, 2602,    0, 1355, 1067, 2601,
     2599, 2625, 6517, 1324, 1284, 6517, 6517, 1395, 1239, 1649,

        0,    0, 1050, 2631, 6517, 6517, 2613, 1286, 1258, 2587,
     6517, 2573, 2566, 2569, 2575, 2559, 2563, 2568, 2568, 2567,
     1434, 2565, 2554, 2559, 2548, 2536, 2547, 2529, 1294,  595,
     2543, 2515, 1629, 1345, 1387, 2540, 2511,    0, 2522, 2529,
        0, 2515, 2549, 6517, 1482, 2511, 2532, 1659, 1682, 1686,
     1690, 6517, 2507, 2500, 6517, 6517, 1329, 2498, 2082, 1439,
     2495, 2471, 2479, 2478, 2507, 6517, 1455, 2470,    0, 1520,
     2496, 2495, 6517, 2493, 1717, 1910, 2460, 2459, 2452, 1571,
     2448, 2431, 2437, 2425, 2424, 2430, 2414, 1693, 1646, 2400,
     1720, 2390, 2389, 2379, 2381, 2379, 2391, 2376, 2368, 2365,

     2360, 2369, 2368, 2349, 2361, 2352, 1730, 2355, 2367, 2363,
     2320, 1509, 2140, 2143, 1108, 1525, 1943, 2146, 2154, 2324,
     2352, 1506, 2314, 6517, 1530, 6517, 1557, 1536, 2303, 2333,
     2325, 2284, 1733, 2166, 1931, 2310, 2260, 1737, 2257, 2255,
     2242, 2249, 2239, 2251, 2232, 2214, 1748, 6517, 1751, 2223,
     2211, 2210, 2202, 2203, 2195, 2185, 2190, 2197, 1377, 2182,
     2174, 2178, 2177, 2152, 2154, 1754, 2159, 2144, 2176, 2179,
     1245, 6517, 2182, 2190, 2202, 2187, 1822, 1569, 6517, 1707,
     6517, 1253, 1832, 1956, 2210, 2159, 6517, 2119, 2172, 2126,
     2125, 2119, 2113, 2110, 2109, 2100, 1974, 1960, 1843, 1973,

     1974, 1959, 1949, 1933, 1931, 1939, 1918, 1931, 1929, 1904,
     1906, 1894, 1884, 1892, 1872, 1668, 1882, 2205, 2216, 2227,
     2238, 2241,    0, 1795, 1972, 2249, 1830, 1772, 1921, 1785,
     1787, 1715, 1702, 1690, 1675, 1684, 1662, 1669,    0, 1644,
     1643, 1631, 1619, 1607, 1590, 1535, 1530, 1536, 1515, 1689,
     6517,    0, 2261, 2265, 2272, 2277, 2285,    0, 1521, 1990,
     2297, 2307, 1507,    0, 1498, 1502, 1485, 1474, 6517, 1451,
     1458, 1449, 1438, 1440, 1435, 1427, 1427, 6517, 2322, 2327,
     2316, 2343, 2347, 1406, 2002, 2354, 2288, 1380, 6517, 1368,
     1367, 1328, 1320, 1315, 1301, 1197, 1199, 1041, 2367, 2372,

     2383, 2387, 2392, 6517, 2312, 2403, 2378, 1049, 1023, 1029,
     1018,  943,  919, 2414, 2417, 2428, 2442, 2448, 2451, 2454,
     2438,  842,  818,  592, 2464, 2475, 2478, 2486, 2498, 2510,
     2521, 2489,  543, 2514, 2526, 2537, 2546, 2553, 2549, 2560,
     2576,  385, 2582, 2585, 2588, 2608, 2618, 2622, 2625, 2640,
     2643, 2646, 2656, 2659, 2665, 2675, 2680, 2683, 2695, 2702,
     2705, 2715, 2721, 2724, 2734, 2738, 2741, 2751, 2754, 2764,
     2760, 2770, 2780, 2774, 2785, 2797, 2790, 2802, 2808, 2819,
     2822, 2836, 2825, 2841, 2852, 2846, 2857, 2863, 2868, 2874,
     2880, 2885, 2892, 2895, 2907, 2910, 2914, 2924, 2927, 2931,

     2941, 2944, 2950, 2955, 2962, 2965, 2975, 2979, 2982, 2992,
     2996, 2999, 3010, 3013, 3016, 3026, 3030, 3033, 3043, 3047,
     3050, 3060, 3065, 3075, 3071, 3081, 3091, 3101, 3106, 3109,
     3119, 3122, 3126, 3132, 3137, 3140, 3150, 3156, 3160, 3166,
     3170, 3174, 3187, 3190, 3196, 3201, 3206, 3209, 3221, 3224,
     3230, 3235, 3242, 3245, 3256, 3259, 3265, 3270, 3276, 3279,
     3290, 3293, 3296, 3306, 3311, 3314, 3325, 3328, 3334, 3339,
     3345, 3355, 3351, 3361, 3365, 3371, 3375, 3381, 3394, 3397,
     3411, 3400, 3421, 3427, 3416, 3432, 3438, 3443, 3449, 3455,
     3460, 3466, 3476, 3471, 3482, 3486, 3498, 3501, 3504, 3515,

     3518, 3522, 3532, 3535, 3541, 3546, 3553, 3559, 3564, 3570,
     3573, 3583, 3587, 3590, 3601, 3605, 3608, 3619, 3622, 3632,
     3628, 3638, 3648, 3658, 3663, 3666, 3676, 3679, 3683, 3689,
     3694, 3697, 3707, 3713, 3717, 3723, 3727, 3731, 3744, 3747,
     3753, 3758,   56, 3763, 3768, 3774, 3779, 3786, 3791, 3799,
     3804, 3809, 3814, 3823, 3819, 3829, 3834, 3837, 3841, 3846,
        5, 3849, 3854, 3859, 3864, 3869, 3874, 3878, 3884, 3892,
     3896, 3904, 3909, 3914, 3919, 3924, 3929, 3933, 3939, 3942,
     3947, 3951, 3954, 3959, 3964, 3969, 3974, 3979, 3984, 3988,
     3997, 4002, 4009, 4014, 4019, 4024, 4029, 4034, 4039, 4043,

     4046, 4052, 4057, 4060, 4064, 4069, 4074, 4079, 4084, 4089,
     4094, 4101, 4107, 4115, 4119, 4124, 4129, 4134, 4139, 4144,
     4149, 4152, 4156, 4162, 4165, 4170, 4174, 4179, 4184, 4189,
     4194, 4199, 4207, 4211, 4220, 4225, 4229, 6517, 4286, 4307,
     4328, 4349, 4370, 4391, 4412, 4433, 4454, 4475, 4496, 4517,
     4538, 4559, 4580, 4601, 4622, 4643, 4664, 4685, 1345, 1411,
     1663, 4706, 4727, 4748, 4769, 4790, 4809, 4828, 4849, 4870,
     4891, 4912, 4931, 4950, 4969, 4987, 1694, 5006, 5027, 5046,
     5067, 5088, 5109, 5130, 5151, 5172, 1729, 1808, 1824, 5193,
     1922, 5214, 5235, 5254, 5273, 5289, 1951, 1967, 5306, 5327,

     1982, 5348, 5369, 5390, 5411, 5432, 5453, 5474, 5493, 5512,
     5533, 5554, 5573, 5592, 5611, 5629, 1997, 5648, 5669, 5688,
     5709, 5730, 5751, 5772, 5793, 5814, 2145, 2148, 2236, 2318,
     5835, 5856, 5875, 5894, 5915, 5936, 2324, 5957, 5978, 2341,
     5999, 6020, 6041, 6062, 6083, 6104, 6125, 6144, 6163, 6184,
     6205, 6226, 6247, 6268, 6289, 6310, 6331, 6352, 6373, 6394,
     6413, 6432, 2348, 6453, 6474, 6495
    } ;

static yyconst flex_int16_t yy_def[1467] =
    {   0,
     1339, 1339, 1339, 1338, 1338,    5, 1338,    7, 1340, 1340,
     1341, 1341, 1338,   13, 1342, 1342, 1343, 1343, 1344, 1344,
     1338,   21, 1345, 1345,   21,   25, 1338,   27, 1338,   29,
     1346, 1347, 1339, 1339, 1339, 1339, 1348, 1348, 1349, 1349,
     1338,   41,   38,   38, 1350, 1350, 1351, 1351, 1352, 1352,
     1338,   51, 1338,   53,   53,   55, 1353, 1353, 1354, 1354,
       25,   61, 1355, 1355, 1356, 1356, 1357, 1357, 1338,   69,
       69,   69, 1358, 1358, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1359, 1359, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1360,

     1360, 1360, 1360, 1360, 1360, 1360, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1361, 1361, 1361, 1338, 1362, 1362, 1338,
     1362, 1338, 1363, 1338, 1362, 1362, 1364, 1364, 1364, 1338,
     1364, 1364, 1365, 1364, 1338, 1338, 1338, 1338, 1338, 1366,
     1338, 1338, 1367, 1338, 1367, 1338, 1338, 1338, 1368, 1368,
     1338, 1368, 1368, 1369, 1368, 1370, 1370, 1338, 1370, 1370,
     1371, 1370, 1372, 1372, 1372, 1372, 1372, 1372, 1373, 1374,
     1374, 1338, 1374, 1374, 1374, 1338, 1374, 1375, 1338, 1338,
     1338, 1338, 1338, 1376, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1377, 1338, 1338, 1338,

     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1378, 1338,
     1338, 1338, 1338, 1338, 1338, 1379, 1338, 1338, 1379, 1338,
     1338, 1379, 1338, 1338, 1379, 1379, 1338, 1338, 1338, 1380,
     1380, 1338, 1380, 1338, 1380, 1380, 1380, 1381, 1381, 1338,
     1381, 1338, 1381, 1381, 1377, 1381, 1381, 1338, 1338, 1338,
     1379, 1338, 1338, 1338, 1382, 1383, 1338, 1382, 1384, 1382,
     1338, 1382, 1385, 1338, 1338, 1385, 1338, 1385, 1385, 1385,
     1386, 1338, 1386, 1386, 1386, 1386, 1338, 1338, 1338, 1338,
     1338, 1338, 1387, 1338, 1387, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1388, 1338, 1338, 1338, 1389, 1338, 1338, 1338,

     1338, 1338, 1338, 1390, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1390, 1338, 1391, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1392, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1393, 1338, 1338, 1338, 1394, 1338, 1338, 1338, 1338, 1395,
     1395, 1338, 1395, 1338, 1338, 1395, 1338, 1395, 1338, 1338,
     1396, 1338, 1338, 1338, 1397, 1397, 1397, 1397, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1399, 1400,
     1401, 1401, 1401, 1401, 1402, 1403, 1404, 1402, 1405, 1406,
     1407, 1405, 1338, 1338, 1408, 1338, 1338, 1409, 1338, 1338,

     1409, 1410, 1410, 1410, 1410, 1338, 1411, 1411, 1411, 1411,
     1338, 1412, 1338, 1412, 1412, 1412, 1338, 1338, 1413, 1414,
     1338, 1414, 1414, 1414, 1338, 1338, 1338, 1338, 1338, 1415,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1416,
     1338, 1338, 1338, 1338, 1338, 1338, 1417, 1338, 1338, 1338,
     1418, 1338, 1419, 1338, 1338, 1338, 1419, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1419, 1338, 1338,
     1338, 1338, 1338, 1338, 1420, 1338, 1420, 1420, 1421, 1421,
     1338, 1421, 1421, 1338, 1421, 1338, 1338, 1338, 1338, 1419,
     1338, 1338, 1338, 1338, 1338, 1338, 1422, 1423, 1424, 1424,

     1424, 1422, 1338, 1338, 1425, 1338, 1338, 1425, 1425, 1426,
     1426, 1426, 1426, 1427, 1338, 1338, 1427, 1428, 1338, 1429,
     1338, 1338, 1338, 1430, 1338, 1338, 1431, 1432, 1338, 1338,
     1338, 1338, 1433, 1434, 1338, 1338, 1434, 1338, 1338, 1338,
     1338, 1338, 1338, 1435, 1338, 1436, 1437, 1437, 1437, 1437,
     1437, 1338, 1437, 1437, 1437, 1437, 1437, 1437, 1438, 1438,
     1439, 1439, 1440, 1440, 1440, 1338, 1440, 1440, 1441, 1338,
     1338, 1338, 1442, 1443, 1444, 1443, 1445, 1446, 1445, 1447,
     1338, 1338, 1338, 1338, 1338, 1448, 1449, 1449, 1449, 1450,
     1450, 1450, 1451, 1451, 1451, 1338, 1452, 1452, 1452, 1338,

     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1419,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1419,
     1338, 1338, 1338, 1453, 1453, 1454, 1454, 1338, 1338, 1419,
     1338, 1338, 1338, 1424, 1424, 1422, 1424, 1338, 1338, 1338,
     1338, 1425, 1425, 1426, 1426, 1426, 1427, 1338, 1455, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1434, 1338, 1338,
     1435, 1456, 1338, 1436, 1338, 1437, 1437, 1437, 1338, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1438, 1440, 1440, 1440,
     1440, 1457, 1338, 1338, 1443, 1338, 1338, 1338, 1338, 1448,

     1449, 1450, 1451, 1452, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1419, 1338,
     1338, 1338, 1338, 1419, 1338, 1338, 1338, 1424, 1338, 1338,
     1426, 1427, 1458, 1338, 1338, 1338, 1456, 1459, 1338, 1338,
     1338, 1338, 1437, 1437, 1338, 1338, 1338, 1437, 1338, 1437,
     1437, 1437, 1437, 1437, 1437, 1338, 1338, 1440, 1440, 1440,
     1338, 1338, 1338, 1338, 1338, 1448, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,

     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1427, 1338, 1338,
     1338, 1459, 1459, 1459, 1338, 1459, 1338, 1338, 1338, 1437,
     1437, 1338, 1338, 1338, 1338, 1338, 1437, 1437, 1437, 1437,
     1338, 1338, 1338, 1448, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1460, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1427, 1338, 1459, 1459,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1461,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1462, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1460, 1338, 1338,

     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1427, 1338, 1459, 1459, 1338,
     1338, 1338, 1463, 1338, 1338, 1338, 1338, 1462, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1464, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1465, 1459, 1459, 1338, 1338, 1338, 1463, 1338, 1338,
     1338, 1338, 1338, 1466, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1459, 1459,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1459, 1459,

     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1459, 1459, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1459, 1459, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1459, 1459, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1459, 1459, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,

     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,

     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,

     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338,    0, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,

     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338
    } ;

static yyconst flex_int16_t yy_nxt[6578] =
    {   0,
     1338,   77,  417,   78,   79,   77, 1338,   78,   79,  216,
       77,  418,   78,   79,  359,  359,  421,   80,  360,  360,
      248,   80,  438,  359,  249,   81,   80,  360,  379,   81,
      413,  379,  380,  250,   81,  380,  439,  250,  424,  224,
      367,  367,  367,  390,  372,  374,  373,  391,  413,  367,
      367,  359,  375,  376,  382,  360,  383,  399,  400,   82,
      403,  887,  408,   82,  404,  224,  409,  397,   82,   83,
       84,   85,   86,   87,   83,   83,   88,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   89,   83,   83,   83,
       83,   83,   83,   83,   90,   83,   91,   91,   83,   83,

       83,   83,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   83,   83,   83,   93,   94,
       95,   94,   96,   97,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   98,   94,   94,   94,
       94,   94,   94,   94,   99,   94,  100,  100,   94,   94,
       94,   94,  100,  100,  101,  102,  103,  100,  100,  100,
      104,  100,  100,  100,  100,  100,  100,  105,  100,  100,
      100,  106,  100,  100,  100,   94,   94,   94,  107,  108,
      109,  108,  110,  111,  108,  108,  108,  108,  108,  108,

      108,  108,  108,  108,  108,  108,  112,  108,  108,  108,
      108,  108,  108,  108,  113,  108,  114,  114,  108,  108,
      108,  108,  114,  114,  114,  114,  115,  114,  114,  114,
      116,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  108,  108,  108,  117,  119,
      432,  120,  121,  421,  122,  425,  426,  636,  123,  119,
      433,  120,  121,  422,  122,  124,  413,  423,  123,  128,
      480,   78,  129,  125,  130,  124,  128,  442,   78,  129,
      545,  130,  443,  125,  413,  131,  396,  396,  396,  546,
      413,  605,  131,  132,  413,  397,  413,  445,  133,  606,

      132,  446,  413,  448,  449,  133,  379,  126,  413,  414,
      380,  451,  413,  415,  413,  416,  452,  126,  379,  455,
      413,  359,  380,  456,  483,  477,  487,  134,  442,  480,
      360,  488,  489,  443,  134,  135,  136,  135,  137,  138,
      135,  139,  135,  135,  135,  140,  135,  135,  135,  135,
      135,  135,  141,  135,  135,  135,  135,  135,  135,  135,
      142,  135,  143,  143,  135,  144,  135,  135,  143,  143,
      143,  143,  145,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  146,  147,  135,  148,  150,  498,   78,   79,  150,

      151,   78,   79,  421,  151,  157,  498,   78,   79,  484,
      485,  152,  499,  597,  158,  152,  396,  396,  396,  153,
      413,  159,  499,  153,  154,  397,  468,  498,  154,  160,
      157,  359,   78,   79,  161,  482,  480,  469,  413,  158,
      639,  490,  164,  499,   78,  165,  159,   76,  480,  251,
      578,  500,  491,  155,  160,  501,  470,  155,  166,  161,
      252,  579,  498,  162,  249,   76,  167,  164,  401,   78,
      165,  492,   76,  250,  578,  427,  428,  250,  499,  253,
      515,  516,  471,  166,  429,  503,  502,  421,  162,  503,
       76,  167,  525,  526,  504,  507,  461,  493,  511,  508,

      168,  598,  512,  431,  359,  254,  359,  521,  360,  359,
      360,  522,  359,  360,  529,  530,  360,  359,  360,  531,
      535,  360,  572,  572,  536,  168,   76,   77,   76,   78,
       79,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   80,   76,   76,   76,   76,   76,   76,
       76,   81,   76,  169,  169,   76,   76,   76,   76,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,   76,   76,   76,   82,  171, 1042,  172,  173,
      171,  549,  172,  173,  563,  432,  201,  538,  202,  203,

      550,  538,  174,  564,  575,  433,  174,  438,  539,  438,
      175,  576,  204,  543,  175,  176,  367,  367,  367,  176,
      205,  439,  544,  439,  583,  367,  367,  470,  575,  367,
      367,  367,  584,  584,  585,  585,  585,  417,  367,  367,
      607,  540,  417,  397,  177,  454,  418,  639,  177,  178,
      178,  418,  608,  471,  206,  178,  178,  178,  178,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  178,
      178,  178,  178,  178,  178,  178,  178,  178,   76,   77,
      179,   78,   79,   76,   76,   76,   76,   76,   76,  180,
      181,   76,  182,   76,  183,   80,   76,   76,   76,   76,

       76,   76,   76,   81,   76,  184,  184,   76,  185,   76,
       76,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  184,   76,   76,   76,   82,  186,  187,
      188,  189,  190,  186,  191,  192,  186,  186,  193,  186,
      186,  186,  186,  186,  186,  194,  186,  186,  186,  186,
      186,  186,  186,  195,  196,  197,  197,  186,  198,  186,
      186,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  186,  186,  186,  199,  208,  209,

      210,  211,  543,   77,  212,   78,   79,   77,  498,   78,
       79,  544,  451,   77,  213,   78,   79,  452,   77,   80,
       78,   79,  214,   80,  499,  662,  662,   81,  472,   80,
      648,   81,  613,  231,   80,  232,  233,   81,  231,  469,
      232,  233,   81,  454,  494,  234,  427,  428,  484,  235,
      234,  396,  396,  396,  235,  491,  215,  236,  470,  486,
      397,   82,  236,  600, 1033,   82,  264,  421,  265,  266,
      256,   82,  257,  258,  492,  480,   82,  217,  267,  218,
      219,  704,  268,  650,  471,  413,  259,  413,  651,  220,
      269,  237,  593,  221,  260,  261,  237,  780,  594,  261,

      493,  222,  223,  413,  718,  413,  223,  429,  224,  664,
      639,  545,  552,  666,  719,  552,  256,  665,  257,  258,
      546,  552,  427,  428,  270,  667,  431,  272,  262,  257,
      273,  429,  259,  639,  224,  225,  217,  226,  218,  219,
      260,  261,  575,  274,  566,  261,  553,  566,  227,  693,
      431,  275,  221,  566,  672,  673,  554,  694,  694,  639,
      222,  223,  578,  573,  639,  223,  575,  228,  542,  573,
      573,  413,  413,  573,  262,  542,  672,  673,  567,  650,
      573,  573,  573,  697,  651,  276,  578, 1024,  568,  413,
      413,  698,  698,  229,  225,  238,  239,  238,  240,  241,

      238,  238,  238,  238,  238,  238,  238,  238,  242,  238,
      238,  238,  243,  238,  238,  238,  238,  238,  238,  238,
      244,  238,  245,  245,  238,  246,  238,  238,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  238,  238,  238,  247,  264,  413,  265,  266,  272,
      578,  257,  273,  396,  396,  396,  720,  267,  711,  767,
      575,  268,  397,  639,  413,  274, 1023,  413,  721,  269,
      580,  695,  721,  275,  578,  580,  580,  580,  703,  711,
      580,  498,  580, 1022,  575,  413,  639,  580,  580,  580,

      699,  699,  699,  705,  705,  705,  744,  499,  768,  397,
      871,  872,  586,  270,  745,  745,  711,  276,  277,  278,
      277,  279,  280,  277,  277,  277,  277,  277,  277,  277,
      277,  277,  277,  277,  277,  281,  277,  277,  277,  277,
      277,  277,  277,  282,  277,  283,  283,  277,  284,  277,
      277,  283,  283,  283,  285,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  283,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  277,  277,  277,  286,  287,  288,
      287,  289,  290,  287,  287,  287,  287,  287,  287,  287,
      287,  287,  287,  287,  287,  291,  287,  287,  287,  287,

      287,  287,  287,  292,  287,  293,  293,  287,  294,  287,
      287,  293,  293,  293,  293,  293,  293,  293,  293,  293,
      293,  293,  293,  293,  293,  293,  293,  293,  293,  293,
      293,  293,  293,  293,  287,  287,  287,  295,  296,  589,
     1013,  775,  775,  775,  589,  589,  589,  871,  872,  589,
      397,  589,  639,  297,  297,  882,  589,  589,  589,  297,
      297,  297,  297,  297,  297,  297,  297,  297,  297,  297,
      297,  297,  297,  297,  297,  297,  297,  297,  297,  297,
      297,  297,  299,  631,   78,  300,  299,  301,   78,  300,
      575,  301,  307,  779,   78,  308,  729,  641,  302,  730,

      924,  309,  302,  396,  396,  396,  303,  469,  310,  780,
      303,  304,  397,  470,  575,  304,  311,  307,  592,   78,
      308,  312,  777,  542,  592,  592,  309,  492,  592,  470,
      592,  822,  778,  310,  570,  592,  592,  592,  700,  471,
      305,  311,  772,  772,  305,  755,  312,  734,  755,  316,
      313,   96,  317,  493,  755,  471,  639,  766,  491,  368,
      766, 1012,  610,  368, 1011,  318,  766,  610,  610,  610,
      823, 1010,  610,  319,  542,  313,  314,  314,  320,  610,
      610,  610,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,

      314,  314,  314,  314,  314,  773,  316,  321,   96,  317,
      630, 1009,  909,  774,  774,  335,  472,   78,  336,  492,
      337,  469,  318,  780,  338,  369, 1008,  469,  639,  369,
      319,  339,  749,  750,  751,  320,  791,  791,  791,  340,
      470,  825,  635, 1004,  341,  493,  470,  635,  635,  635,
      826,  752,  635,  335,  635,   78,  336,  767,  337,  635,
      635,  635,  338,  735,  321,  323,  471,  324,  325,  339,
      326,  998,  471,  342,  327,  328,  329,  340,  997,  996,
      640,  330,  341,  494,  995,  994,  752,  729,  734,  331,
      332,  491,  660,  492,  491,  993,  832,  653,  469,  491,

      810,  810,  653,  653,  653,  992,  721,  653,  822,  653,
      492,  342, 1338,  492,  653,  653,  653,  470,  492,  493,
      991,  815,  566,  333,  323,  566,  324,  325, 1338,  326,
      780,  566,  825,  327,  328,  329,  493,  815,  880,  493,
      330,  826,  881,  471,  493,  656,  990,  823,  331,  332,
      656,  656,  656,  780,  988,  656,  984,  656,  881,  878,
      542,  977,  656,  656,  656,  668,  668,  668,  879,  976,
      668,  878,  542,  838,  838,  838,  975,  668,  668,  668,
      879,  974,  333,  343,  344,  345,   78,  346,  345,  343,
      343,  343,  345,  343,  345,  345,  343,  343,  345,  345,

      347,  345,  345,  345,  343,  343,  343,  343,  348,  343,
      345,  345,  343,  343,  343,  343,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  343,
      343,  343,  349,  351,  973,  352,  353,  354,  847,  848,
      849,  396,  396,  396,  972,  354,  751,  751,  751,  355,
      397,  813,  750,  814,  799,  800,  971,  356,  357,  801,
      950,  815,  357,  802,  803,  752,  721,  381,  804,  951,
      816,  381,  805,  806,  817,  818,  819,  970,  819,  819,
      819,  950,  819,  819,  819,  791,  791,  791,  776,  721,

      951,  358,  351,  752,  352,  353,  354,  752,  447,  880,
      752,  752,  447,  881,  354,  816,  968,  780,  355,  833,
      833,  833,  791,  791,  791,  967,  356,  357,  397,  881,
      780,  357,  866,  848,  849,  884,  884,  884,  752,  838,
      838,  838,  752,  514,  397,  780,  752,  514,  966,  846,
      847,  848,  849,  849,  848,  849,  866,  848,  849,  965,
      358,  362,  362,  363,  362,  362,  362,  362,  364,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  365,  365,
      362,  362,  362,  362,  366,  366,  366,  366,  366,  366,

      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  362,  362,  362,
      362,  458,  518,  964,  755,  458,  518,  755,  963,  929,
      459,  460,  461,  755,  766,  462,  962,  766,  520,  463,
      464,  959,  520,  766,  465,  791,  791,  791,  466,  467,
      362,  362,  363,  362,  362,  362,  362,  364,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  365,  365,  362,
      362,  362,  362,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,

      366,  366,  366,  366,  366,  366,  362,  362,  362,  362,
      595,  413,  396,  396,  396,  595,  595,  595,  952,  949,
      595,  397,  595,  838,  838,  838,  948,  595,  595,  596,
      421,  947,  599,  838,  838,  838,  524,  599,  599,  599,
      524,  946,  599,  945,  599,  873,  874,  875,  944,  599,
      599,  599,  611,  612,  613,  614,  834,  615,  925,  925,
      925,  616,  617,  943,  752,  368,  618,  397,  639,  368,
      619,  620,  637,  721,  960,  960,  960,  637,  637,  637,
      942,  369,  637,  397,  637,  369,  721,  888,  721,  637,
      637,  637,  985,  985,  985,  941,  381,  480,  498,  752,

      381,  397,  646,  940, 1005, 1005, 1005,  646,  646,  646,
      939,  447,  646,  397,  647,  447,  938,  899,  937,  646,
      646,  646,  756,  756,  757,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      369,  369,  369,  756,  756,  756,  756,  756,  756,  369,
      369,  756,  756,  756,  756,  369,  369,  369,  369,  369,
      369,  369,  369,  758,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  756,  756,
      756,  756,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,

      369,  369,  369,  824,  824,  824,  824,  824,  824,  369,
      369,  824,  824,  824,  824,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  824,  824,
      824,  824,  869,  818,  870,  870,  819,  870,  875,  875,
      875,  936,  815,  935,  934,  815,  875,  875,  875,  514,
      933,  816,  518,  514,  816,  932,  518,  752,  885,  885,
      885,  931,  886,  930,  889,  752,  929,  397,  918,  874,
      919,  919,  875,  919,  920,  921,  922,  927,  815,  876,
      917,  815,  922,  922,  922,  916,  816,  816,  915,  816,

      816,  914,  752,  752,  922,  922,  922,  953,  921,  954,
      752,  752,  926,  926,  926,  913,  886,  815,  954,  922,
      954,  397,  887,  752,  912,  911,  816,  910,  815,  955,
      956,  957,  816,  908,  907,  816,  906,  816,  752,  905,
      957,  957,  957,  957,  957,  957,  752,  904,  752,  903,
      520,  961,  961,  961,  520,  886,  902,  901,  752,  752,
      397,  816,  752,  979,  956,  980,  887,  980,  957,  980,
      900,  899,  816,  815,  981,  982,  983,  815,  897,  983,
      983,  983,  816,  752,  896,  895,  816,  983,  983,  983,
     1007, 1007, 1007,  752,  752,  894,  893,  752,  752,  986,

      986,  986,  892,  886,  891,  887,  752,  890,  397,  987,
      987,  987,  889,  886, 1019, 1019, 1019,  816, 1001, 1002,
     1003,  816,  883,  397,  999,  982, 1000,  831,  752, 1000,
      983, 1000,  524,  752,  815,  882,  524,  752,  369,  815,
      828,  752,  369,  816,  887, 1003, 1003, 1003,  816, 1003,
     1003, 1003,  877,  887,  876,  381, 1006, 1006, 1006,  381,
      886,  371,  958,  887,  752,  397,  958,  868,  752, 1014,
     1002, 1015,  752,  660, 1015, 1003, 1015,  660,  816,  815,
     1021, 1021, 1021,  816,  815, 1016, 1017, 1018,  816, 1018,
     1018, 1018,  867,  816, 1018, 1018, 1018,  865,  864,  752,

      863,  862,  861,  752,  752, 1020, 1020, 1020,  752,  886,
      887,  860,  859,  752,  397,  858, 1025, 1017, 1026, 1026,
     1018, 1026,  857,  816,  856,  855,  815,  854,  816,  815,
     1027, 1028, 1029,  853,  887,  816,  852,  851,  816,  752,
     1032, 1032, 1032,  752, 1029, 1029, 1029,  850,  752,  752,
     1029, 1029, 1029, 1030, 1030, 1030, 1031, 1031, 1031,  887,
      886,  845,  397,  752,  844,  397, 1034, 1028, 1035,  752,
      816,  843,  842,  816,  841,  840,  815, 1035, 1029, 1035,
     1036, 1037, 1038,  839,  752,  816,  837,  815, 1038, 1038,
     1038, 1041, 1041, 1041,  887,  836,  816,  835,  752,  752,

     1038, 1038, 1038,  773,  752,  570,  570,  752,  688,  831,
      887,  830, 1039, 1039, 1039,  829, 1043, 1037, 1044,  752,
      816,  397,  828, 1040, 1040, 1040,  815,  886, 1044, 1038,
     1044,  816,  397,  827,  752,  816,  678,  821,  815, 1036,
     1037, 1038,  752,  820,  748,  887,  811,  816, 1038, 1038,
     1038, 1045, 1045, 1045,  752, 1038, 1038, 1038,  752,  660,
      397,  808, 1046, 1046, 1046,  807,  886,  752,  778,  737,
      816,  397,  736,  732,  752,  731,  798,  887, 1047, 1047,
     1047,  797,  816,  796, 1043, 1037, 1044, 1044, 1038, 1044,
     1048, 1048, 1048,  752,  815,  795,  794,  815,  793,  397,

      792,  790,  752,  816,  789,  788,  816,  787,  786,  752,
     1049, 1049, 1049,  785,  886,  784,  887,  783,  782,  397,
     1050, 1050, 1050,  781, 1051, 1051, 1051, 1052, 1052, 1052,
      707,  886,  887,  397,  421,  570,  397,  770,  816,  769,
      765,  816, 1053, 1053, 1053, 1054, 1054, 1054, 1055, 1055,
     1055,  764,  886,  763,  397,  762,  761,  397, 1056, 1056,
     1056, 1057, 1057, 1057,  887,  760,  759, 1058, 1058, 1058,
      397,  886,  754,  753,  887,  675,  397, 1059, 1059, 1059,
      748,  887, 1060, 1060, 1060, 1061, 1061, 1061,  746,  886,
      670,  397,  670,  660,  397,  660,  887, 1062, 1062, 1062,

      742,  741,  887,  740, 1063, 1063, 1063, 1064, 1064, 1064,
      739,  886,  887,  397,  738,  737,  397, 1065, 1065, 1065,
      736,  887,  733, 1066, 1066, 1066, 1067, 1067, 1067,  480,
      886,  887,  397,  480,  732,  397, 1068, 1068, 1068,  887,
     1069, 1069, 1069, 1070, 1070, 1070,  731,  886,  728,  397,
      727,  887,  397, 1071, 1071, 1071, 1072, 1072, 1072,  726,
      725,  887, 1074, 1074, 1074,  397, 1073, 1073, 1073,  724,
      886,  887, 1075, 1075, 1075,  397, 1077, 1077, 1077,  723,
      887,  397, 1076, 1076, 1076,  722,  886, 1078, 1078, 1078,
      887,  397, 1080, 1080, 1080,  717,  397,  887,  716, 1079,

     1079, 1079,  715,  886, 1081, 1081, 1081,  887,  397,  714,
     1082, 1082, 1082,  397,  886,  713,  887,  712,  710,  397,
      887, 1083, 1083, 1083, 1084, 1084, 1084, 1086, 1086, 1086,
      887,  709,  708,  397,  707,  670,  887,  604, 1085, 1085,
     1085,  706,  886, 1087, 1087, 1087,  887,  397, 1089, 1089,
     1089,  421,  397,  887, 1088, 1088, 1088,  421,  886, 1090,
     1090, 1090,  702,  397,  887, 1091, 1091, 1091,  397,  886,
     1092, 1092, 1092,  701,  397,  887, 1093, 1093, 1093,  696,
      696,  887, 1094, 1094, 1094,  397,  886, 1095, 1095, 1095,
      570,  397,  887,  570, 1096, 1096, 1096, 1097, 1097, 1097,

      567,  886,  887,  397,  691,  690,  397,  689,  887, 1098,
     1098, 1098, 1099, 1099, 1099,  688, 1100, 1100, 1100,  887,
      886,  397,  687,  686,  887,  397, 1101, 1101, 1101, 1102,
     1102, 1102,  685, 1103, 1103, 1103,  887,  886,  397,  684,
      683,  887,  397, 1104, 1104, 1104, 1105, 1105, 1105,  682,
      681,  887, 1106, 1106, 1106,  397,  886, 1107, 1107, 1107,
      680,  397,  679,  887, 1108, 1108, 1108, 1109, 1109, 1109,
      887,  886,  678,  397,  677,  676,  397, 1110, 1110, 1110,
      887, 1111, 1111, 1111, 1112, 1112, 1112,  887,  886,  675,
      397,  670,  669,  397, 1113, 1113, 1113,  887, 1114, 1114,

     1114, 1115, 1115, 1115,  613,  886,  887,  397,  541,  540,
      397,  887, 1116, 1116, 1116, 1117, 1117, 1117, 1118, 1118,
     1118,  887,  886,  663,  397,  660,  525,  397, 1119, 1119,
     1119,  887, 1120, 1120, 1120, 1121, 1121, 1121,  887,  886,
      658,  397,  540,  657,  397, 1122, 1122, 1122,  887, 1123,
     1123, 1123, 1124, 1124, 1124,  887,  886,  515,  397,  655,
      654,  397, 1125, 1125, 1125,  652,  887, 1126, 1126, 1126,
      540,  649,  887, 1128, 1128, 1128,  397, 1127, 1127, 1127,
      645,  886,  887, 1129, 1129, 1129,  397,  644,  643,  887,
      642,  496,  397, 1130, 1130, 1130,  495,  886,  638,  887,

      540,  480,  397, 1131, 1131, 1131,  887,  480, 1132, 1132,
     1132, 1133, 1133, 1133,  634,  886,  887,  397,  633,  632,
      397, 1134, 1134, 1134, 1135, 1135, 1135,  887, 1136, 1136,
     1136,  887,  886,  397, 1137, 1137, 1137,  397,  474, 1138,
     1138, 1138, 1139, 1139, 1139,  473,  886,  887,  397,  629,
      628,  397, 1140, 1140, 1140,  627,  626,  887, 1141, 1141,
     1141,  625, 1142, 1142, 1142,  887,  886,  397, 1143, 1143,
     1143,  397, 1144, 1144, 1144,  887, 1145, 1145, 1145,  624,
      886,  397,  887,  623,  622,  397,  621,  609,  887, 1146,
     1146, 1146, 1147, 1147, 1147,  448,  887,  604, 1148, 1148,

     1148,  397,  886, 1149, 1149, 1149,  887,  397, 1150, 1150,
     1150, 1151, 1151, 1151,  444,  886,  887,  397,  603,  602,
      397,  436,  887, 1152, 1152, 1152, 1153, 1153, 1153,  435,
      887,  434, 1154, 1154, 1154,  397,  886, 1155, 1155, 1155,
      435,  397,  601,  887, 1156, 1156, 1156, 1157, 1157, 1157,
      425,  886,  887,  397,  421,  591,  397,  887, 1158, 1158,
     1158, 1159, 1159, 1159,  590,  887,  588, 1160, 1160, 1160,
      397,  886, 1161, 1161, 1161,  587,  397,  887, 1162, 1162,
     1162, 1163, 1163, 1163,  399,  886,  887,  397,  581,  570,
      397,  887, 1164, 1164, 1164, 1165, 1165, 1165, 1166, 1166,

     1166,  887,  886,  565,  397,  562,  560,  397, 1167, 1167,
     1167,  558,  887, 1168, 1168, 1168, 1169, 1169, 1169,  557,
      886,  887,  397,  556,  555,  397,  887, 1170, 1170, 1170,
     1171, 1171, 1171,  551,  548,  887, 1172, 1172, 1172,  397,
      886, 1173, 1173, 1173,  547,  397,  887, 1174, 1174, 1174,
      541,  540,  887, 1176, 1176, 1176,  397, 1175, 1175, 1175,
      537,  886,  887, 1177, 1177, 1177,  397, 1178, 1178, 1178,
      887,  886,  397, 1179, 1179, 1179,  397, 1180, 1180, 1180,
      361,  887,  361, 1181, 1181, 1181,  397,  886,  361,  528,
      887,  361,  397,  361,  361,  887, 1182, 1182, 1182, 1183,

     1183, 1183, 1185, 1185, 1185,  519,  361,  887,  397,  517,
      361,  887,  513, 1184, 1184, 1184,  509,  886, 1188, 1188,
     1188,  887,  397, 1186, 1186, 1186,  506,  887,  496, 1187,
     1187, 1187,  397,  886, 1189, 1189, 1189,  887,  397,  495,
     1190, 1190, 1190,  397,  886, 1191, 1191, 1191,  486,  397,
      887, 1192, 1192, 1192,  480,  481,  887, 1193, 1193, 1193,
      397,  886, 1194, 1194, 1194,  480,  397,  887, 1195, 1195,
     1195,  480,  887, 1197, 1197, 1197,  480,  397, 1196, 1196,
     1196,  478,  886,  887, 1198, 1198, 1198,  397, 1199, 1199,
     1199,  476,  886,  397,  887,  474,  473,  397,  457,  887,

     1200, 1200, 1200, 1201, 1201, 1201, 1202, 1202, 1202,  454,
      886,  887,  397,  361,  361,  397,  887, 1203, 1203, 1203,
     1204, 1204, 1204,  361, 1205, 1205, 1205,  887,  886,  397,
      444,  441,  887,  397, 1206, 1206, 1206, 1207, 1207, 1207,
      437,  436,  887, 1208, 1208, 1208,  397,  886, 1209, 1209,
     1209,  435,  397,  434,  887, 1210, 1210, 1210,  421,  421,
      887, 1211, 1211, 1211,  397,  886, 1212, 1212, 1212,  421,
      397,  887, 1213, 1213, 1213, 1214, 1214, 1214,  887,  886,
      421,  397,  410,  405,  397, 1215, 1215, 1215,  887, 1216,
     1216, 1216, 1217, 1217, 1217,  361,  886,  887,  397,  395,

      392,  397,  887, 1218, 1218, 1218,  388, 1219, 1219, 1219,
     1220, 1220, 1220,  387,  886,  887,  397,  384,  361,  397,
      887, 1221, 1221, 1221, 1222, 1222, 1222,  378,  377,  887,
     1224, 1224, 1224,  397, 1223, 1223, 1223,  371,  886,  887,
     1225, 1225, 1225,  397,  370,  361,  887,  361,  361,  397,
     1226, 1226, 1226, 1338,  886, 1338, 1338,  887, 1338,  397,
     1227, 1227, 1227, 1338,  887, 1228, 1228, 1228, 1229, 1229,
     1229, 1338,  886, 1338,  397,  887, 1338,  397, 1230, 1230,
     1230, 1231, 1231, 1231,  887, 1232, 1232, 1232,  887,  886,
      397, 1233, 1233, 1233,  397, 1338, 1234, 1234, 1234, 1235,

     1235, 1235, 1338,  886,  887,  397, 1338, 1338,  397, 1236,
     1236, 1236, 1338, 1338,  887, 1237, 1237, 1237, 1338, 1238,
     1238, 1238,  887,  886,  397, 1239, 1239, 1239,  397, 1240,
     1240, 1240,  887, 1241, 1241, 1241, 1338,  886,  397,  887,
     1338, 1338,  397, 1338, 1338,  887, 1242, 1242, 1242, 1243,
     1243, 1243, 1338,  887, 1338, 1244, 1244, 1244,  397,  886,
     1245, 1245, 1245,  887,  397, 1246, 1246, 1246, 1338,  886,
     1247, 1247, 1247,  887,  397, 1338, 1248, 1248, 1248,  887,
      886, 1249, 1249, 1249, 1338,  397, 1338,  887, 1250, 1250,
     1250, 1338,  886, 1251, 1251, 1251, 1338,  397, 1338, 1338,

      887, 1252, 1252, 1252, 1338,  886, 1253, 1253, 1253,  887,
      397, 1254, 1254, 1254,  887,  886, 1255, 1255, 1255,  887,
      397, 1257, 1257, 1257,  887, 1256, 1256, 1256, 1338,  886,
      887, 1258, 1258, 1258,  397,  887, 1259, 1259, 1259, 1260,
     1260, 1260,  887, 1261, 1261, 1261, 1338,  887, 1262, 1262,
     1262, 1263, 1263, 1263, 1338,  887, 1264, 1264, 1264, 1338,
      887, 1265, 1265, 1265, 1338,  887, 1266, 1266, 1266, 1338,
      887, 1267, 1267, 1267, 1338,  887, 1268, 1268, 1268,  887,
     1269, 1269, 1269, 1338, 1338,  887, 1270, 1270, 1270, 1338,
      887, 1338, 1338,  887, 1271, 1271, 1271,  887, 1272, 1272,

     1272, 1338,  887, 1338, 1338,  887, 1273, 1273, 1273, 1338,
      887, 1274, 1274, 1274, 1338,  887, 1275, 1275, 1275, 1338,
      887, 1276, 1276, 1276, 1338,  887, 1277, 1277, 1277, 1338,
      887, 1278, 1278, 1278,  887, 1279, 1279, 1279, 1338, 1338,
      887, 1280, 1280, 1280, 1281, 1281, 1281, 1338,  887, 1282,
     1282, 1282,  887, 1283, 1283, 1283, 1284, 1284, 1284, 1338,
      887, 1285, 1285, 1285, 1338,  887, 1286, 1286, 1286, 1338,
      887, 1287, 1287, 1287, 1338,  887, 1288, 1288, 1288, 1338,
      887, 1289, 1289, 1289, 1338,  887, 1290, 1290, 1290,  887,
     1291, 1291, 1291, 1338, 1338,  887, 1338, 1338,  887, 1292,

     1292, 1292, 1338,  887, 1293, 1293, 1293,  887, 1338, 1338,
      887, 1294, 1294, 1294, 1338,  887, 1295, 1295, 1295, 1338,
      887, 1296, 1296, 1296, 1338,  887, 1297, 1297, 1297, 1338,
      887, 1298, 1298, 1298, 1338,  887, 1299, 1299, 1299, 1338,
      887, 1300, 1300, 1300,  887, 1301, 1301, 1301, 1302, 1302,
     1302, 1338, 1338,  887, 1303, 1303, 1303, 1338,  887, 1304,
     1304, 1304, 1305, 1305, 1305,  887, 1306, 1306, 1306, 1338,
      887, 1307, 1307, 1307, 1338,  887, 1308, 1308, 1308, 1338,
      887, 1309, 1309, 1309, 1338,  887, 1310, 1310, 1310, 1338,
      887, 1311, 1311, 1311, 1338,  887, 1312, 1312, 1312,  887,

     1338, 1338,  887, 1313, 1313, 1313, 1338, 1338,  887, 1314,
     1314, 1314, 1338,  887, 1338, 1338,  887, 1315, 1315, 1315,
      887, 1316, 1316, 1316, 1338,  887, 1317, 1317, 1317, 1338,
      887, 1318, 1318, 1318, 1338,  887, 1319, 1319, 1319, 1338,
      887, 1320, 1320, 1320, 1338,  887, 1321, 1321, 1321, 1338,
      887, 1322, 1322, 1322, 1323, 1323, 1323,  887, 1324, 1324,
     1324, 1338, 1338,  887, 1325, 1325, 1325, 1326, 1326, 1326,
     1338,  887, 1327, 1327, 1327,  887, 1328, 1328, 1328, 1338,
      887, 1329, 1329, 1329, 1338,  887, 1330, 1330, 1330, 1338,
      887, 1331, 1331, 1331, 1338,  887, 1332, 1332, 1332, 1338,

      887, 1333, 1333, 1333, 1338,  887, 1338, 1338,  887, 1334,
     1334, 1334,  887, 1335, 1335, 1335, 1338, 1338,  887, 1338,
     1338,  887, 1336, 1336, 1336, 1338,  887, 1337, 1337, 1337,
      887, 1261, 1261, 1261, 1338,  887, 1338, 1338, 1338, 1338,
      887, 1338, 1338, 1338, 1338,  887, 1338, 1338, 1338, 1338,
      887, 1338, 1338, 1338, 1338,  887, 1338, 1338, 1338, 1338,
     1338, 1338, 1338,  887, 1338, 1338, 1338,  887, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338,  887, 1338, 1338, 1338,
     1338,  887, 1338, 1338, 1338,  887,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,

       76,   76,   76,   76,   76,   76,   76,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
      156,  163,  163,  163,  163,  163,  163,  163,  163,  163,

      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
      163,  163,  170,  170,  170,  170,  170,  170,  170,  170,
      170,  170,  170,  170,  170,  170,  170,  170,  170,  170,
      170,  170,  170,  200,  200,  200,  200,  200,  200,  200,
      200,  200,  200,  200,  200,  200,  200,  200,  200,  200,
      200,  200,  200,  200,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  230,  230,  230,  230,

      230,  230,  230,  230,  230,  230,  230,  230,  230,  230,
      230,  230,  230,  230,  230,  230,  230,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  263,  263,
      263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
      263,  263,  263,  263,  263,  263,  263,  263,  263,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      298,  298,  298,  298,  298,  298,  298,  298,  298,  298,
      298,  298,  298,  298,  298,  298,  298,  298,  298,  298,

      298,  306,  306,  306,  306,  306,  306,  306,  306,  306,
      306,  306,  306,  306,  306,  306,  306,  306,  306,  306,
      306,  306,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  322,  322,  334,  334,  334,  334,  334,  334,
      334,  334,  334,  334,  334,  334,  334,  334,  334,  334,
      334,  334,  334,  334,  334,  350,  350,  350,  350,  350,
      350,  350,  350,  350,  350,  350,  350,  350,  350,  350,

      350,  350,  350,  350,  350,  350,  385,  385,  385, 1338,
      385,  385, 1338,  385, 1338,  385,  385,  385,  385, 1338,
      385,  385,  385,  385,  385,  385,  385,  386,  386,  386,
     1338,  386,  386,  386,  386, 1338,  386,  386,  386,  386,
      386,  386,  386,  386,  386,  386,  386,  386,  389,  389,
      389, 1338,  389,  389, 1338,  389,  389,  389,  389,  389,
      389,  389,  389,  389,  389,  389,  389, 1338,  389,  393,
      393,  393, 1338,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      394,  394,  394, 1338,  394,  394,  394,  394,  394,  394,

      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  398,  398,  398, 1338, 1338, 1338, 1338,  398, 1338,
     1338, 1338, 1338,  398, 1338, 1338, 1338,  398,  402,  402,
      402, 1338, 1338,  402, 1338,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  402, 1338,  402,  406,
      406,  406, 1338,  406,  406,  406,  406,  406,  406,  406,
      406,  406,  406,  406,  406,  406,  406,  406,  406,  406,
      407,  407,  407, 1338, 1338,  407,  407,  407, 1338,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407, 1338,
      407,  411,  411,  411, 1338,  411,  411,  411,  411,  411,

      411,  411,  411,  411,  411,  411,  411,  411,  411,  411,
      411,  411,  412,  412,  412, 1338,  412,  412,  412,  412,
      412,  412,  412,  412,  412,  412,  412,  412,  412,  412,
      412,  412,  412,  419, 1338, 1338, 1338, 1338, 1338, 1338,
      419, 1338, 1338, 1338, 1338,  419, 1338, 1338, 1338,  419,
      420,  420,  420,  420,  420,  420,  420,  420,  420,  420,
      420,  420,  420,  420,  420,  420,  420,  420,  420, 1338,
      420,  430,  430, 1338, 1338, 1338, 1338, 1338,  430, 1338,
     1338, 1338, 1338,  430, 1338, 1338, 1338,  430,  430,  440,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,  440,

     1338,  440, 1338, 1338, 1338,  440,  450,  450,  450,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  450,  450,
      450,  450,  450,  450,  450,  450,  450,  453, 1338,  453,
     1338,  453,  453,  453,  453,  453,  453,  453, 1338,  453,
     1338,  453,  453,  453, 1338,  453,  475,  475,  475, 1338,
      475,  475,  475,  475,  475,  475,  475, 1338,  475,  475,
      475,  475,  475,  475,  475,  475,  475,  479,  479,  479,
     1338,  479,  479,  479,  479,  479,  479,  479, 1338,  479,
      479,  479,  479,  479,  479, 1338,  479,  479,  497,  497,
      497, 1338,  497,  497,  497,  497,  497,  497,  497,  497,

      497,  497,  497,  497,  497, 1338,  497, 1338,  497,  498,
      498,  498, 1338,  498,  498,  498,  498,  498,  498,  498,
      498,  498, 1338,  498,  498,  498, 1338,  498, 1338,  498,
      499, 1338,  499, 1338,  499,  499,  499,  499,  499,  499,
      499,  499,  499,  499,  499,  499,  499, 1338,  499, 1338,
      499,  505, 1338,  505, 1338,  505,  505,  505,  505,  505,
      505,  505, 1338,  505,  505,  505,  505,  505,  505,  505,
      505,  505,  510, 1338,  510, 1338,  510,  510,  510,  510,
      510,  510,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  510,  523,  523,  523, 1338,  523,  523,  523,

      523,  523,  523,  523,  523,  523,  523,  523,  523,  523,
      523,  523,  523,  523,  527,  527,  527, 1338,  527,  527,
      527,  527, 1338,  527,  527,  527,  527,  527,  527,  527,
      527,  527,  527,  527,  527,  532,  532,  532, 1338,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  533, 1338, 1338,  533,
     1338,  533, 1338,  533,  533, 1338,  533, 1338,  533, 1338,
     1338, 1338,  533,  534,  534,  534, 1338,  534, 1338,  534,
      534,  534,  534,  534, 1338,  534, 1338,  534,  534,  534,
     1338,  534, 1338,  534,  542, 1338, 1338,  542,  542,  542,

     1338, 1338,  542, 1338,  542,  542,  559,  559,  559, 1338,
      559,  559,  559,  559,  559,  559,  559,  559,  559,  559,
      559,  559,  559,  559,  559,  559,  559,  561,  561,  561,
     1338,  561,  561,  561,  561,  561,  561,  561,  561,  561,
      561,  561,  561,  561,  561,  561,  561,  561,  385,  385,
      385, 1338,  385,  385, 1338,  385, 1338,  385,  385,  385,
      385, 1338,  385,  385,  385,  385,  385,  385,  385,  569,
      569,  569, 1338,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569, 1338,  569,
      571,  571,  571, 1338,  571,  571,  571,  571,  571,  571,

      571,  571,  571,  571,  571,  571,  571,  571,  571,  571,
      571,  389,  389,  389, 1338,  389,  389, 1338,  389,  389,
      389,  389,  389,  389,  389,  389,  389,  389,  389,  389,
     1338,  389,  574,  574,  574, 1338,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  577,  577,  577, 1338,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  582,  582,  582, 1338,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  398,  398,  398, 1338, 1338,

     1338, 1338,  398, 1338, 1338, 1338, 1338,  398, 1338, 1338,
     1338,  398,  402,  402,  402, 1338, 1338,  402, 1338,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      402, 1338,  402,  407,  407,  407, 1338, 1338,  407,  407,
      407, 1338,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407, 1338,  407,  412,  412,  412, 1338,  412,  412,
      412,  412,  412,  412,  412,  412,  412,  412,  412,  412,
      412,  412,  412,  412,  412,  419, 1338, 1338, 1338, 1338,
     1338, 1338,  419, 1338, 1338, 1338, 1338,  419, 1338, 1338,
     1338,  419,  420,  420,  420,  420,  420,  420,  420,  420,

      420,  420,  420,  420,  420,  420,  420,  420,  420,  420,
      420, 1338,  420,  430,  430, 1338, 1338, 1338, 1338, 1338,
      430, 1338, 1338, 1338, 1338,  430, 1338, 1338, 1338,  430,
      430,  440, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338,  440, 1338,  440, 1338, 1338, 1338,  440,  450,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  450,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  450,  453,
     1338,  453, 1338,  453,  453,  453,  453,  453,  453,  453,
     1338,  453, 1338,  453,  453,  453, 1338,  453,  475,  475,
      475, 1338,  475,  475,  475,  475,  475,  475,  475, 1338,

      475,  475,  475,  475,  475,  475,  475,  475,  475,  479,
      479,  479, 1338,  479,  479,  479,  479,  479,  479,  479,
     1338,  479,  479,  479,  479,  479,  479, 1338,  479,  479,
      497,  497,  497, 1338,  497,  497,  497,  497,  497,  497,
      497,  497,  497,  497,  497,  497,  497, 1338,  497, 1338,
      497,  498,  498,  498, 1338,  498,  498,  498,  498,  498,
      498,  498,  498,  498, 1338,  498,  498,  498, 1338,  498,
     1338,  498,  499, 1338,  499, 1338,  499,  499,  499,  499,
      499,  499,  499,  499,  499,  499,  499,  499,  499, 1338,
      499, 1338,  499,  505, 1338,  505, 1338,  505,  505,  505,

      505,  505,  505,  505, 1338,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  510, 1338,  510, 1338,  510,  510,
      510,  510,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  510,  510,  510,  659,  659,  659, 1338,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  659,  659, 1338,  659,  661,  661,  661, 1338,
      661,  661,  661,  661,  661,  661,  661,  661,  661,  661,
      661,  661,  661,  661,  661,  661,  661,  533, 1338, 1338,
      533, 1338,  533, 1338,  533,  533, 1338,  533, 1338,  533,
     1338, 1338, 1338,  533,  534,  534,  534, 1338,  534, 1338,

      534,  534,  534,  534,  534, 1338,  534, 1338,  534,  534,
      534, 1338,  534, 1338,  534,  671,  671,  671, 1338,  671,
      671,  671,  671,  671,  671,  671,  671,  671,  671,  671,
      671,  671,  671,  671,  671,  671,  674,  674,  674, 1338,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  559,  559,  559,
     1338,  559,  559,  559,  559,  559,  559,  559,  559,  559,
      559,  559,  559,  559,  559,  559,  559,  559,  561,  561,
      561, 1338,  561,  561,  561,  561,  561,  561,  561,  561,
      561,  561,  561,  561,  561,  561,  561,  561,  561,  692,

      692,  692, 1338,  692,  692,  692,  692,  692,  692,  692,
      692,  692,  692,  692,  692,  692,  692,  692, 1338,  692,
      385,  385,  385, 1338,  385,  385, 1338,  385, 1338,  385,
      385,  385,  385, 1338,  385,  385,  385,  385,  385,  385,
      385,  574,  574,  574, 1338,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  575,  575,  575, 1338,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  577,  577,  577, 1338,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,

      577,  577,  577,  577,  578,  578,  578, 1338,  578,  578,
      578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
      578,  578,  578,  578,  578,  389,  389,  389, 1338,  389,
      389, 1338,  389,  389,  389,  389,  389,  389,  389,  389,
      389,  389,  389,  389, 1338,  389,  398,  398,  398, 1338,
     1338, 1338, 1338,  398, 1338, 1338, 1338, 1338,  398, 1338,
     1338, 1338,  398,  402,  402,  402, 1338, 1338,  402, 1338,
      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      402,  402, 1338,  402,  407,  407,  407, 1338, 1338,  407,
      407,  407, 1338,  407,  407,  407,  407,  407,  407,  407,

      407,  407,  407, 1338,  407,  412,  412,  412, 1338,  412,
      412,  412,  412,  412,  412,  412,  412,  412,  412,  412,
      412,  412,  412,  412,  412,  412,  420,  420,  420,  420,
      420,  420,  420,  420,  420,  420,  420,  420,  420,  420,
      420,  420,  420,  420,  420, 1338,  420,  475,  475,  475,
     1338,  475,  475,  475,  475,  475,  475,  475, 1338,  475,
      475,  475,  475,  475,  475,  475,  475,  475,  479,  479,
      479, 1338,  479,  479,  479,  479,  479,  479,  479, 1338,
      479,  479,  479,  479,  479,  479, 1338,  479,  479,  743,
      743,  743, 1338,  743,  743,  743,  743,  743,  743,  743,

      743,  743,  743,  743,  743,  743,  743,  743, 1338,  743,
      747,  747,  747, 1338,  747,  747,  747,  747,  747,  747,
      747,  747,  747,  747,  747,  747,  747,  747,  747,  747,
      747,  771,  771,  771, 1338,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,
     1338,  771,  809,  809,  809, 1338,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809, 1338,  809,  812,  812,  812,  812,  812,  812,  812,
      812,  812,  812,  812,  812,  812,  812,  812,  812,  812,
      812,  812,  812,  812,  898,  898,  898,  898,  898,  898,

      898,  898,  898,  898,  898,  898,  898,  898,  898,  898,
      898,  898,  898,  898,  898,  923, 1338, 1338, 1338,  923,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,  923, 1338,
     1338,  923,  928,  928,  928,  928,  928,  928,  928,  928,
      928,  928,  928,  928,  928,  928,  928,  928,  928,  928,
      928,  928,  928,  969,  969,  969,  969,  969,  969,  969,
      969,  969,  969,  969,  969,  969,  969, 1338,  969,  969,
      969, 1338,  969,  969,  978,  978,  978,  978,  978,  978,
      978,  978,  978,  978,  978,  978,  978,  978, 1338,  978,
      978,  978, 1338,  978,  978,  989,  989,  989,  989,  989,

      989,  989,  989,  989,  989,  989,  989,  989,  989, 1338,
      989,  989,  989, 1338,  989,  989,   75, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338
    } ;

static yyconst flex_int16_t yy_chk[6578] =
    {   0,
        0,    1,  169,    1,    1,    2,    0,    2,    2,   43,
        3,  169,    3,    3,   80,   89,  175,    1,   80,   89,
       43,    2,  184,   98,   43,    1,    3,   98,  112,    2,
      163,  124,  112,   43,    3,  124,  184,   43,  175,   43,
       91,   91,   91,  131,  103,  104,  103,  131,  163,   91,
       91,  141,  104,  104,  115,  141,  115,  144,  144,    1,
      152, 1261,  159,    2,  152,   43,  159, 1243,    3,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,

        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,

        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    9,
      179,    9,    9,  174,    9,  176,  176,  482,    9,   10,
      179,   10,   10,  174,   10,    9,  164,  174,   10,   11,
      482,   11,   11,    9,   11,   10,   12,  188,   12,   12,
      368,   12,  188,   10,  164,   11,  143,  143,  143,  368,
      165,  445,   12,   11,  168,  143,  167,  194,   11,  445,

       12,  194,  166,  198,  198,   12,  204,    9,  165,  166,
      204,  209,  168,  166,  167,  167,  209,   10,  213,  221,
      166,  235,  213,  221,  244,  235,  249,   11,  442,  244,
      249,  250,  250,  442,   12,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   15,  255,   15,   15,   16,

       15,   16,   16,  422,   16,   17,  258,   17,   17,  246,
      246,   15,  255,  422,   17,   16,  145,  145,  145,   15,
      412,   17,  258,   16,   15,  145,  226,  262,   16,   17,
       18,  243,   18,   18,   17,  243,  246,  226,  412,   18,
     1042,  251,   19,  262,   19,   19,   18,   19,  243,   44,
      391,  259,  251,   15,   18,  259,  226,   16,   19,   18,
       44,  391,  260,   17,   44,   19,   19,   20,  145,   20,
       20,  251,   20,   44,  391,  178,  178,   44,  260,   44,
      284,  284,  226,   20,  178,  261,  260,  423,   18,  261,
       20,   20,  320,  320,  261,  268,  261,  251,  274,  268,

       19,  423,  274,  178,  281,   44,  291,  302,  281,  310,
      291,  302,  318,  310,  330,  339,  318,  347,  330,  339,
      355,  347,  387,  387,  355,   20,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   23, 1033,   23,   23,
       24,  372,   24,   24,  382,  432,   31,  357,   31,   31,

      372,  357,   23,  382,  390,  432,   24,  438,  357,  440,
       23,  390,   31,  367,   24,   23,  365,  365,  365,   24,
       31,  438,  367,  440,  395,  365,  365,  730,  390,  367,
      367,  367,  395,  395,  396,  396,  396,  417,  367,  367,
      446,  455,  419,  396,   23,  455,  417, 1024,   24,   25,
       25,  419,  446,  730,   31,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,

       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   32,   32,

       32,   32,  543,   33,   32,   33,   33,   34,  497,   34,
       34,  543,  451,   35,   32,   35,   35,  451,   36,   33,
       36,   36,   32,   34,  497,  528,  528,   33,  227,   35,
      503,   34,  503,   39,   36,   39,   39,   35,   40,  227,
       40,   40,   36,  227,  252,   39,  427,  427,  485,   39,
       40,  398,  398,  398,   40,  252,   32,   39,  227,  252,
      398,   33,   40,  427, 1023,   34,   47,  597,   47,   47,
       45,   35,   45,   45,  252,  485,   36,   37,   47,   37,
       37,  597,   47,  506,  227,  414,   45,  415,  506,   37,
       47,   39,  414,   37,   45,   45,   40, 1022,  415,   45,

      252,   37,   37,  414,  621,  415,   37,  601,   37,  535,
      489,  545,  374,  536,  621,  374,   46,  535,   46,   46,
      545,  374,  430,  430,   47,  536,  601,   49,   45,   49,
       49,  430,   46,  489,   37,   37,   38,   38,   38,   38,
       46,   46,  574,   49,  384,   46,  374,  384,   38,  572,
      430,   49,   38,  384,  544,  544,  374,  572,  572,  489,
       38,   38,  577,  388, 1013,   38,  574,   38,  388,  388,
      388,  594,  595,  388,   46,  388,  671,  671,  384,  650,
      388,  388,  388,  584,  650,   49,  577, 1012,  384,  594,
      595,  584,  584,   38,   38,   41,   41,   41,   41,   41,

       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   48,  703,   48,   48,   50,
      579,   50,   50,  401,  401,  401,  622,   48,  614,  689,
      576,   48,  401, 1011,  703,   50, 1010,  593, 1009,   48,
      392,  576,  622,   50,  579,  392,  392,  392,  593,  614,
      392,  646,  392, 1008,  576,  593,  998,  392,  392,  392,

      585,  585,  585,  600,  600,  600,  662,  646,  689,  585,
      815,  815,  401,   48,  662,  662,  614,   50,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,

       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   55,  405,
      997,  699,  699,  699,  405,  405,  405,  871,  871,  405,
      699,  405,  996,   55,   55,  882,  405,  405,  405,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   57,  472,   57,   57,   58,   57,   58,   58,
      695,   58,   59,  709,   59,   59,  729,  494,   57,  631,

      882,   59,   58,  586,  586,  586,   57,  729,   59,  709,
       58,   57,  586,  472,  695,   58,   59,   60,  410,   60,
       60,   59,  708,  410,  410,  410,   60,  494,  410,  631,
      410,  757,  708,   60,  694,  410,  410,  410,  586,  472,
       57,   60,  694,  694,   58,  678,   60,  734,  678,   63,
       59,   63,   63,  494,  678,  631,  995,  688,  734, 1359,
      688,  994,  457, 1359,  993,   63,  688,  457,  457,  457,
      757,  992,  457,   63,  457,   60,   61,   61,   63,  457,
      457,  457,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,

       61,   61,   61,   61,   61,  698,   64,   63,   64,   64,
      468,  991,  859,  698,  698,   67,  469,   67,   67,  735,
       67,  468,   64,  990,   67, 1360,  988,  469,  859, 1360,
       64,   67,  673,  673,  673,   64,  721,  721,  721,   67,
      468,  760,  478,  984,   67,  735,  469,  478,  478,  478,
      760,  673,  478,   68,  478,   68,   68,  767,   68,  478,
      478,  478,   68,  641,   64,   65,  468,   65,   65,   68,
       65,  977,  469,   67,   65,   65,   65,   68,  976,  975,
      490,   65,   68,  491,  974,  973,  673,  630,  640,   65,
       65,  490,  745,  641,  491,  972,  767,  509,  630,  640,

      745,  745,  509,  509,  509,  971,  970,  509,  822,  509,
      490,   68,  812,  491,  509,  509,  509,  630,  640,  641,
      968,  812,  770,   65,   66,  770,   66,   66,  816,   66,
      967,  770,  825,   66,   66,   66,  490,  816,  828,  491,
       66,  825,  828,  630,  640,  513,  966,  822,   66,   66,
      513,  513,  513,  965,  963,  513,  959,  513,  828,  827,
      537,  949,  513,  513,  513,  537,  537,  537,  827,  948,
      537,  878,  537,  780,  780,  780,  947,  537,  537,  537,
      878,  946,   66,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,

       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   73,  945,   73,   73,   73,  789,  789,
      789,  700,  700,  700,  944,   73,  675,  675,  675,   73,
      700,  748,  748,  748,  733,  733,  943,   73,   73,  733,
      916,  748,   73,  733,  733,  675,  942, 1361,  733,  916,
      748, 1361,  733,  733,  749,  749,  749,  941,  750,  750,
      750,  950,  751,  751,  751,  788,  788,  788,  700,  940,

      950,   73,   74,  749,   74,   74,   74,  750, 1377,  880,
      675,  751, 1377,  880,   74,  748,  938,  937,   74,  775,
      775,  775,  791,  791,  791,  936,   74,   74,  775,  880,
      935,   74,  807,  807,  807,  833,  833,  833,  749,  838,
      838,  838,  750, 1387,  833,  934,  751, 1387,  933,  788,
      847,  847,  847,  849,  849,  849,  866,  866,  866,  932,
       74,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,

       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,  223, 1388,  931,  877,  223, 1388,  877,  930,  928,
      223,  223,  223,  877,  883,  223,  927,  883, 1389,  223,
      223,  924, 1389,  883,  223,  899,  899,  899,  223,  223,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,

      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      416,  416,  776,  776,  776,  416,  416,  416,  917,  915,
      416,  776,  416,  929,  929,  929,  914,  416,  416,  416,
      424,  913,  424,  835,  835,  835, 1391,  424,  424,  424,
     1391,  912,  424,  911,  424,  817,  817,  817,  910,  424,
      424,  424,  458,  458,  458,  458,  776,  458,  884,  884,
      884,  458,  458,  909,  817, 1397,  458,  884,  908, 1397,
      458,  458,  483,  907,  925,  925,  925,  483,  483,  483,
      906, 1398,  483,  925,  483, 1398,  905,  835,  904,  483,
      483,  483,  960,  960,  960,  903, 1401,  483,  502,  817,

     1401,  960,  502,  902,  985,  985,  985,  502,  502,  502,
      901, 1417,  502,  985,  502, 1417,  900,  898,  897,  502,
      502,  502,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,

      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  813,  813,  813,  814,  814,  814,  818,  818,
      818,  896,  813,  895,  894,  814,  819,  819,  819, 1427,
      893,  813, 1428, 1427,  814,  892, 1428,  818,  834,  834,
      834,  891,  834,  890,  889,  819,  888,  834,  869,  869,
      869,  870,  870,  870,  873,  873,  873,  886,  869,  876,
      868,  870,  874,  874,  874,  867,  813,  869,  865,  814,

      870,  864,  818,  873,  875,  875,  875,  918,  918,  918,
      819,  874,  885,  885,  885,  863,  885,  918,  919,  919,
      919,  885,  834,  875,  862,  861,  918,  860,  919,  920,
      920,  920,  869,  858,  857,  870,  856,  919,  873,  855,
      921,  921,  921,  922,  922,  922,  874,  854,  920,  853,
     1429,  926,  926,  926, 1429,  926,  852,  851,  875,  921,
      926,  918,  922,  953,  953,  953,  885,  954,  954,  954,
      850,  846,  919,  953,  955,  955,  955,  954,  845,  956,
      956,  956,  953,  920,  844,  843,  954,  957,  957,  957,
      987,  987,  987,  955,  921,  842,  841,  922,  956,  961,

      961,  961,  840,  961,  839,  926,  957,  837,  961,  962,
      962,  962,  836,  962, 1005, 1005, 1005,  953,  981,  981,
      981,  954,  832, 1005,  979,  979,  979,  831,  955,  980,
      980,  980, 1430,  956,  979,  830, 1430,  981, 1437,  980,
      829,  957, 1437,  979,  987,  982,  982,  982,  980,  983,
      983,  983,  823,  961,  821, 1440,  986,  986,  986, 1440,
      986,  820, 1463,  962,  982,  986, 1463,  811,  983,  999,
      999,  999,  981,  810, 1000, 1000, 1000,  809,  979,  999,
     1007, 1007, 1007,  980, 1000, 1001, 1001, 1001,  999, 1002,
     1002, 1002,  808, 1000, 1003, 1003, 1003,  806,  805,  982,

      804,  803,  802,  983, 1001, 1006, 1006, 1006, 1002, 1006,
      986,  801,  800, 1003, 1006,  799, 1014, 1014, 1014, 1015,
     1015, 1015,  798,  999,  797,  796, 1014,  795, 1000, 1015,
     1016, 1016, 1016,  794, 1007, 1014,  793,  792, 1015, 1001,
     1021, 1021, 1021, 1002, 1017, 1017, 1017,  790, 1003, 1016,
     1018, 1018, 1018, 1019, 1019, 1019, 1020, 1020, 1020, 1006,
     1020,  787, 1019, 1017,  786, 1020, 1025, 1025, 1025, 1018,
     1014,  785,  784, 1015,  783,  782, 1025, 1026, 1026, 1026,
     1027, 1027, 1027,  781, 1016, 1025,  779, 1026, 1028, 1028,
     1028, 1032, 1032, 1032, 1021,  778, 1026,  777, 1017, 1027,

     1029, 1029, 1029,  774, 1018,  772,  771, 1028,  768,  765,
     1020,  764, 1030, 1030, 1030,  763, 1034, 1034, 1034, 1029,
     1025, 1030,  762, 1031, 1031, 1031, 1034, 1031, 1035, 1035,
     1035, 1026, 1031,  761, 1027, 1034,  758,  754, 1035, 1036,
     1036, 1036, 1028,  753,  747, 1032,  746, 1035, 1037, 1037,
     1037, 1039, 1039, 1039, 1029, 1038, 1038, 1038, 1036,  743,
     1039,  742, 1040, 1040, 1040,  740, 1040, 1037,  739,  737,
     1034, 1040,  736,  732, 1038,  731,  728, 1031, 1041, 1041,
     1041,  727, 1035,  726, 1043, 1043, 1043, 1044, 1044, 1044,
     1045, 1045, 1045, 1036, 1043,  725,  724, 1044,  723, 1045,

      722,  720, 1037, 1043,  719,  718, 1044,  717,  716, 1038,
     1046, 1046, 1046,  715, 1046,  714, 1040,  713,  712, 1046,
     1047, 1047, 1047,  710, 1048, 1048, 1048, 1049, 1049, 1049,
      707, 1049, 1041, 1048,  704,  692, 1049,  691, 1043,  690,
      686, 1044, 1050, 1050, 1050, 1051, 1051, 1051, 1052, 1052,
     1052,  685, 1052,  684, 1051,  683,  682, 1052, 1053, 1053,
     1053, 1054, 1054, 1054, 1046,  681,  680, 1055, 1055, 1055,
     1054, 1055,  677,  676, 1047,  674, 1055, 1056, 1056, 1056,
      672, 1049, 1057, 1057, 1057, 1058, 1058, 1058,  669, 1058,
      665, 1057,  663,  661, 1058,  659, 1050, 1059, 1059, 1059,

      657,  654, 1052,  649, 1060, 1060, 1060, 1061, 1061, 1061,
      648, 1061, 1053, 1060,  644,  643, 1061, 1062, 1062, 1062,
      642, 1055,  638, 1063, 1063, 1063, 1064, 1064, 1064,  637,
     1064, 1056, 1063,  636,  633, 1064, 1065, 1065, 1065, 1058,
     1066, 1066, 1066, 1067, 1067, 1067,  632, 1067,  629, 1066,
      628, 1059, 1067, 1068, 1068, 1068, 1069, 1069, 1069,  627,
      626, 1061, 1071, 1071, 1071, 1069, 1070, 1070, 1070,  625,
     1070, 1062, 1072, 1072, 1072, 1070, 1074, 1074, 1074,  624,
     1064, 1072, 1073, 1073, 1073,  623, 1073, 1075, 1075, 1075,
     1065, 1073, 1077, 1077, 1077,  620, 1075, 1067,  619, 1076,

     1076, 1076,  618, 1076, 1078, 1078, 1078, 1068, 1076,  617,
     1079, 1079, 1079, 1078, 1079,  616, 1071,  615,  613, 1079,
     1070, 1080, 1080, 1080, 1081, 1081, 1081, 1083, 1083, 1083,
     1074,  612,  611, 1081,  609,  606, 1073,  604, 1082, 1082,
     1082,  603, 1082, 1084, 1084, 1084, 1077, 1082, 1086, 1086,
     1086,  599, 1084, 1076, 1085, 1085, 1085,  598, 1085, 1087,
     1087, 1087,  590, 1085, 1079, 1088, 1088, 1088, 1087, 1088,
     1089, 1089, 1089,  587, 1088, 1080, 1090, 1090, 1090,  583,
      582, 1083, 1091, 1091, 1091, 1090, 1091, 1092, 1092, 1092,
      571, 1091, 1082,  569, 1093, 1093, 1093, 1094, 1094, 1094,

      568, 1094, 1086, 1093,  567,  565, 1094,  564, 1085, 1095,
     1095, 1095, 1096, 1096, 1096,  563, 1097, 1097, 1097, 1088,
     1097, 1096,  560,  558, 1089, 1097, 1098, 1098, 1098, 1099,
     1099, 1099,  557, 1100, 1100, 1100, 1091, 1100, 1099,  556,
      555, 1092, 1100, 1101, 1101, 1101, 1102, 1102, 1102,  554,
      553, 1094, 1103, 1103, 1103, 1102, 1103, 1104, 1104, 1104,
      551, 1103,  550, 1095, 1105, 1105, 1105, 1106, 1106, 1106,
     1097, 1106,  549, 1105,  548,  547, 1106, 1107, 1107, 1107,
     1098, 1108, 1108, 1108, 1109, 1109, 1109, 1100, 1109,  546,
     1108,  540,  539, 1109, 1110, 1110, 1110, 1101, 1111, 1111,

     1111, 1112, 1112, 1112,  538, 1112, 1103, 1111,  531,  530,
     1112, 1104, 1113, 1113, 1113, 1114, 1114, 1114, 1115, 1115,
     1115, 1106, 1115,  529, 1114,  527,  526, 1115, 1116, 1116,
     1116, 1107, 1117, 1117, 1117, 1118, 1118, 1118, 1109, 1118,
      522, 1117,  521,  517, 1118, 1119, 1119, 1119, 1110, 1120,
     1120, 1120, 1121, 1121, 1121, 1112, 1121,  516, 1120,  512,
      511, 1121, 1122, 1122, 1122,  508, 1113, 1123, 1123, 1123,
      507,  504, 1115, 1125, 1125, 1125, 1123, 1124, 1124, 1124,
      501, 1124, 1116, 1126, 1126, 1126, 1124,  500,  496, 1118,
      495,  493, 1126, 1127, 1127, 1127,  492, 1127,  488, 1119,

      487,  480, 1127, 1128, 1128, 1128, 1121,  479, 1129, 1129,
     1129, 1130, 1130, 1130,  477, 1130, 1122, 1129,  474,  473,
     1130, 1131, 1131, 1131, 1132, 1132, 1132, 1125, 1133, 1133,
     1133, 1124, 1133, 1132, 1134, 1134, 1134, 1133,  471, 1135,
     1135, 1135, 1136, 1136, 1136,  470, 1136, 1127, 1135,  467,
      466, 1136, 1137, 1137, 1137,  465,  464, 1128, 1138, 1138,
     1138,  463, 1139, 1139, 1139, 1130, 1139, 1138, 1140, 1140,
     1140, 1139, 1141, 1141, 1141, 1131, 1142, 1142, 1142,  462,
     1142, 1141, 1133,  461,  460, 1142,  459,  456, 1134, 1143,
     1143, 1143, 1144, 1144, 1144,  449, 1136,  444, 1145, 1145,

     1145, 1144, 1145, 1146, 1146, 1146, 1137, 1145, 1147, 1147,
     1147, 1148, 1148, 1148,  443, 1148, 1139, 1147,  439,  437,
     1148,  436, 1140, 1149, 1149, 1149, 1150, 1150, 1150,  435,
     1142,  434, 1151, 1151, 1151, 1150, 1151, 1152, 1152, 1152,
      433, 1151,  431, 1143, 1153, 1153, 1153, 1154, 1154, 1154,
      426, 1154, 1145, 1153,  420,  409, 1154, 1146, 1155, 1155,
     1155, 1156, 1156, 1156,  408, 1148,  404, 1157, 1157, 1157,
     1156, 1157, 1158, 1158, 1158,  403, 1157, 1149, 1159, 1159,
     1159, 1160, 1160, 1160,  400, 1160, 1151, 1159,  394,  386,
     1160, 1152, 1161, 1161, 1161, 1162, 1162, 1162, 1163, 1163,

     1163, 1154, 1163,  383, 1162,  380,  379, 1163, 1164, 1164,
     1164,  378, 1155, 1165, 1165, 1165, 1166, 1166, 1166,  377,
     1166, 1157, 1165,  376,  375, 1166, 1158, 1167, 1167, 1167,
     1168, 1168, 1168,  373,  371, 1160, 1169, 1169, 1169, 1168,
     1169, 1170, 1170, 1170,  370, 1169, 1161, 1171, 1171, 1171,
      360,  359, 1163, 1173, 1173, 1173, 1171, 1172, 1172, 1172,
      356, 1172, 1164, 1174, 1174, 1174, 1172, 1175, 1175, 1175,
     1166, 1175, 1174, 1176, 1176, 1176, 1175, 1177, 1177, 1177,
      348, 1167,  340, 1178, 1178, 1178, 1177, 1178,  331,  327,
     1169,  319, 1178,  311,  303, 1170, 1179, 1179, 1179, 1180,

     1180, 1180, 1182, 1182, 1182,  294,  292, 1173, 1180,  285,
      282, 1172,  275, 1181, 1181, 1181,  269, 1181, 1185, 1185,
     1185, 1175, 1181, 1183, 1183, 1183,  267, 1176,  254, 1184,
     1184, 1184, 1183, 1184, 1186, 1186, 1186, 1178, 1184,  253,
     1187, 1187, 1187, 1186, 1187, 1188, 1188, 1188,  248, 1187,
     1179, 1189, 1189, 1189,  247,  242, 1182, 1190, 1190, 1190,
     1189, 1190, 1191, 1191, 1191,  241, 1190, 1181, 1192, 1192,
     1192,  239, 1185, 1194, 1194, 1194,  238, 1192, 1193, 1193,
     1193,  236, 1193, 1184, 1195, 1195, 1195, 1193, 1196, 1196,
     1196,  234, 1196, 1195, 1187,  229,  228, 1196,  222, 1188,

     1197, 1197, 1197, 1198, 1198, 1198, 1199, 1199, 1199,  220,
     1199, 1190, 1198,  214,  205, 1199, 1191, 1200, 1200, 1200,
     1201, 1201, 1201,  195, 1202, 1202, 1202, 1194, 1202, 1201,
      192,  185, 1193, 1202, 1203, 1203, 1203, 1204, 1204, 1204,
      183,  182, 1196, 1205, 1205, 1205, 1204, 1205, 1206, 1206,
     1206,  181, 1205,  180, 1197, 1207, 1207, 1207,  177,  173,
     1199, 1208, 1208, 1208, 1207, 1208, 1209, 1209, 1209,  171,
     1208, 1200, 1210, 1210, 1210, 1211, 1211, 1211, 1202, 1211,
      170, 1210,  160,  153, 1211, 1212, 1212, 1212, 1203, 1213,
     1213, 1213, 1214, 1214, 1214,  142, 1214, 1205, 1213,  140,

      132, 1214, 1206, 1215, 1215, 1215,  125, 1216, 1216, 1216,
     1217, 1217, 1217,  123, 1217, 1208, 1216,  116,  113, 1217,
     1209, 1218, 1218, 1218, 1219, 1219, 1219,  106,  105, 1211,
     1221, 1221, 1221, 1219, 1220, 1220, 1220,  102, 1220, 1212,
     1222, 1222, 1222, 1220,  101,   99, 1214,   90,   81, 1222,
     1223, 1223, 1223,   75, 1223,    0,    0, 1215,    0, 1223,
     1224, 1224, 1224,    0, 1217, 1225, 1225, 1225, 1226, 1226,
     1226,    0, 1226,    0, 1225, 1218,    0, 1226, 1227, 1227,
     1227, 1228, 1228, 1228, 1221, 1229, 1229, 1229, 1220, 1229,
     1228, 1230, 1230, 1230, 1229,    0, 1231, 1231, 1231, 1232,

     1232, 1232,    0, 1232, 1223, 1231,    0,    0, 1232, 1233,
     1233, 1233,    0,    0, 1224, 1234, 1234, 1234,    0, 1235,
     1235, 1235, 1226, 1235, 1234, 1236, 1236, 1236, 1235, 1237,
     1237, 1237, 1227, 1238, 1238, 1238,    0, 1238, 1237, 1229,
        0,    0, 1238,    0,    0, 1230, 1239, 1239, 1239, 1240,
     1240, 1240,    0, 1232,    0, 1241, 1241, 1241, 1240, 1241,
     1242, 1242, 1242, 1233, 1241, 1244, 1244, 1244,    0, 1244,
     1245, 1245, 1245, 1235, 1244,    0, 1246, 1246, 1246, 1236,
     1246, 1247, 1247, 1247,    0, 1246,    0, 1238, 1248, 1248,
     1248,    0, 1248, 1249, 1249, 1249,    0, 1248,    0,    0,

     1239, 1250, 1250, 1250,    0, 1250, 1251, 1251, 1251, 1241,
     1250, 1252, 1252, 1252, 1242, 1252, 1253, 1253, 1253, 1244,
     1252, 1255, 1255, 1255, 1245, 1254, 1254, 1254,    0, 1254,
     1246, 1256, 1256, 1256, 1254, 1247, 1257, 1257, 1257, 1258,
     1258, 1258, 1248, 1259, 1259, 1259,    0, 1249, 1260, 1260,
     1260, 1262, 1262, 1262,    0, 1250, 1263, 1263, 1263,    0,
     1251, 1264, 1264, 1264,    0, 1252, 1265, 1265, 1265,    0,
     1253, 1266, 1266, 1266,    0, 1255, 1267, 1267, 1267, 1254,
     1268, 1268, 1268,    0,    0, 1256, 1269, 1269, 1269,    0,
     1257,    0,    0, 1258, 1270, 1270, 1270, 1259, 1271, 1271,

     1271,    0, 1260,    0,    0, 1262, 1272, 1272, 1272,    0,
     1263, 1273, 1273, 1273,    0, 1264, 1274, 1274, 1274,    0,
     1265, 1275, 1275, 1275,    0, 1266, 1276, 1276, 1276,    0,
     1267, 1277, 1277, 1277, 1268, 1278, 1278, 1278,    0,    0,
     1269, 1279, 1279, 1279, 1280, 1280, 1280,    0, 1270, 1281,
     1281, 1281, 1271, 1282, 1282, 1282, 1283, 1283, 1283,    0,
     1272, 1284, 1284, 1284,    0, 1273, 1285, 1285, 1285,    0,
     1274, 1286, 1286, 1286,    0, 1275, 1287, 1287, 1287,    0,
     1276, 1288, 1288, 1288,    0, 1277, 1289, 1289, 1289, 1278,
     1290, 1290, 1290,    0,    0, 1279,    0,    0, 1280, 1291,

     1291, 1291,    0, 1281, 1292, 1292, 1292, 1282,    0,    0,
     1283, 1293, 1293, 1293,    0, 1284, 1294, 1294, 1294,    0,
     1285, 1295, 1295, 1295,    0, 1286, 1296, 1296, 1296,    0,
     1287, 1297, 1297, 1297,    0, 1288, 1298, 1298, 1298,    0,
     1289, 1299, 1299, 1299, 1290, 1300, 1300, 1300, 1301, 1301,
     1301,    0,    0, 1291, 1302, 1302, 1302,    0, 1292, 1303,
     1303, 1303, 1304, 1304, 1304, 1293, 1305, 1305, 1305,    0,
     1294, 1306, 1306, 1306,    0, 1295, 1307, 1307, 1307,    0,
     1296, 1308, 1308, 1308,    0, 1297, 1309, 1309, 1309,    0,
     1298, 1310, 1310, 1310,    0, 1299, 1311, 1311, 1311, 1300,

        0,    0, 1301, 1312, 1312, 1312,    0,    0, 1302, 1313,
     1313, 1313,    0, 1303,    0,    0, 1304, 1314, 1314, 1314,
     1305, 1315, 1315, 1315,    0, 1306, 1316, 1316, 1316,    0,
     1307, 1317, 1317, 1317,    0, 1308, 1318, 1318, 1318,    0,
     1309, 1319, 1319, 1319,    0, 1310, 1320, 1320, 1320,    0,
     1311, 1321, 1321, 1321, 1322, 1322, 1322, 1312, 1323, 1323,
     1323,    0,    0, 1313, 1324, 1324, 1324, 1325, 1325, 1325,
        0, 1314, 1326, 1326, 1326, 1315, 1327, 1327, 1327,    0,
     1316, 1328, 1328, 1328,    0, 1317, 1329, 1329, 1329,    0,
     1318, 1330, 1330, 1330,    0, 1319, 1331, 1331, 1331,    0,

     1320, 1332, 1332, 1332,    0, 1321,    0,    0, 1322, 1333,
     1333, 1333, 1323, 1334, 1334, 1334,    0,    0, 1324,    0,
        0, 1325, 1335, 1335, 1335,    0, 1326, 1336, 1336, 1336,
     1327, 1337, 1337, 1337,    0, 1328,    0,    0,    0,    0,
     1329,    0,    0,    0,    0, 1330,    0,    0,    0,    0,
     1331,    0,    0,    0,    0, 1332,    0,    0,    0,    0,
        0,    0,    0, 1333,    0,    0,    0, 1334,    0,    0,
        0,    0,    0,    0,    0,    0, 1335,    0,    0,    0,
        0, 1336,    0,    0,    0, 1337, 1339, 1339, 1339, 1339,
     1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339,

     1339, 1339, 1339, 1339, 1339, 1339, 1339, 1340, 1340, 1340,
     1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340,
     1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1341, 1341,
     1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341,
     1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1342,
     1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342,
     1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342,
     1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343,
     1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343,
     1343, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344,

     1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344,
     1344, 1344, 1345, 1345, 1345, 1345, 1345, 1345, 1345, 1345,
     1345, 1345, 1345, 1345, 1345, 1345, 1345, 1345, 1345, 1345,
     1345, 1345, 1345, 1346, 1346, 1346, 1346, 1346, 1346, 1346,
     1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346,
     1346, 1346, 1346, 1346, 1347, 1347, 1347, 1347, 1347, 1347,
     1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347,
     1347, 1347, 1347, 1347, 1347, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1349, 1349, 1349, 1349,

     1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349,
     1349, 1349, 1349, 1349, 1349, 1349, 1349, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1351, 1351,
     1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351,
     1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,

     1353, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354,
     1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354,
     1354, 1354, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355,
     1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355,
     1355, 1355, 1355, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1357, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1358, 1358, 1358, 1358, 1358,
     1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358,

     1358, 1358, 1358, 1358, 1358, 1358, 1362, 1362, 1362,    0,
     1362, 1362,    0, 1362,    0, 1362, 1362, 1362, 1362,    0,
     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1363, 1363, 1363,
        0, 1363, 1363, 1363, 1363,    0, 1363, 1363, 1363, 1363,
     1363, 1363, 1363, 1363, 1363, 1363, 1363, 1363, 1364, 1364,
     1364,    0, 1364, 1364,    0, 1364, 1364, 1364, 1364, 1364,
     1364, 1364, 1364, 1364, 1364, 1364, 1364,    0, 1364, 1365,
     1365, 1365,    0, 1365, 1365, 1365, 1365, 1365, 1365, 1365,
     1365, 1365, 1365, 1365, 1365, 1365, 1365, 1365, 1365, 1365,
     1366, 1366, 1366,    0, 1366, 1366, 1366, 1366, 1366, 1366,

     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1367, 1367, 1367,    0,    0,    0,    0, 1367,    0,
        0,    0,    0, 1367,    0,    0,    0, 1367, 1368, 1368,
     1368,    0,    0, 1368,    0, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1368,    0, 1368, 1369,
     1369, 1369,    0, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1370, 1370, 1370,    0,    0, 1370, 1370, 1370,    0, 1370,
     1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370,    0,
     1370, 1371, 1371, 1371,    0, 1371, 1371, 1371, 1371, 1371,

     1371, 1371, 1371, 1371, 1371, 1371, 1371, 1371, 1371, 1371,
     1371, 1371, 1372, 1372, 1372,    0, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1373,    0,    0,    0,    0,    0,    0,
     1373,    0,    0,    0,    0, 1373,    0,    0,    0, 1373,
     1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374,
     1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374,    0,
     1374, 1375, 1375,    0,    0,    0,    0,    0, 1375,    0,
        0,    0,    0, 1375,    0,    0,    0, 1375, 1375, 1376,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1376,

        0, 1376,    0,    0,    0, 1376, 1378, 1378, 1378, 1378,
     1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378,
     1378, 1378, 1378, 1378, 1378, 1378, 1378, 1379,    0, 1379,
        0, 1379, 1379, 1379, 1379, 1379, 1379, 1379,    0, 1379,
        0, 1379, 1379, 1379,    0, 1379, 1380, 1380, 1380,    0,
     1380, 1380, 1380, 1380, 1380, 1380, 1380,    0, 1380, 1380,
     1380, 1380, 1380, 1380, 1380, 1380, 1380, 1381, 1381, 1381,
        0, 1381, 1381, 1381, 1381, 1381, 1381, 1381,    0, 1381,
     1381, 1381, 1381, 1381, 1381,    0, 1381, 1381, 1382, 1382,
     1382,    0, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382,

     1382, 1382, 1382, 1382, 1382,    0, 1382,    0, 1382, 1383,
     1383, 1383,    0, 1383, 1383, 1383, 1383, 1383, 1383, 1383,
     1383, 1383,    0, 1383, 1383, 1383,    0, 1383,    0, 1383,
     1384,    0, 1384,    0, 1384, 1384, 1384, 1384, 1384, 1384,
     1384, 1384, 1384, 1384, 1384, 1384, 1384,    0, 1384,    0,
     1384, 1385,    0, 1385,    0, 1385, 1385, 1385, 1385, 1385,
     1385, 1385,    0, 1385, 1385, 1385, 1385, 1385, 1385, 1385,
     1385, 1385, 1386,    0, 1386,    0, 1386, 1386, 1386, 1386,
     1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386,
     1386, 1386, 1386, 1390, 1390, 1390,    0, 1390, 1390, 1390,

     1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390,
     1390, 1390, 1390, 1390, 1392, 1392, 1392,    0, 1392, 1392,
     1392, 1392,    0, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1393, 1393, 1393,    0, 1393,
     1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393,
     1393, 1393, 1393, 1393, 1393, 1393, 1394,    0,    0, 1394,
        0, 1394,    0, 1394, 1394,    0, 1394,    0, 1394,    0,
        0,    0, 1394, 1395, 1395, 1395,    0, 1395,    0, 1395,
     1395, 1395, 1395, 1395,    0, 1395,    0, 1395, 1395, 1395,
        0, 1395,    0, 1395, 1396,    0,    0, 1396, 1396, 1396,

        0,    0, 1396,    0, 1396, 1396, 1399, 1399, 1399,    0,
     1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399,
     1399, 1399, 1399, 1399, 1399, 1399, 1399, 1400, 1400, 1400,
        0, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1402, 1402,
     1402,    0, 1402, 1402,    0, 1402,    0, 1402, 1402, 1402,
     1402,    0, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1403,
     1403, 1403,    0, 1403, 1403, 1403, 1403, 1403, 1403, 1403,
     1403, 1403, 1403, 1403, 1403, 1403, 1403, 1403,    0, 1403,
     1404, 1404, 1404,    0, 1404, 1404, 1404, 1404, 1404, 1404,

     1404, 1404, 1404, 1404, 1404, 1404, 1404, 1404, 1404, 1404,
     1404, 1405, 1405, 1405,    0, 1405, 1405,    0, 1405, 1405,
     1405, 1405, 1405, 1405, 1405, 1405, 1405, 1405, 1405, 1405,
        0, 1405, 1406, 1406, 1406,    0, 1406, 1406, 1406, 1406,
     1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406,
     1406, 1406, 1406, 1407, 1407, 1407,    0, 1407, 1407, 1407,
     1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407,
     1407, 1407, 1407, 1407, 1408, 1408, 1408,    0, 1408, 1408,
     1408, 1408, 1408, 1408, 1408, 1408, 1408, 1408, 1408, 1408,
     1408, 1408, 1408, 1408, 1408, 1409, 1409, 1409,    0,    0,

        0,    0, 1409,    0,    0,    0,    0, 1409,    0,    0,
        0, 1409, 1410, 1410, 1410,    0,    0, 1410,    0, 1410,
     1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410,
     1410,    0, 1410, 1411, 1411, 1411,    0,    0, 1411, 1411,
     1411,    0, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411,
     1411, 1411,    0, 1411, 1412, 1412, 1412,    0, 1412, 1412,
     1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412,
     1412, 1412, 1412, 1412, 1412, 1413,    0,    0,    0,    0,
        0,    0, 1413,    0,    0,    0,    0, 1413,    0,    0,
        0, 1413, 1414, 1414, 1414, 1414, 1414, 1414, 1414, 1414,

     1414, 1414, 1414, 1414, 1414, 1414, 1414, 1414, 1414, 1414,
     1414,    0, 1414, 1415, 1415,    0,    0,    0,    0,    0,
     1415,    0,    0,    0,    0, 1415,    0,    0,    0, 1415,
     1415, 1416,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1416,    0, 1416,    0,    0,    0, 1416, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1419,
        0, 1419,    0, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
        0, 1419,    0, 1419, 1419, 1419,    0, 1419, 1420, 1420,
     1420,    0, 1420, 1420, 1420, 1420, 1420, 1420, 1420,    0,

     1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1421,
     1421, 1421,    0, 1421, 1421, 1421, 1421, 1421, 1421, 1421,
        0, 1421, 1421, 1421, 1421, 1421, 1421,    0, 1421, 1421,
     1422, 1422, 1422,    0, 1422, 1422, 1422, 1422, 1422, 1422,
     1422, 1422, 1422, 1422, 1422, 1422, 1422,    0, 1422,    0,
     1422, 1423, 1423, 1423,    0, 1423, 1423, 1423, 1423, 1423,
     1423, 1423, 1423, 1423,    0, 1423, 1423, 1423,    0, 1423,
        0, 1423, 1424,    0, 1424,    0, 1424, 1424, 1424, 1424,
     1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424,    0,
     1424,    0, 1424, 1425,    0, 1425,    0, 1425, 1425, 1425,

     1425, 1425, 1425, 1425,    0, 1425, 1425, 1425, 1425, 1425,
     1425, 1425, 1425, 1425, 1426,    0, 1426,    0, 1426, 1426,
     1426, 1426, 1426, 1426, 1426, 1426, 1426, 1426, 1426, 1426,
     1426, 1426, 1426, 1426, 1426, 1431, 1431, 1431,    0, 1431,
     1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431,
     1431, 1431, 1431, 1431,    0, 1431, 1432, 1432, 1432,    0,
     1432, 1432, 1432, 1432, 1432, 1432, 1432, 1432, 1432, 1432,
     1432, 1432, 1432, 1432, 1432, 1432, 1432, 1433,    0,    0,
     1433,    0, 1433,    0, 1433, 1433,    0, 1433,    0, 1433,
        0,    0,    0, 1433, 1434, 1434, 1434,    0, 1434,    0,

     1434, 1434, 1434, 1434, 1434,    0, 1434,    0, 1434, 1434,
     1434,    0, 1434,    0, 1434, 1435, 1435, 1435,    0, 1435,
     1435, 1435, 1435, 1435, 1435, 1435, 1435, 1435, 1435, 1435,
     1435, 1435, 1435, 1435, 1435, 1435, 1436, 1436, 1436,    0,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1438, 1438, 1438,
        0, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438,
     1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1439, 1439,
     1439,    0, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439,
     1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1441,

     1441, 1441,    0, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,    0, 1441,
     1442, 1442, 1442,    0, 1442, 1442,    0, 1442,    0, 1442,
     1442, 1442, 1442,    0, 1442, 1442, 1442, 1442, 1442, 1442,
     1442, 1443, 1443, 1443,    0, 1443, 1443, 1443, 1443, 1443,
     1443, 1443, 1443, 1443, 1443, 1443, 1443, 1443, 1443, 1443,
     1443, 1443, 1444, 1444, 1444,    0, 1444, 1444, 1444, 1444,
     1444, 1444, 1444, 1444, 1444, 1444, 1444, 1444, 1444, 1444,
     1444, 1444, 1444, 1445, 1445, 1445,    0, 1445, 1445, 1445,
     1445, 1445, 1445, 1445, 1445, 1445, 1445, 1445, 1445, 1445,

     1445, 1445, 1445, 1445, 1446, 1446, 1446,    0, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1447, 1447, 1447,    0, 1447,
     1447,    0, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447,
     1447, 1447, 1447, 1447,    0, 1447, 1448, 1448, 1448,    0,
        0,    0,    0, 1448,    0,    0,    0,    0, 1448,    0,
        0,    0, 1448, 1449, 1449, 1449,    0,    0, 1449,    0,
     1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449,
     1449, 1449,    0, 1449, 1450, 1450, 1450,    0,    0, 1450,
     1450, 1450,    0, 1450, 1450, 1450, 1450, 1450, 1450, 1450,

     1450, 1450, 1450,    0, 1450, 1451, 1451, 1451,    0, 1451,
     1451, 1451, 1451, 1451, 1451, 1451, 1451, 1451, 1451, 1451,
     1451, 1451, 1451, 1451, 1451, 1451, 1452, 1452, 1452, 1452,
     1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452,
     1452, 1452, 1452, 1452, 1452,    0, 1452, 1453, 1453, 1453,
        0, 1453, 1453, 1453, 1453, 1453, 1453, 1453,    0, 1453,
     1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453, 1454, 1454,
     1454,    0, 1454, 1454, 1454, 1454, 1454, 1454, 1454,    0,
     1454, 1454, 1454, 1454, 1454, 1454,    0, 1454, 1454, 1455,
     1455, 1455,    0, 1455, 1455, 1455, 1455, 1455, 1455, 1455,

     1455, 1455, 1455, 1455, 1455, 1455, 1455, 1455,    0, 1455,
     1456, 1456, 1456,    0, 1456, 1456, 1456, 1456, 1456, 1456,
     1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456,
     1456, 1457, 1457, 1457,    0, 1457, 1457, 1457, 1457, 1457,
     1457, 1457, 1457, 1457, 1457, 1457, 1457, 1457, 1457, 1457,
        0, 1457, 1458, 1458, 1458,    0, 1458, 1458, 1458, 1458,
     1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458,
     1458,    0, 1458, 1459, 1459, 1459, 1459, 1459, 1459, 1459,
     1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459,
     1459, 1459, 1459, 1459, 1460, 1460, 1460, 1460, 1460, 1460,

     1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460,
     1460, 1460, 1460, 1460, 1460, 1461,    0,    0,    0, 1461,
        0,    0,    0,    0,    0,    0,    0,    0, 1461,    0,
        0, 1461, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462,
     1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462,
     1462, 1462, 1462, 1464, 1464, 1464, 1464, 1464, 1464, 1464,
     1464, 1464, 1464, 1464, 1464, 1464, 1464,    0, 1464, 1464,
     1464,    0, 1464, 1464, 1465, 1465, 1465, 1465, 1465, 1465,
     1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465,    0, 1465,
     1465, 1465,    0, 1465, 1465, 1466, 1466, 1466, 1466, 1466,

     1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466,    0,
     1466, 1466, 1466,    0, 1466, 1466, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338
    } ;

extern int preYY_flex_debug;
int preYY_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *preYYtext;
#line 1 "pre.l"
/******************************************************************************
 *
 * 
 *
 * Copyright (C) 1997-2015 by Dimitri van Heesch.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation under the terms of the GNU General Public License is hereby 
 * granted. No representations are made about the suitability of this software 
 * for any purpose. It is provided "as is" without express or implied warranty.
 * See the GNU General Public License for more details.
 *
 * Documents produced by Doxygen are derivative works derived from the
 * input used in their production; they are not affected by this license.
 *
 */
#line 21 "pre.l"

/*
 *	includes
 */

#include <stdio.h>
#include <assert.h>
#include <ctype.h>
#include <errno.h>

#include <qarray.h>
#include <qstack.h>
#include <qfile.h>
#include <qstrlist.h>
#include <qdict.h>
#include <qregexp.h>
#include <qfileinfo.h>
#include <qdir.h>
  
#include "pre.h"
#include "constexp.h"
#include "define.h"
#include "doxygen.h"
#include "message.h"
#include "util.h"
#include "defargs.h"
#include "debug.h"
#include "bufstr.h"
#include "portable.h"
#include "bufstr.h"
#include "arguments.h"
#include "entry.h"
#include "condparser.h"
#include "config.h"
#include "filedef.h"
#include "memberdef.h"
#include "membername.h"

#define YY_NO_UNISTD_H 1

// Toggle for some debugging info
//#define DBG_CTX(x) fprintf x
#define DBG_CTX(x) do { } while(0)

struct CondCtx
{
  CondCtx(int line,QCString id,bool b) 
    : lineNr(line),sectionId(id), skip(b) {}
  int lineNr;
  QCString sectionId;
  bool skip;
};

struct FileState
{
  FileState(int size) : lineNr(1), fileBuf(size),
                        oldFileBuf(0), oldFileBufPos(0), bufState(0) {}
  int lineNr;
  BufStr fileBuf;
  BufStr *oldFileBuf;
  int oldFileBufPos;
  YY_BUFFER_STATE bufState;
  QCString fileName;
};  

/** @brief Singleton that manages the defines available while 
 *  proprocessing files. 
 */
class DefineManager
{
  /** Local class used to hold the defines for a single file */
  class DefinesPerFile
  {
    public:
      /** Creates an empty container for defines */
      DefinesPerFile() : m_defines(257), m_includedFiles(17)
      {
        m_defines.setAutoDelete(TRUE);
      }
      /** Destroys the object */
      virtual ~DefinesPerFile()
      {
      }
      /** Adds a define in the context of a file. Will replace 
       *  an existing define with the same name (redefinition)
       *  @param def The Define object to add.
       */
      void addDefine(Define *def)
      {
	Define *d = m_defines.find(def->name);
	if (d!=0) // redefine
	{
	  m_defines.remove(d->name);
	}
	m_defines.insert(def->name,def);
      }
      /** Adds an include file for this file 
       *  @param fileName The name of the include file
       */
      void addInclude(const char *fileName)
      {
	m_includedFiles.insert(fileName,(void*)0x8);
      }
      void collectDefines(DefineDict *dict,QDict<void> &includeStack);
    private:
      DefineDict m_defines;
      QDict<void> m_includedFiles;
  };

  public:
    friend class DefinesPerFile;
    /** Returns a reference to the singleton */
    static DefineManager &instance()
    {
      if (theInstance==0) theInstance = new DefineManager;
      return *theInstance;
    }
    /** Deletes the singleton */
    static void deleteInstance()
    {
      delete theInstance;
      theInstance = 0;
    }
    /** Starts a context in which defines are collected. 
     *  Called at the start of a new file that is preprocessed.
     *  @param fileName the name of the file to process.
     */
    void startContext(const char *fileName)
    {
      //printf("DefineManager::startContext()\n");
      m_contextDefines.clear();
      if (fileName==0) return;
      DefinesPerFile *dpf = m_fileMap.find(fileName);
      if (dpf==0)
      {
	//printf("New file!\n");
	dpf = new DefinesPerFile;
	m_fileMap.insert(fileName,dpf);
      }
    }
    /** Ends the context started with startContext() freeing any
     *  defines collected within in this context.
     */
    void endContext()
    {
      //printf("DefineManager::endContext()\n");
      m_contextDefines.clear();
    }
    /** Add an included file to the current context.
     *  If the file has been pre-processed already, all defines are added
     *  to the context.
     *  @param fileName The name of the include file to add to the context.
     */
    void addFileToContext(const char *fileName)
    {
      if (fileName==0) return;
      //printf("DefineManager::addFileToContext(%s)\n",fileName);
      DefinesPerFile *dpf = m_fileMap.find(fileName);
      if (dpf==0)
      {
	//printf("New file!\n");
	dpf = new DefinesPerFile;
	m_fileMap.insert(fileName,dpf);
      }
      else
      {
	//printf("existing file!\n");
	QDict<void> includeStack(17);
	dpf->collectDefines(&m_contextDefines,includeStack);
      }
    }

    /** Add a define to the manager object.
     *  @param fileName The file in which the define was found
     *  @param def The Define object to add.
     */
    void addDefine(const char *fileName,Define *def)
    {
      if (fileName==0) return;
      //printf("DefineManager::addDefine(%s,%s)\n",fileName,def->name.data());
      Define *d = m_contextDefines.find(def->name);
      if (d!=0) // redefine
      {
	m_contextDefines.remove(d->name);
      }
      m_contextDefines.insert(def->name,def);

      DefinesPerFile *dpf = m_fileMap.find(fileName);
      if (dpf==0)
      {
	dpf = new DefinesPerFile;
	m_fileMap.insert(fileName,dpf);
      }
      dpf->addDefine(def);
    }

    /** Add an include relation to the manager object.
     *  @param fromFileName file name in which the include was found.
     *  @param toFileName file name that is included.
     */
    void addInclude(const char *fromFileName,const char *toFileName)
    {
      //printf("DefineManager::addInclude(%s,%s)\n",fromFileName,toFileName);
      if (fromFileName==0 || toFileName==0) return;
      DefinesPerFile *dpf = m_fileMap.find(fromFileName);
      if (dpf==0)
      {
	dpf = new DefinesPerFile;
	m_fileMap.insert(fromFileName,dpf);
      }
      dpf->addInclude(toFileName);
    }
    /** Returns a Define object given its name or 0 if the Define does
     *  not exist.
     */
    Define *isDefined(const char *name) const
    {
      Define *d = m_contextDefines.find(name);
      if (d && d->undef) d=0;
      //printf("isDefined(%s)=%p\n",name,d);
      return d;
    }
    /** Returns a reference to the defines found in the current context. */
    const DefineDict &defineContext() const
    {
      return m_contextDefines;
    }
  private:
    static DefineManager *theInstance;

    /** Helper function to collect all define for a given file */
    void collectDefinesForFile(const char *fileName,DefineDict *dict)
    {
      if (fileName==0) return;
      DefinesPerFile *dpf = m_fileMap.find(fileName);
      if (dpf)
      {
	QDict<void> includeStack(17);
	dpf->collectDefines(dict,includeStack);
      }
    }

    /** Helper function to return the DefinesPerFile object for a given file name. */
    DefinesPerFile *find(const char *fileName) const
    {
      if (fileName==0) return 0;
      return m_fileMap.find(fileName);
    }

    /** Creates a new DefineManager object */
    DefineManager() : m_fileMap(1009), m_contextDefines(1009)
    {
      m_fileMap.setAutoDelete(TRUE);
    }

    /** Destroys the object */
    virtual ~DefineManager() 
    {
    }

    QDict<DefinesPerFile> m_fileMap;
    DefineDict m_contextDefines;
};

/** Singleton instance */
DefineManager *DefineManager::theInstance = 0;

/** Collects all defines for a file and all files that the file includes.
 *  This function will recursively call itself for each file.
 *  @param dict The dictionary to fill with the defines. A redefine will
 *         replace a previous definition.
 *  @param includeStack The stack of includes, used to stop recursion in
 *         case there is a cyclic include dependency.
 */
void DefineManager::DefinesPerFile::collectDefines(
                     DefineDict *dict,QDict<void> &includeStack)
{
  //printf("DefinesPerFile::collectDefines #defines=%d\n",m_defines.count());
  {
    QDictIterator<void> di(m_includedFiles);
    for (di.toFirst();(di.current());++di)
    {
      QCString incFile = di.currentKey();
      DefinesPerFile *dpf = DefineManager::instance().find(incFile);
      if (dpf && includeStack.find(incFile)==0) 
      {
        //printf("  processing include %s\n",incFile.data());
	includeStack.insert(incFile,(void*)0x8);
	dpf->collectDefines(dict,includeStack);
      }
    }
  }
  {
    QDictIterator<Define> di(m_defines);
    Define *def;
    for (di.toFirst();(def=di.current());++di)
    {
      Define *d = dict->find(def->name);
      if (d!=0) // redefine
      {
	dict->remove(d->name);
      }
      dict->insert(def->name,def);
      //printf("  adding define %s\n",def->name.data());
    }
  }
}

/* -----------------------------------------------------------------
 *
 *	scanner's state
 */

static int                g_yyLineNr   = 1;
static int                g_yyMLines   = 1;
static int                g_yyColNr   = 1;
static QCString           g_yyFileName;
static FileDef           *g_yyFileDef;
static FileDef           *g_inputFileDef;
static int                g_ifcount    = 0;
static QStrList          *g_pathList = 0;  
static QStack<FileState>  g_includeStack;
static QDict<int>        *g_argDict;
static int                g_defArgs = -1;
static QCString           g_defName;
static QCString           g_defText;
static QCString           g_defLitText;
static QCString           g_defArgsStr;
static QCString           g_defExtraSpacing;
static bool               g_defVarArgs;
static int                g_level;
static int                g_lastCContext;
static int                g_lastCPPContext;
static QArray<int>        g_levelGuard;
static BufStr            *g_inputBuf;
static int                g_inputBufPos;
static BufStr            *g_outputBuf;
static int                g_roundCount;
static bool               g_quoteArg;
static DefineDict        *g_expandedDict;
static int                g_findDefArgContext;
static bool               g_expectGuard;
static QCString           g_guardName;
static QCString           g_lastGuardName;
static QCString           g_incName;
static QCString           g_guardExpr;
static int                g_curlyCount;
static bool               g_nospaces; // add extra spaces during macro expansion

static bool               g_macroExpansion; // from the configuration
static bool               g_expandOnlyPredef; // from the configuration
static int                g_commentCount;
static bool               g_insideComment;
static bool               g_isImported;
static QCString           g_blockName;
static int                g_condCtx;
static bool               g_skip;
static QStack<CondCtx>    g_condStack;
static bool               g_insideCS; // C# has simpler preprocessor
static bool               g_isSource;

static bool               g_lexInit = FALSE;
static int                g_fenceSize = 0;
static bool               g_ccomment;

//DefineDict* getGlobalDefineDict() 
//{
//  return g_globalDefineDict;
//}

static void setFileName(const char *name)
{
  bool ambig;
  QFileInfo fi(name);
  g_yyFileName=fi.absFilePath().utf8();
  g_yyFileDef=findFileDef(Doxygen::inputNameDict,g_yyFileName,ambig);
  if (g_yyFileDef==0) // if this is not an input file check if it is an
                      // include file
  {
    g_yyFileDef=findFileDef(Doxygen::includeNameDict,g_yyFileName,ambig);
  }
  //printf("setFileName(%s) g_yyFileName=%s g_yyFileDef=%p\n",
  //    name,g_yyFileName.data(),g_yyFileDef);
  if (g_yyFileDef && g_yyFileDef->isReference()) g_yyFileDef=0;
  g_insideCS = getLanguageFromFileName(g_yyFileName)==SrcLangExt_CSharp;
  g_isSource = guessSection(g_yyFileName);
}

static void incrLevel()
{
  g_level++;
  g_levelGuard.resize(g_level);
  g_levelGuard[g_level-1]=FALSE;
  //printf("%s line %d: incrLevel %d\n",g_yyFileName.data(),g_yyLineNr,g_level);
}

static void decrLevel()
{
  //printf("%s line %d: decrLevel %d\n",g_yyFileName.data(),g_yyLineNr,g_level);
  if (g_level > 0)
  {
    g_level--;
    g_levelGuard.resize(g_level);
  }
  else
  {
    warn(g_yyFileName,g_yyLineNr,"More #endif's than #if's found.\n");
  }
}

static bool otherCaseDone()
{
  if (g_level==0)
  {
    warn(g_yyFileName,g_yyLineNr,"Found an #else without a preceding #if.\n");
    return TRUE;
  }
  else
  {
    return g_levelGuard[g_level-1];
  }
}

static void setCaseDone(bool value)
{
  g_levelGuard[g_level-1]=value;
}

static QDict<void> g_allIncludes(10009);

static FileState *checkAndOpenFile(const QCString &fileName,bool &alreadyIncluded)
{
  alreadyIncluded = FALSE;
  FileState *fs = 0;
  //printf("checkAndOpenFile(%s)\n",fileName.data());
  QFileInfo fi(fileName);
  if (fi.exists() && fi.isFile())
  {
    static QStrList &exclPatterns = Config_getList(EXCLUDE_PATTERNS);
    if (patternMatch(fi,&exclPatterns)) return 0;

    QCString absName = fi.absFilePath().utf8();

    // global guard
    if (g_curlyCount==0) // not #include inside { ... }
    {
      if (g_allIncludes.find(absName)!=0)
      {
        alreadyIncluded = TRUE;
        //printf("  already included 1\n");
        return 0; // already done
      }
      g_allIncludes.insert(absName,(void *)0x8);
    }
    // check include stack for absName

    QStack<FileState> tmpStack;
    g_includeStack.setAutoDelete(FALSE);
    while ((fs=g_includeStack.pop()))
    {
      if (fs->fileName==absName) alreadyIncluded=TRUE;
      tmpStack.push(fs);
    }
    while ((fs=tmpStack.pop()))
    {
      g_includeStack.push(fs);
    }
    g_includeStack.setAutoDelete(TRUE);

    if (alreadyIncluded)
    {
      //printf("  already included 2\n");
      return 0;
    }
    //printf("#include %s\n",absName.data());

    fs = new FileState(fi.size()+4096);
    alreadyIncluded = FALSE;
    if (!readInputFile(absName,fs->fileBuf))
    { // error
      //printf("  error reading\n");
      delete fs;
      fs=0;
    }
    else
    {
      fs->oldFileBuf    = g_inputBuf;
      fs->oldFileBufPos = g_inputBufPos;
    }
  }
  return fs;
}

static FileState *findFile(const char *fileName,bool localInclude,bool &alreadyIncluded)
{
  //printf("** findFile(%s,%d) g_yyFileName=%s\n",fileName,localInclude,g_yyFileName.data());
  if (portable_isAbsolutePath(fileName))
  {
    FileState *fs = checkAndOpenFile(fileName,alreadyIncluded);
    if (fs)
    {
      setFileName(fileName);
      g_yyLineNr=1;
      return fs;
    }
    else if (alreadyIncluded)
    {
      return 0;
    }
  }
  if (localInclude && !g_yyFileName.isEmpty())
  {
    QFileInfo fi(g_yyFileName);
    if (fi.exists())
    {
      QCString absName = QCString(fi.dirPath(TRUE).data())+"/"+fileName;
      FileState *fs = checkAndOpenFile(absName,alreadyIncluded);
      if (fs)
      {
	setFileName(absName);
	g_yyLineNr=1;
	return fs;
      }
      else if (alreadyIncluded)
      {
	return 0;
      }
    }
  }
  if (g_pathList==0) 
  {
    return 0;
  }
  char *s=g_pathList->first();
  while (s)
  {
    QCString absName = (QCString)s+"/"+fileName;
    //printf("  Looking for %s in %s\n",fileName,s);
    FileState *fs = checkAndOpenFile(absName,alreadyIncluded);
    if (fs)
    {
      setFileName(absName);
      g_yyLineNr=1;
      //printf("  -> found it\n");
      return fs;
    }
    else if (alreadyIncluded)
    {
      return 0;
    }

    s=g_pathList->next();
  } 
  return 0;
}

static QCString extractTrailingComment(const char *s)
{
  if (s==0) return "";
  int i=strlen(s)-1;
  while (i>=0)
  {
    char c=s[i];
    switch (c)
    {
      case '/':
	{
	  i--;
	  if (i>=0 && s[i]=='*') // end of a comment block
	  {
	    i--;
	    while (i>0 && !(s[i-1]=='/' && s[i]=='*')) i--;
	    if (i==0) 
	    {
	      i++;
	    }
	    // only /*!< or /**< are treated as a comment for the macro name,
	    // otherwise the comment is treated as part of the macro definition
	    return ((s[i+1]=='*' || s[i+1]=='!') && s[i+2]=='<') ? &s[i-1] : ""; 
	  }
	  else
	  {
	    return "";
	  }
	} 
	break;
	// whitespace or line-continuation
      case ' ':
      case '\t': 
      case '\r':
      case '\n':
      case '\\':
	break;
      default:
	return "";
    }
    i--;
  }
  return "";
}

static int getNextChar(const QCString &expr,QCString *rest,uint &pos);
static int getCurrentChar(const QCString &expr,QCString *rest,uint pos);
static void unputChar(const QCString &expr,QCString *rest,uint &pos,char c);
static void expandExpression(QCString &expr,QCString *rest,int pos);

static QCString stringize(const QCString &s)
{
  QCString result;
  uint i=0;
  bool inString=FALSE;
  bool inChar=FALSE;
  char c,pc;
  while (i<s.length())
  {
    if (!inString && !inChar)
    {
      while (i<s.length() && !inString && !inChar)
      {
	c=s.at(i++);
	if (c=='"')
	{
	  result+="\\\"";
	  inString=TRUE;
	}
	else if (c=='\'')
	{
	  result+=c;
	  inChar=TRUE;
	}
	else
	{
	  result+=c;
	}
      }
    }
    else if (inChar)
    {
      while (i<s.length() && inChar)
      {
	c=s.at(i++);
	if (c=='\'')
	{
	  result+='\'';
	  inChar=FALSE;
	}
	else if (c=='\\')
	{
	  result+="\\\\";
	}
	else
	{
	  result+=c;
	}
      }
    }
    else
    {
      pc=0;
      while (i<s.length() && inString)
      {
	char c=s.at(i++);
	if (c=='"') 
	{
	  result+="\\\"";
	  inString= pc=='\\';
	}
	else if (c=='\\')
	  result+="\\\\";
	else
	  result+=c;
	pc=c;
      }
    }
  }
  //printf("stringize `%s'->`%s'\n",s.data(),result.data());
  return result;
}

/*! Execute all ## operators in expr. 
 * If the macro name before or after the operator contains a no-rescan 
 * marker (@-) then this is removed (before the concatenated macro name
 * may be expanded again.
 */
static void processConcatOperators(QCString &expr)
{
  //printf("processConcatOperators: in=`%s'\n",expr.data());
  QRegExp r("[ \\t\\n]*##[ \\t\\n]*"); 
  int l,n,i=0;
  if (expr.isEmpty()) return;
  while ((n=r.match(expr,i,&l))!=-1)
  {
    //printf("Match: `%s'\n",expr.data()+i);
    if (n+l+1<(int)expr.length() && expr.at(n+l)=='@' && expr.at(n+l+1)=='-')
    {
      // remove no-rescan marker after ID
      l+=2;
    }
    //printf("found `%s'\n",expr.mid(n,l).data());
    // remove the ## operator and the surrounding whitespace
    expr=expr.left(n)+expr.right(expr.length()-n-l);
    int k=n-1;
    while (k>=0 && isId(expr.at(k))) k--; 
    if (k>0 && expr.at(k)=='-' && expr.at(k-1)=='@')
    {
      // remove no-rescan marker before ID
      expr=expr.left(k-1)+expr.right(expr.length()-k-1);
      n-=2;
    }
    i=n;
  }
  //printf("processConcatOperators: out=`%s'\n",expr.data());
}

static void yyunput (int c,char *buf_ptr  );
static void returnCharToStream(char c)
{
  unput(c);
}

static inline void addTillEndOfString(const QCString &expr,QCString *rest,
                                       uint &pos,char term,QCString &arg)
{
  int cc;
  while ((cc=getNextChar(expr,rest,pos))!=EOF && cc!=0)
  {
    if (cc=='\\') arg+=(char)cc,cc=getNextChar(expr,rest,pos);
    else if (cc==term) return;
    arg+=(char)cc;
  }
}

/*! replaces the function macro \a def whose argument list starts at
 * \a pos in expression \a expr. 
 * Notice that this routine may scan beyond the \a expr string if needed.
 * In that case the characters will be read from the input file.
 * The replacement string will be returned in \a result and the 
 * length of the (unexpanded) argument list is stored in \a len.
 */ 
static bool replaceFunctionMacro(const QCString &expr,QCString *rest,int pos,int &len,const Define *def,QCString &result)
{
  //printf("replaceFunctionMacro(expr=%s,rest=%s,pos=%d,def=%s) level=%d\n",expr.data(),rest ? rest->data() : 0,pos,def->name.data(),g_level);
  uint j=pos;
  len=0;
  result.resize(0);
  int cc;
  while ((cc=getCurrentChar(expr,rest,j))!=EOF && isspace(cc)) 
  { 
    len++; 
    getNextChar(expr,rest,j); 
  }
  if (cc!='(') 
  { 
    unputChar(expr,rest,j,' '); 
    return FALSE; 
  }
  getNextChar(expr,rest,j); // eat the `(' character

  QDict<QCString> argTable;  // list of arguments
  argTable.setAutoDelete(TRUE);
  QCString arg;
  int argCount=0;
  bool done=FALSE;
  
  // PHASE 1: read the macro arguments
  if (def->nargs==0)
  {
    while ((cc=getNextChar(expr,rest,j))!=EOF && cc!=0)
    {
      char c = (char)cc;
      if (c==')') break;
    }
  }
  else
  {
    while (!done && (argCount<def->nargs || def->varArgs) && 
	((cc=getNextChar(expr,rest,j))!=EOF && cc!=0)
	  )
    {
      char c=(char)cc;
      if (c=='(') // argument is a function => search for matching )
      {
	int level=1;
	arg+=c;
	//char term='\0';
	while ((cc=getNextChar(expr,rest,j))!=EOF && cc!=0)
	{
	  char c=(char)cc;
	  //printf("processing %c: term=%c (%d)\n",c,term,term);
	  if (c=='\'' || c=='\"') // skip ('s and )'s inside strings
	  {
	    arg+=c;
	    addTillEndOfString(expr,rest,j,c,arg);
	  }
	  if (c==')')
	  {
	    level--;
	    arg+=c;
	    if (level==0) break;
	  }
	  else if (c=='(')
	  {
	    level++;
	    arg+=c;
	  }
	  else
	    arg+=c;
	}
      }
      else if (c==')' || c==',') // last or next argument found
      {
	if (c==',' && argCount==def->nargs-1 && def->varArgs)
	{
	  arg=arg.stripWhiteSpace();
	  arg+=',';
	}
	else
	{
	  QCString argKey;
	  argKey.sprintf("@%d",argCount++); // key name
	  arg=arg.stripWhiteSpace();
	  // add argument to the lookup table
	  argTable.insert(argKey, new QCString(arg));
	  arg.resize(0);
	  if (c==')') // end of the argument list
	  {
	    done=TRUE;
	  }
	}
      } 
      else if (c=='\"') // append literal strings
      {
	arg+=c; 
	bool found=FALSE;
	while (!found && (cc=getNextChar(expr,rest,j))!=EOF && cc!=0)
	{
	  found = cc=='"';
	  if (cc=='\\')
	  {
	    c=(char)cc;	  
	    arg+=c;
	    if ((cc=getNextChar(expr,rest,j))==EOF || cc==0) break;
	  }
	  c=(char)cc;	  
	  arg+=c;
	}
      }
      else if (c=='\'') // append literal characters
      {
	arg+=c;
	bool found=FALSE;
	while (!found && (cc=getNextChar(expr,rest,j))!=EOF && cc!=0)
	{
	  found = cc=='\'';
	  if (cc=='\\')
	  {
	    c=(char)cc;	  
	    arg+=c;
	    if ((cc=getNextChar(expr,rest,j))==EOF || cc==0) break;
	  }
	  c=(char)cc;
	  arg+=c;
	}
      }	    
      else // append other characters
      {
	arg+=c;
      }
    }
  }

  // PHASE 2: apply the macro function
  if (argCount==def->nargs || // same number of arguments
      (argCount>=def->nargs-1 && def->varArgs)) // variadic macro with at least as many
                                                // params as the non-variadic part (see bug731985)
  {
    uint k=0;
    // substitution of all formal arguments
    QCString resExpr;
    const QCString d=def->definition.stripWhiteSpace();
    //printf("Macro definition: %s\n",d.data());
    bool inString=FALSE;
    while (k<d.length())
    {
      if (d.at(k)=='@') // maybe a marker, otherwise an escaped @
      {
	if (d.at(k+1)=='@') // escaped @ => copy it (is unescaped later)
	{
	  k+=2;
	  resExpr+="@@"; // we unescape these later
	}
	else if (d.at(k+1)=='-') // no-rescan marker
	{
	  k+=2;
	  resExpr+="@-";
	}
	else // argument marker => read the argument number
	{
	  QCString key="@";
	  QCString *subst=0;
	  bool hash=FALSE;
	  int l=k-1;
	  // search for ## backward
	  if (l>=0 && d.at(l)=='"') l--;
	  while (l>=0 && d.at(l)==' ') l--;
	  if (l>0 && d.at(l)=='#' && d.at(l-1)=='#') hash=TRUE;
	  k++;
	  // scan the number
	  while (k<d.length() && d.at(k)>='0' && d.at(k)<='9') key+=d.at(k++);
	  if (!hash) 
	  {
	    // search for ## forward
	    l=k;
	    if (l<(int)d.length() && d.at(l)=='"') l++;
	    while (l<(int)d.length() && d.at(l)==' ') l++;
	    if (l<(int)d.length()-1 && d.at(l)=='#' && d.at(l+1)=='#') hash=TRUE;
	  }
	  //printf("request key %s result %s\n",key.data(),argTable[key]->data());
	  if (key.length()>1 && (subst=argTable[key])) 
	  {
	    QCString substArg=*subst;
	    //printf("substArg=`%s'\n",substArg.data());
	    // only if no ## operator is before or after the argument
	    // marker we do macro expansion.
	    if (!hash) expandExpression(substArg,0,0);
	    if (inString)
	    {
	      //printf("`%s'=stringize(`%s')\n",stringize(*subst).data(),subst->data());

	      // if the marker is inside a string (because a # was put 
	      // before the macro name) we must escape " and \ characters
	      resExpr+=stringize(substArg);
	    }
	    else
	    {
	      if (hash && substArg.isEmpty())
	      {
		resExpr+="@E"; // empty argument will be remove later on
	      }
	      else if (g_nospaces)
	      {
	        resExpr+=substArg;
	      }
	      else
	      {
	        resExpr+=" "+substArg+" ";
	      }
	    }
	  }
	}
      }
      else // no marker, just copy
      {
	if (!inString && d.at(k)=='\"') 
	{
	  inString=TRUE; // entering a literal string
	}
	else if (inString && d.at(k)=='\"' && (d.at(k-1)!='\\' || d.at(k-2)=='\\'))
	{
	  inString=FALSE; // leaving a literal string
	}
	resExpr+=d.at(k++);
      }
    }
    len=j-pos;
    result=resExpr;
    //printf("result after substitution `%s' expr=`%s'\n",
    //       result.data(),expr.mid(pos,len).data());
    return TRUE;
  }
  return FALSE;
}


/*! returns the next identifier in string \a expr by starting at position \a p.
 * The position of the identifier is returned (or -1 if nothing is found)
 * and \a l is its length. Any quoted strings are skipping during the search.
 */
static int getNextId(const QCString &expr,int p,int *l)
{
  int n;
  while (p<(int)expr.length())
  {
    char c=expr.at(p++);
    if (isdigit(c)) // skip number
    {
      while (p<(int)expr.length() && isId(expr.at(p))) p++;
    }
    else if (isalpha(c) || c=='_') // read id
    {
      n=p-1;
      while (p<(int)expr.length() && isId(expr.at(p))) p++;
      *l=p-n;
      return n; 
    }
    else if (c=='"') // skip string
    {
      char ppc=0,pc=c;
      if (p<(int)expr.length()) c=expr.at(p);
      while (p<(int)expr.length() && (c!='"' || (pc=='\\' && ppc!='\\'))) 
	// continue as long as no " is found, but ignoring \", but not \\"
      {
	ppc=pc;
	pc=c;
	c=expr.at(p);
	p++;
      }
      if (p<(int)expr.length()) ++p; // skip closing quote
    }
    else if (c=='/') // skip C Comment
    {
      //printf("Found C comment at p=%d\n",p);
      char pc=c;
      if (p<(int)expr.length()) 
      {
	c=expr.at(p);
        if (c=='*')  // Start of C comment
        { 
	  p++;
  	  while (p<(int)expr.length() && !(pc=='*' && c=='/'))
	  {
	    pc=c;
	    c=expr.at(p++);
	  }
        }
      }
      //printf("Found end of C comment at p=%d\n",p);
    }
  }
  return -1;
}

/*! performs recursive macro expansion on the string \a expr
 *  starting at position \a pos.
 *  May read additional characters from the input while re-scanning!
 *  If \a expandAll is \c TRUE then all macros in the expression are
 *  expanded, otherwise only the first is expanded.
 */
static void expandExpression(QCString &expr,QCString *rest,int pos)
{
  //printf("expandExpression(%s,%s)\n",expr.data(),rest ? rest->data() : 0);
  QCString macroName;
  QCString expMacro;
  bool definedTest=FALSE;
  int i=pos,l,p,len;
  while ((p=getNextId(expr,i,&l))!=-1) // search for an macro name
  {
    bool replaced=FALSE;
    macroName=expr.mid(p,l);
    //printf("macroName=%s\n",macroName.data());
    if (p<2 || !(expr.at(p-2)=='@' && expr.at(p-1)=='-')) // no-rescan marker?
    {
      if (g_expandedDict->find(macroName)==0) // expand macro
      {
	Define *def=DefineManager::instance().isDefined(macroName);
	if (definedTest) // macro name was found after defined 
	{
	  if (def) expMacro = " 1 "; else expMacro = " 0 ";
	  replaced=TRUE;
	  len=l;
	  definedTest=FALSE;
	}
	else if (def && def->nargs==-1) // simple macro
	{
	  // substitute the definition of the macro
	  //printf("macro `%s'->`%s'\n",macroName.data(),def->definition.data());
	  if (g_nospaces)
	  {
	    expMacro=def->definition.stripWhiteSpace();
	  }
	  else
	  {
	    expMacro=" "+def->definition.stripWhiteSpace()+" ";
	  }
	  //expMacro=def->definition.stripWhiteSpace();
	  replaced=TRUE;
	  len=l;
	  //printf("simple macro expansion=`%s'->`%s'\n",macroName.data(),expMacro.data());
	}
	else if (def && def->nargs>=0) // function macro
	{
	  replaced=replaceFunctionMacro(expr,rest,p+l,len,def,expMacro);
	  len+=l;
	}
        else if (macroName=="defined")
        {
  	  //printf("found defined inside macro definition '%s'\n",expr.right(expr.length()-p).data());
	  definedTest=TRUE;
        }

	if (replaced) // expand the macro and rescan the expression
	{
	    
	  //printf("replacing `%s'->`%s'\n",expr.mid(p,len).data(),expMacro.data());
	  QCString resultExpr=expMacro;
	  QCString restExpr=expr.right(expr.length()-len-p);
	  processConcatOperators(resultExpr);
	  if (def && !def->nonRecursive)
	  {
	    g_expandedDict->insert(macroName,def);
	    expandExpression(resultExpr,&restExpr,0);
	    g_expandedDict->remove(macroName);
	  }
	  expr=expr.left(p)+resultExpr+restExpr;
	  i=p;
	  //printf("new expression: %s\n",expr.data());
	}
	else // move to the next macro name
	{
	  //printf("moving to the next macro old=%d new=%d\n",i,p+l);
	  i=p+l;
	}
      }
      else // move to the next macro name
      {
	expr=expr.left(p)+"@-"+expr.right(expr.length()-p);
	//printf("macro already expanded, moving to the next macro expr=%s\n",expr.data());
	i=p+l+2;
	//i=p+l;
      }
    }
    else // no re-scan marker found, skip the macro name
    {
      //printf("skipping marked macro\n");
      i=p+l;
    }
  }
}

/*! replaces all occurrences of @@@@ in \a s by @@
 *  and removes all occurrences of @@E.
 *  All identifiers found are replaced by 0L
 */
QCString removeIdsAndMarkers(const char *s)
{
  //printf("removeIdsAndMarkers(%s)\n",s);
  const char *p=s;
  char c;
  bool inNum=FALSE;
  QCString result;
  if (p)
  {
    while ((c=*p))
    {
      if (c=='@') // replace @@ with @ and remove @E
      {
	if (*(p+1)=='@')
	{
	  result+=c; 
	}
	else if (*(p+1)=='E')
	{
	  // skip
	}
	p+=2;
      }
      else if (isdigit(c)) // number
      {
	result+=c;
	p++;
        inNum=TRUE;	
      }
      else if (c=='d' && !inNum) // identifier starting with a `d'
      {
	if (qstrncmp(p,"defined ",8)==0 || qstrncmp(p,"defined(",8)==0) 
	           // defined keyword
	{
	  p+=7; // skip defined
	}
	else
	{
	  result+="0L";
	  p++;
	  while ((c=*p) && isId(c)) p++;
	}
      }
      else if ((isalpha(c) || c=='_') && !inNum) // replace identifier with 0L
      {
	result+="0L";
	p++;
	while ((c=*p) && isId(c)) p++;
	if (*p=='(') // undefined function macro
	{
	  p++;
	  int count=1;
	  while ((c=*p++))
	  {
	    if (c=='(') count++;
	    else if (c==')')
	    {
	      count--;
	      if (count==0) break;
	    }
	    else if (c=='/')
	    {
	      char pc=c;
	      c=*++p;
	      if (c=='*') // start of C comment
	      {
		while (*p && !(pc=='*' && c=='/')) // search end of comment
		{
		  pc=c;
		  c=*++p;
		}
		p++;
	      }
	    }
	  }
	}
      }
      else if (c=='/') // skip C comments
      {
	char pc=c;
	c=*++p;
	if (c=='*') // start of C comment
	{ 
	  while (*p && !(pc=='*' && c=='/')) // search end of comment
	  {
	    pc=c;
	    c=*++p;
	  }
	  p++;
	}
	else // oops, not comment but division
	{
	  result+=pc;
	  goto nextChar;
	}
      }
      else 
      {
nextChar:
	result+=c;
	char lc=tolower(c);
	if (!isId(lc) && lc!='.' /*&& lc!='-' && lc!='+'*/) inNum=FALSE;
	p++;
      }
    }
  }
  //printf("removeIdsAndMarkers(%s)=%s\n",s,result.data());
  return result;
}

/*! replaces all occurrences of @@ in \a s by @
 *  \par assumption: 
 *   \a s only contains pairs of @@'s
 */
QCString removeMarkers(const char *s)
{
  const char *p=s;
  char c;
  QCString result;
  if (p)
  {
    while ((c=*p))
    {
      switch(c)
      {
	case '@': // replace @@ with @
	  {
	    if (*(p+1)=='@')
	    {
	      result+=c; 
	    }
	    p+=2;
	  }
	  break;
	case '/': // skip C comments
	  {
	    result+=c;
	    char pc=c;
	    c=*++p;
	    if (c=='*') // start of C comment
	    { 
	      while (*p && !(pc=='*' && c=='/')) // search end of comment
	      {
		if (*p=='@' && *(p+1)=='@') 
		  result+=c,p++;
		else 
		  result+=c;
		pc=c;
		c=*++p;
	      }
	      if (*p) result+=c,p++;
	    }
	  }
	  break;
	case '"': // skip string literals
	  {
	    result+=c;
	    char pc=c;
	    c=*++p;
	    while (*p && (c!='"' || pc=='\\')) // no end quote
	    {
	      result+=c;
	      c=*++p;
	    }
	    if (*p) result+=c,p++; 
	  }
	  break;
	case '\'': // skip char literals
	  {
	    result+=c;
	    char pc=c;
	    c=*++p;
	    while (*p && (c!='\'' || pc=='\\')) // no end quote
	    {
	      result+=c;
	      c=*++p;
	    }
	    if (*p) result+=c,p++; 
	  }
	  break;
	default:
	  {
	    result+=c;
	    p++;
	  }
	  break;
      }
    }
  }
  //printf("RemoveMarkers(%s)=%s\n",s,result.data());
  return result;
}

/*! compute the value of the expression in string \a expr.
 *  If needed the function may read additional characters from the input.
 */

bool computeExpression(const QCString &expr)
{
  QCString e=expr;
  expandExpression(e,0,0);
  //printf("after expansion `%s'\n",e.data());
  e = removeIdsAndMarkers(e);
  if (e.isEmpty()) return FALSE;
  //printf("parsing `%s'\n",e.data());
  return parseconstexp(g_yyFileName,g_yyLineNr,e);
}

/*! expands the macro definition in \a name
 *  If needed the function may read additional characters from the input
 */

QCString expandMacro(const QCString &name)
{
  QCString n=name;
  expandExpression(n,0,0);
  n=removeMarkers(n);
  //printf("expandMacro `%s'->`%s'\n",name.data(),n.data());
  return n;
}

Define *newDefine()
{
  Define *def=new Define;
  def->name       = g_defName;
  def->definition = g_defText.stripWhiteSpace();
  def->nargs      = g_defArgs;
  def->fileName   = g_yyFileName; 
  def->fileDef    = g_yyFileDef;
  def->lineNr     = g_yyLineNr-g_yyMLines;
  def->columnNr   = g_yyColNr;
  def->varArgs    = g_defVarArgs;
  //printf("newDefine: %s %s file: %s\n",def->name.data(),def->definition.data(),
  //    def->fileDef ? def->fileDef->name().data() : def->fileName.data());
  //printf("newDefine: `%s'->`%s'\n",def->name.data(),def->definition.data());
  if (!def->name.isEmpty() && Doxygen::expandAsDefinedDict[def->name])
  {
    def->isPredefined=TRUE;
  }
  return def;
}

void addDefine()
{
  if (g_skip) return; // do not add this define as it is inside a 
                      // conditional section (cond command) that is disabled.
  if (!Doxygen::gatherDefines) return;

  //printf("addDefine %s %s\n",g_defName.data(),g_defArgsStr.data());
  //ArgumentList *al = new ArgumentList;
  //stringToArgumentList(g_defArgsStr,al);
  MemberDef *md=new MemberDef(
      g_yyFileName,g_yyLineNr-g_yyMLines,g_yyColNr,
      "#define",g_defName,g_defArgsStr,0,
      Public,Normal,FALSE,Member,MemberType_Define,0,0);
  if (!g_defArgsStr.isEmpty())
  {
    ArgumentList *argList = new ArgumentList;
    //printf("addDefine() g_defName=`%s' g_defArgsStr=`%s'\n",g_defName.data(),g_defArgsStr.data());
    stringToArgumentList(g_defArgsStr,argList);
    md->setArgumentList(argList);
  }
  //printf("Setting initializer for `%s' to `%s'\n",g_defName.data(),g_defText.data());
  int l=g_defLitText.find('\n');
  if (l>0 && g_defLitText.left(l).stripWhiteSpace()=="\\")
  {
    // strip first line if it only contains a slash
    g_defLitText = g_defLitText.right(g_defLitText.length()-l-1);
  }
  else if (l>0)
  {
    // align the items on the first line with the items on the second line
    int k=l+1;
    const char *p=g_defLitText.data()+k;
    char c;
    while ((c=*p++) && (c==' ' || c=='\t')) k++;
    g_defLitText=g_defLitText.mid(l+1,k-l-1)+g_defLitText.stripWhiteSpace();
  }
  md->setInitializer(g_defLitText.stripWhiteSpace());

  //printf("pre.l: md->setFileDef(%p)\n",g_inputFileDef);
  md->setFileDef(g_inputFileDef);
  md->setDefinition("#define "+g_defName);

  MemberName *mn=Doxygen::functionNameSDict->find(g_defName);
  if (mn==0)
  {
    mn = new MemberName(g_defName);
    Doxygen::functionNameSDict->append(g_defName,mn);
  }
  mn->append(md);
  if (g_yyFileDef) 
  {
    g_yyFileDef->insertMember(md);
  }

  //Define *d;
  //if ((d=defineDict[g_defName])==0) defineDict.insert(g_defName,newDefine()); 
}

static inline void outputChar(char c)
{
  if (g_includeStack.isEmpty() || g_curlyCount>0) g_outputBuf->addChar(c);
}

static inline void outputArray(const char *a,int len)
{
  if (g_includeStack.isEmpty() || g_curlyCount>0) g_outputBuf->addArray(a,len);
}

static void readIncludeFile(const QCString &inc)
{
  static bool searchIncludes = Config_getBool(SEARCH_INCLUDES);
  uint i=0;

  // find the start of the include file name
  while (i<inc.length() &&
         (inc.at(i)==' ' || inc.at(i)=='"' || inc.at(i)=='<')
        ) i++;
  uint s=i;

  // was it a local include?
  bool localInclude = s>0 && inc.at(s-1)=='"';

  // find the end of the include file name
  while (i<inc.length() && inc.at(i)!='"' && inc.at(i)!='>') i++;

  if (s<inc.length() && i>s) // valid include file name found
  {
    // extract include path+name
    QCString incFileName=inc.mid(s,i-s).stripWhiteSpace();

    QCString dosExt = incFileName.right(4);
    if (dosExt==".exe" || dosExt==".dll" || dosExt==".tlb")
    {
      // skip imported binary files (e.g. M$ type libraries)
      return;
    }

    QCString oldFileName = g_yyFileName;
    FileDef *oldFileDef  = g_yyFileDef;
    int oldLineNr        = g_yyLineNr;
    //printf("Searching for `%s'\n",incFileName.data());

    // absIncFileName avoids difficulties for incFileName starting with "../" (bug 641336)
    QCString absIncFileName = incFileName;
    {
      QFileInfo fi(g_yyFileName);
      if (fi.exists())
      {
	QCString absName = QCString(fi.dirPath(TRUE).data())+"/"+incFileName;
        QFileInfo fi2(absName);
        if (fi2.exists())
        {
	  absIncFileName=fi2.absFilePath().utf8();
	}
	else if (searchIncludes) // search in INCLUDE_PATH as well
	{
	  QStrList &includePath = Config_getList(INCLUDE_PATH);
	  char *s=includePath.first();
	  while (s)
	  {
	    QFileInfo fi(s);
	    if (fi.exists() && fi.isDir())
	    {
	      QCString absName = QCString(fi.absFilePath().utf8())+"/"+incFileName;
	      //printf("trying absName=%s\n",absName.data());
	      QFileInfo fi2(absName);
	      if (fi2.exists())
	      {
		absIncFileName=fi2.absFilePath().utf8();
		break;
	      }
	      //printf( "absIncFileName = %s\n", absIncFileName.data() );
	    }
	    s=includePath.next();
	  }
	}
	//printf( "absIncFileName = %s\n", absIncFileName.data() );
      }
    }
    DefineManager::instance().addInclude(g_yyFileName,absIncFileName);
    DefineManager::instance().addFileToContext(absIncFileName);

    // findFile will overwrite g_yyFileDef if found
    FileState *fs;
    bool alreadyIncluded = FALSE;
    //printf("calling findFile(%s)\n",incFileName.data());
    if ((fs=findFile(incFileName,localInclude,alreadyIncluded))) // see if the include file can be found
    {
      //printf("Found include file!\n");
      if (Debug::isFlagSet(Debug::Preprocessor))
      {
        for (i=0;i<g_includeStack.count();i++) 
        {
          Debug::print(Debug::Preprocessor,0,"  ");
        }
        //msg("#include %s: parsing...\n",incFileName.data());
      }
      if (oldFileDef)
      {
        // add include dependency to the file in which the #include was found
	bool ambig;
	// change to absolute name for bug 641336 
        FileDef *incFd = findFileDef(Doxygen::inputNameDict,absIncFileName,ambig);
        oldFileDef->addIncludeDependency(ambig ? 0 : incFd,incFileName,localInclude,g_isImported,FALSE);
        // add included by dependency
        if (g_yyFileDef)
        {
          //printf("Adding include dependency %s->%s\n",oldFileDef->name().data(),incFileName.data());
          g_yyFileDef->addIncludedByDependency(oldFileDef,oldFileDef->docName(),localInclude,g_isImported);
        }
      }
      else if (g_inputFileDef)
      {
        g_inputFileDef->addIncludeDependency(0,absIncFileName,localInclude,g_isImported,TRUE);
      }
      fs->bufState = YY_CURRENT_BUFFER;
      fs->lineNr   = oldLineNr;
      fs->fileName = oldFileName;
      // push the state on the stack
      g_includeStack.push(fs);
      // set the scanner to the include file

      // Deal with file changes due to 
      // #include's within { .. } blocks
      QCString lineStr(g_yyFileName.length()+20);
      lineStr.sprintf("# 1 \"%s\" 1\n",g_yyFileName.data());
      outputArray(lineStr.data(),lineStr.length());

      DBG_CTX((stderr,"Switching to include file %s\n",incFileName.data()));
      g_expectGuard=TRUE;
      g_inputBuf   = &fs->fileBuf;
      g_inputBufPos=0;
      preYY_switch_to_buffer(preYY_create_buffer(0,YY_BUF_SIZE));
    }
    else
    {
      //printf("  calling findFile(%s) alreadyInc=%d\n",incFileName.data(),alreadyIncluded);
      if (oldFileDef)
      {
	bool ambig;
	//QCString absPath = incFileName;
	//if (QDir::isRelativePath(incFileName))
	//{
	//  absPath = QDir::cleanDirPath(oldFileDef->getPath()+"/"+incFileName);
	//  //printf("%s + %s -> resolved path %s\n",oldFileDef->getPath().data(),incFileName.data(),absPath.data());
	//}

	// change to absolute name for bug 641336 
	FileDef *fd = findFileDef(Doxygen::inputNameDict,absIncFileName,ambig);
	//printf("%s::findFileDef(%s)=%p\n",oldFileDef->name().data(),incFileName.data(),fd);
	// add include dependency to the file in which the #include was found
	oldFileDef->addIncludeDependency(ambig ? 0 : fd,incFileName,localInclude,g_isImported,FALSE);
	// add included by dependency
        if (fd)
        {
          //printf("Adding include dependency (2) %s->%s ambig=%d\n",oldFileDef->name().data(),fd->name().data(),ambig);
          fd->addIncludedByDependency(oldFileDef,oldFileDef->docName(),localInclude,g_isImported);
        }
      }
      else if (g_inputFileDef)
      {
        g_inputFileDef->addIncludeDependency(0,absIncFileName,localInclude,g_isImported,TRUE);
      }
      if (Debug::isFlagSet(Debug::Preprocessor))
      {
	if (alreadyIncluded)
	{
          Debug::print(Debug::Preprocessor,0,"#include %s: already included! skipping...\n",qPrint(incFileName));
	}
	else
	{
          Debug::print(Debug::Preprocessor,0,"#include %s: not found! skipping...\n",qPrint(incFileName));
	}
        //printf("error: include file %s not found\n",preYYtext);
      }
      if (g_curlyCount>0 && !alreadyIncluded) // failed to find #include inside { ... }
      {
	warn(g_yyFileName,g_yyLineNr,"include file %s not found, perhaps you forgot to add its directory to INCLUDE_PATH?",incFileName.data());
      }
    }
  }
}

/* ----------------------------------------------------------------- */

static void startCondSection(const char *sectId)
{
  //printf("startCondSection: skip=%d stack=%d\n",g_skip,g_condStack.count());
  CondParser prs;
  bool expResult = prs.parse(g_yyFileName,g_yyLineNr,sectId);
  g_condStack.push(new CondCtx(g_yyLineNr,sectId,g_skip));
  if (!expResult)
  {
    g_skip=TRUE;
  }
  //printf("  expResult=%d skip=%d\n",expResult,g_skip);
}

static void endCondSection()
{
  if (g_condStack.isEmpty())
  {
    g_skip=FALSE;
  }
  else
  {
    CondCtx *ctx = g_condStack.pop();
    g_skip=ctx->skip;
    delete ctx;
  }
  //printf("endCondSection: skip=%d stack=%d\n",g_skip,g_condStack.count());
}

static void forceEndCondSection()
{
  while (!g_condStack.isEmpty())
  {
    delete g_condStack.pop();
  }
  g_skip=FALSE;
}

static QCString escapeAt(const char *text)
{
  QCString result;
  if (text)
  {
    char c;
    const char *p=text;
    while ((c=*p++))
    {
      if (c=='@') result+="@@"; else result+=c;
    }
  }
  return result;
}

static char resolveTrigraph(char c)
{
  switch (c)
  {
    case '=': return '#';
    case '/': return '\\';
    case '\'': return '^';
    case '(': return '[';
    case ')': return ']';
    case '!': return '|';
    case '<': return '{';
    case '>': return '}';
    case '-': return '~';
  }
  return '?';
}

/* ----------------------------------------------------------------- */

#undef  YY_INPUT
#define YY_INPUT(buf,result,max_size) result=yyread(buf,max_size);

static int yyread(char *buf,int max_size)
{
  int bytesInBuf = g_inputBuf->curPos()-g_inputBufPos;
  int bytesToCopy = QMIN(max_size,bytesInBuf);
  memcpy(buf,g_inputBuf->data()+g_inputBufPos,bytesToCopy);
  g_inputBufPos+=bytesToCopy;
  return bytesToCopy;
}

/* ----------------------------------------------------------------- */





































#line 4329 "/home/INTRANET/aitoumel/myfiles/NeuronProject/Week1/doxygen-master/build/generated_src/pre.cpp"

#define INITIAL 0
#define Start 1
#define Command 2
#define SkipCommand 3
#define SkipLine 4
#define SkipString 5
#define CopyLine 6
#define CopyString 7
#define CopyStringFtn 8
#define Include 9
#define IncludeID 10
#define EndImport 11
#define DefName 12
#define DefineArg 13
#define DefineText 14
#define SkipCPPBlock 15
#define Ifdef 16
#define Ifndef 17
#define SkipCComment 18
#define ArgCopyCComment 19
#define CopyCComment 20
#define SkipVerbatim 21
#define SkipCPPComment 22
#define RemoveCComment 23
#define RemoveCPPComment 24
#define Guard 25
#define DefinedExpr1 26
#define DefinedExpr2 27
#define SkipDoubleQuote 28
#define SkipSingleQuote 29
#define UndefName 30
#define IgnoreLine 31
#define FindDefineArgs 32
#define ReadString 33
#define CondLineC 34
#define CondLineCpp 35
#define SkipCond 36

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int preYYlex_destroy (void );

int preYYget_debug (void );

void preYYset_debug (int debug_flag  );

YY_EXTRA_TYPE preYYget_extra (void );

void preYYset_extra (YY_EXTRA_TYPE user_defined  );

FILE *preYYget_in (void );

void preYYset_in  (FILE * in_str  );

FILE *preYYget_out (void );

void preYYset_out  (FILE * out_str  );

int preYYget_leng (void );

char *preYYget_text (void );

int preYYget_lineno (void );

void preYYset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int preYYwrap (void );
#else
extern int preYYwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( preYYtext, preYYleng, 1, preYYout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( preYYin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( preYYin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, preYYin))==0 && ferror(preYYin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(preYYin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int preYYlex (void);

#define YY_DECL int preYYlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after preYYtext and preYYleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( preYYleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(preYYtext[preYYleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 1772 "pre.l"


#line 4558 "/home/INTRANET/aitoumel/myfiles/NeuronProject/Week1/doxygen-master/build/generated_src/pre.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)preYYalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in preYYlex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! preYYin )
			preYYin = stdin;

		if ( ! preYYout )
			preYYout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			preYYensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				preYY_create_buffer(preYYin,YY_BUF_SIZE );
		}

		preYY_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of preYYtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1339 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_current_state != 1338 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 1774 "pre.l"

	YY_BREAK
case 2:
YY_RULE_SETUP
#line 1775 "pre.l"

	YY_BREAK
case 3:
YY_RULE_SETUP
#line 1776 "pre.l"

	YY_BREAK
case 4:
YY_RULE_SETUP
#line 1777 "pre.l"
{ // Trigraph
  					  unput(resolveTrigraph(preYYtext[2]));
  					}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 1780 "pre.l"
{ BEGIN(Command); g_yyColNr+=preYYleng; g_yyMLines=0;}
	YY_BREAK
case 6:
/* rule 6 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 1781 "pre.l"
{
 					  outputArray(preYYtext,(int)preYYleng);
  					  BEGIN(CopyLine); 
					}
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 1785 "pre.l"
{ // constructors?
					  int i;
					  for (i=(int)preYYleng-1;i>=0;i--)
					  {
					    unput(preYYtext[i]);
					  }
					  BEGIN(CopyLine);
                                        }
	YY_BREAK
case 8:
/* rule 8 can match eol */
#line 1794 "pre.l"
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 1794 "pre.l"
{ // function like macro
  					  static bool skipFuncMacros = Config_getBool(SKIP_FUNCTION_MACROS);
					  QCString name(preYYtext);
					  name=name.left(name.find('(')).stripWhiteSpace();

					  Define *def=0;
					  if (skipFuncMacros && 
					      name!="Q_PROPERTY" &&
					      !(
					         (g_includeStack.isEmpty() || g_curlyCount>0) &&
					         g_macroExpansion &&
					         (def=DefineManager::instance().isDefined(name)) &&
						 /*macroIsAccessible(def) &&*/
					         (!g_expandOnlyPredef || def->isPredefined)
					       )
					     )
					  {
					    outputChar('\n');
					    g_yyLineNr++;
					  }
					  else // don't skip
					  {
					    int i;
					    for (i=(int)preYYleng-1;i>=0;i--)
					    {
					      unput(preYYtext[i]);
					    }
					    BEGIN(CopyLine);
					  }
  					}
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 1824 "pre.l"
{
                                          QCString text=preYYtext;
  					  g_yyLineNr+=text.contains('\n');
					  outputArray(preYYtext,(int)preYYleng);
  					}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 1829 "pre.l"
{ // count brackets inside the main file
  					  if (g_includeStack.isEmpty()) 
					  {
					    g_curlyCount++;
					  }
					  outputChar(*preYYtext);
  					}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 1836 "pre.l"
{ // count brackets inside the main file
  					  if (g_includeStack.isEmpty() && g_curlyCount>0) 
					  {
					    g_curlyCount--;
					  }
					  outputChar(*preYYtext);
  					}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 1843 "pre.l"
{ 
  					  outputArray(preYYtext,(int)preYYleng);
					}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 1846 "pre.l"
{ 
  					  outputArray(preYYtext,(int)preYYleng);
					}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 1849 "pre.l"
{ 
  					  outputArray(preYYtext,(int)preYYleng);
					}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 1852 "pre.l"
{
					  outputChar(*preYYtext);
					  BEGIN( CopyString );
					}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 1856 "pre.l"
{
                                          if (getLanguageFromFileName(g_yyFileName)!=SrcLangExt_Fortran) REJECT;
					  outputChar(*preYYtext);
					  BEGIN( CopyStringFtn );
					}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 1861 "pre.l"
{
  					  outputArray(preYYtext,(int)preYYleng);
					}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 1864 "pre.l"
{
					  outputArray(preYYtext,(int)preYYleng);
					}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 1867 "pre.l"
{
					  outputChar(*preYYtext);
					  BEGIN( CopyLine );
					}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 1871 "pre.l"
{
  					  outputArray(preYYtext,(int)preYYleng);
					}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 1874 "pre.l"
{
					  outputArray(preYYtext,(int)preYYleng);
					}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 1877 "pre.l"
{
					  outputChar(*preYYtext);
					  BEGIN( CopyLine );
					}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 1881 "pre.l"
{
  					  g_expectGuard = FALSE;
  					  Define *def=0;
					  //def=g_globalDefineDict->find(preYYtext);
					  //def=DefineManager::instance().isDefined(preYYtext);
					  //printf("Search for define %s found=%d g_includeStack.isEmpty()=%d "
					  //       "g_curlyCount=%d g_macroExpansion=%d g_expandOnlyPredef=%d "
					  //	 "isPreDefined=%d\n",preYYtext,def ? 1 : 0,
					  //	 g_includeStack.isEmpty(),g_curlyCount,g_macroExpansion,g_expandOnlyPredef,
					  //	 def ? def->isPredefined : -1
					  //	);
					  if ((g_includeStack.isEmpty() || g_curlyCount>0) &&
					      g_macroExpansion &&
					      (def=DefineManager::instance().isDefined(preYYtext)) &&
				              /*(def->isPredefined || macroIsAccessible(def)) && */
					      (!g_expandOnlyPredef || def->isPredefined)
					     )
					  {
					    //printf("Found it! #args=%d\n",def->nargs);
					    g_roundCount=0;
					    g_defArgsStr=preYYtext;
					    if (def->nargs==-1) // no function macro
					    {
					      QCString result = def->isPredefined ? def->definition : expandMacro(g_defArgsStr);
					      outputArray(result,result.length());
					    }
					    else // zero or more arguments
					    {
					      g_findDefArgContext = CopyLine;
					      BEGIN(FindDefineArgs);
					    }
					  }
					  else
					  {
					    outputArray(preYYtext,(int)preYYleng);
					  }
  					}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 1918 "pre.l"
{
                                          Define *def=0;
  					  if ((g_includeStack.isEmpty() || g_curlyCount>0) && 
					      g_macroExpansion &&
					      (def=DefineManager::instance().isDefined(preYYtext)) &&
					      def->nargs==-1 &&
				              /*(def->isPredefined || macroIsAccessible(def)) &&*/
					      (!g_expandOnlyPredef || def->isPredefined)
					     )
					  {
					    QCString result=def->isPredefined ? def->definition : expandMacro(preYYtext); 
					    outputArray(result,result.length());
					  }
					  else
					  {
					    outputArray(preYYtext,(int)preYYleng);
					  }
  					}
	YY_BREAK
case 26:
/* rule 26 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 1936 "pre.l"
{ // strip line continuation characters
  					}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 1938 "pre.l"
{
  					  outputChar(*preYYtext);
  					}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 1941 "pre.l"
{
  					  outputChar('\n');
					  BEGIN(Start);
					  g_yyLineNr++;
					  g_yyColNr=1;
  					}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 1947 "pre.l"
{
  					  g_defArgsStr+='(';
  					  g_roundCount++;
  					}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 1951 "pre.l"
{
  					  g_defArgsStr+=')';
					  g_roundCount--;
					  if (g_roundCount==0)
					  {
					    QCString result=expandMacro(g_defArgsStr);
					    //printf("g_defArgsStr=`%s'->`%s'\n",g_defArgsStr.data(),result.data());
					    if (g_findDefArgContext==CopyLine)
					    {
					      outputArray(result,result.length());
					      BEGIN(g_findDefArgContext);
					    }
					    else // g_findDefArgContext==IncludeID
					    {
					      readIncludeFile(result);
					      g_nospaces=FALSE;
					      BEGIN(Start);
					    }
					  }
  					}
	YY_BREAK
/*
<FindDefineArgs>")"{B}*"("		{
  					  g_defArgsStr+=preYYtext;
  					}
  */
case 31:
YY_RULE_SETUP
#line 1976 "pre.l"
{
  					  g_defArgsStr+=preYYtext;
  					}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 1979 "pre.l"
{
                                          g_defArgsStr+=preYYtext;
                                          BEGIN(ArgCopyCComment);
                                        }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 1983 "pre.l"
{
  					  g_defArgsStr+=*preYYtext;
  					  BEGIN(ReadString);
  					}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 1987 "pre.l"
{
                                          if (getLanguageFromFileName(g_yyFileName)!=SrcLangExt_Fortran) REJECT;
                                          g_defArgsStr+=*preYYtext;
                                          BEGIN(ReadString);
                                        }
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 1992 "pre.l"
{
                                          g_defArgsStr+=' ';
  					  g_yyLineNr++;
					  outputChar('\n');
  					}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 1997 "pre.l"
{
  					  g_defArgsStr+="@@";
  					}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 2000 "pre.l"
{
  					  g_defArgsStr+=*preYYtext;
  					}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 2003 "pre.l"
{
					  g_defArgsStr+=preYYtext;
  					}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 2006 "pre.l"
{
					  g_defArgsStr+=preYYtext;
  					  BEGIN(FindDefineArgs);
  					}
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 2010 "pre.l"
{ 
                                          g_defArgsStr+=' ';
  					  g_yyLineNr++;
					  outputChar('\n');
  					}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 2015 "pre.l"
{ 
                                          g_defArgsStr+=preYYtext;
                                        }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 2018 "pre.l"
{
  					  g_defArgsStr+=*preYYtext;
					  BEGIN(FindDefineArgs);
  					}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 2022 "pre.l"
{
                                          if (getLanguageFromFileName(g_yyFileName)!=SrcLangExt_Fortran) REJECT;
                                          g_defArgsStr+=*preYYtext;
                                          BEGIN(FindDefineArgs);
                                        }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 2028 "pre.l"
{
  					  g_defArgsStr+=preYYtext;
  					}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 2031 "pre.l"
{
  					  g_defArgsStr+=preYYtext;
  					}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 2034 "pre.l"
{
  					  g_defArgsStr+=*preYYtext;
  					}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 2037 "pre.l"
{
  					  g_isImported = preYYtext[1]=='m';
  					  if (g_macroExpansion) 
					    BEGIN(IncludeID);
  					}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 2042 "pre.l"
{ 
  					  g_isImported = preYYtext[1]=='m';
					  char c[2];
					  c[0]=preYYtext[preYYleng-1];c[1]='\0';
					  g_incName=c;
  					  BEGIN(Include); 
					}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 2049 "pre.l"
{ 
  			                  //printf("!!!DefName\n"); 
					  g_yyColNr+=preYYleng;
  					  BEGIN(DefName); 
					}
	YY_BREAK
case 50:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2054 "pre.l"
{
  					  incrLevel();
					  g_guardExpr.resize(0);
  					  BEGIN(DefinedExpr2);
  					}
	YY_BREAK
case 51:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2059 "pre.l"
{
  					  //printf("Pre.l: ifdef\n");
  					  incrLevel();
					  g_guardExpr.resize(0);
  					  BEGIN(DefinedExpr1);
  					}
	YY_BREAK
case 52:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2065 "pre.l"
{
  					  incrLevel();
					  g_guardExpr="! ";
  					  BEGIN(DefinedExpr2);
					}
	YY_BREAK
case 53:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2070 "pre.l"
{
  					  incrLevel();
					  g_guardExpr="! ";
  					  BEGIN(DefinedExpr1);
  					}
	YY_BREAK
case 54:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2075 "pre.l"
{
  					  incrLevel();
					  g_guardExpr.resize(0);
					  BEGIN(Guard);
					}
	YY_BREAK
case 55:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2080 "pre.l"
{
  					  if (!otherCaseDone())
					  {
					    g_guardExpr.resize(0);
					    BEGIN(Guard);  
					  }
					  else
					  {
					    g_ifcount=0;
					    BEGIN(SkipCPPBlock);
					  }
  					}
	YY_BREAK
case 56:
/* rule 56 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2092 "pre.l"
{
					  //printf("else g_levelGuard[%d]=%d\n",g_level-1,g_levelGuard[g_level-1]);
  					  if (otherCaseDone())
					  {
					    g_ifcount=0;
					    BEGIN(SkipCPPBlock);
					  }
					  else
					  {
					    setCaseDone(TRUE);
					    //g_levelGuard[g_level-1]=TRUE;
					  } 
  					}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 2105 "pre.l"
{
  					  BEGIN(UndefName);
  					}
	YY_BREAK
case 58:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2108 "pre.l"
{
  					  if (!otherCaseDone())
					  {
					    g_guardExpr.resize(0);
  					    BEGIN(Guard);
					  }
  					}
	YY_BREAK
case 59:
/* rule 59 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2115 "pre.l"
{
  					  //printf("Pre.l: #endif\n");
  					  decrLevel();
  					}
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 2119 "pre.l"
{
  					  outputChar('\n');
  					  BEGIN(Start);
					  g_yyLineNr++;
  					}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 2124 "pre.l"
{
                                          g_expectGuard = FALSE;
                                        }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 2127 "pre.l"
{ // unknown directive
					  BEGIN(IgnoreLine);
					}
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 2130 "pre.l"
{
  					  outputChar('\n');
					  g_yyLineNr++;
					}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 2134 "pre.l"

	YY_BREAK
case 65:
YY_RULE_SETUP
#line 2135 "pre.l"
{g_yyColNr+=preYYleng;}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 2136 "pre.l"
{
  					  Define *def;
  					  if ((def=DefineManager::instance().isDefined(preYYtext)) 
					      /*&& !def->isPredefined*/
					      && !def->nonRecursive
					     )
					  {
					    //printf("undefining %s\n",preYYtext);
					    def->undef=TRUE;
					  }
					  BEGIN(Start);
  					}
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 2148 "pre.l"
{
  					  outputChar('\n');
  					  g_guardExpr+=' ';
					  g_yyLineNr++;
  					}
	YY_BREAK
case 68:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2153 "pre.l"
{
    					  BEGIN(DefinedExpr2);
    					}
	YY_BREAK
case 69:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2156 "pre.l"
{
    					  BEGIN(DefinedExpr1);
    					}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 2159 "pre.l"
{ g_guardExpr+=preYYtext; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 2160 "pre.l"
{ g_guardExpr+=*preYYtext; }
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 2161 "pre.l"
{
  					  unput(*preYYtext);
  					  //printf("Guard: `%s'\n",
					  //    g_guardExpr.data());
					  bool guard=computeExpression(g_guardExpr);
					  setCaseDone(guard);
					  //printf("if g_levelGuard[%d]=%d\n",g_level-1,g_levelGuard[g_level-1]);
					  if (guard)
					  {
					    BEGIN(Start);
					  } 
					  else
					  {
					    g_ifcount=0;
					    BEGIN(SkipCPPBlock);
					  }
  					}
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 2178 "pre.l"
{ g_yyLineNr++; outputChar('\n'); }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 2179 "pre.l"
{
  					  if (DefineManager::instance().isDefined(preYYtext) || g_guardName==preYYtext)
					    g_guardExpr+=" 1L ";
					  else
					    g_guardExpr+=" 0L ";
					  g_lastGuardName=preYYtext;
					  BEGIN(Guard);
  					}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 2187 "pre.l"
{
  					  if (DefineManager::instance().isDefined(preYYtext) || g_guardName==preYYtext)
					    g_guardExpr+=" 1L ";
					  else
					    g_guardExpr+=" 0L ";
					  g_lastGuardName=preYYtext;
  					}
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 2194 "pre.l"
{ // should not happen, handle anyway
                                          g_yyLineNr++;
  					  g_ifcount=0;
 					  BEGIN(SkipCPPBlock); 
					}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 2199 "pre.l"
{
  					  BEGIN(Guard);
  					}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 2202 "pre.l"

	YY_BREAK
case 79:
YY_RULE_SETUP
#line 2203 "pre.l"
{ BEGIN(SkipCommand); }
	YY_BREAK
case 80:
/* rule 80 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2204 "pre.l"
{ BEGIN(SkipLine); }
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 2205 "pre.l"
{ g_yyLineNr++; outputChar('\n'); }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 2206 "pre.l"

	YY_BREAK
case 83:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2207 "pre.l"
{ 
  					  incrLevel();
                                          g_ifcount++; 
  					  //printf("#if... depth=%d\n",g_ifcount);
					}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 2212 "pre.l"
{
					  //printf("Else! g_ifcount=%d otherCaseDone=%d\n",g_ifcount,otherCaseDone());
  					  if (g_ifcount==0 && !otherCaseDone())
					  {
					    setCaseDone(TRUE);
  					    //outputChar('\n');
					    BEGIN(Start);
					  }
  					}
	YY_BREAK
case 85:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2221 "pre.l"
{
  					  if (g_ifcount==0) 
					  {
  					    if (!otherCaseDone())
					    {
					      g_guardExpr.resize(0);
					      g_lastGuardName.resize(0);
  					      BEGIN(Guard);
					    }
					    else
					    {
					      BEGIN(SkipCPPBlock);
					    }
					  }
					}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 2236 "pre.l"
{ 
					  g_expectGuard = FALSE;
  					  decrLevel();
  				          if (--g_ifcount<0)
  					  {
  					    //outputChar('\n');
					    BEGIN(Start);
					  }
					}
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
#line 2245 "pre.l"
{ 
  					  outputChar('\n');
  					  g_yyLineNr++; 
					  BEGIN(SkipCPPBlock);
					}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 2250 "pre.l"
{ // unknown directive 
  					  BEGIN(SkipLine); 
					}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 2253 "pre.l"

	YY_BREAK
case 90:
YY_RULE_SETUP
#line 2254 "pre.l"

	YY_BREAK
case 91:
YY_RULE_SETUP
#line 2255 "pre.l"
{ }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 2256 "pre.l"
{
					  BEGIN(SkipString);
					}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 2259 "pre.l"

	YY_BREAK
case 94:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2260 "pre.l"
{ 
                                        }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 2262 "pre.l"
{
  					  g_lastCPPContext=YY_START;
  					  BEGIN(RemoveCPPComment);
					}
	YY_BREAK
case 96:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2266 "pre.l"
{ 
                                        }
	YY_BREAK
case 97:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2268 "pre.l"
{
					  g_lastCContext=YY_START;
  					  BEGIN(RemoveCComment);
  					}
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 2272 "pre.l"
{
  					  outputChar('\n');
					  g_yyLineNr++;  
					  BEGIN(SkipCPPBlock);
					}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 2277 "pre.l"
{ }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 2278 "pre.l"
{ }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 2279 "pre.l"
{
  					  BEGIN(SkipLine);
  					}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 2282 "pre.l"
{ }
	YY_BREAK
case 103:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2283 "pre.l"
{
  					  g_nospaces=TRUE;
				          g_roundCount=0;
					  g_defArgsStr=preYYtext;
					  g_findDefArgContext = IncludeID;
					  BEGIN(FindDefineArgs);
					}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 2290 "pre.l"
{
  					  g_nospaces=TRUE;
                                          readIncludeFile(expandMacro(preYYtext));
					  BEGIN(Start);
  					}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 2295 "pre.l"
{ 
					  g_incName+=preYYtext;
					  readIncludeFile(g_incName);
					  if (g_isImported)
					  {
					    BEGIN(EndImport);
					  }
					  else
					  {
					    BEGIN(Start);
					  }
  					}
	YY_BREAK
case 106:
/* rule 106 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2307 "pre.l"
{
  					  BEGIN(Start);
  					}
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 2310 "pre.l"
{ 
					  outputChar('\n');
					  g_yyLineNr++;
					}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 2314 "pre.l"
{
  					}
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 2316 "pre.l"
{ // define with argument
  					  //printf("Define() `%s'\n",preYYtext);
					  delete g_argDict;
					  g_argDict = new QDict<int>(31);
					  g_argDict->setAutoDelete(TRUE);
					  g_defArgs = 0; 
                                          g_defArgsStr.resize(0);
					  g_defText.resize(0);
					  g_defLitText.resize(0);
					  g_defName = preYYtext;
					  g_defVarArgs = FALSE;
					  g_defExtraSpacing.resize(0);
					  BEGIN(DefineArg);
  					}
	YY_BREAK
case 110:
/* rule 110 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2330 "pre.l"
{ // special case: define with 1 -> can be "guard"
  					  //printf("Define `%s'\n",preYYtext);
					  delete g_argDict; g_argDict=0;
					  g_defArgs = -1;
                                          g_defArgsStr.resize(0);
					  g_defName = preYYtext;
					  g_defName = g_defName.left(g_defName.length()-1).stripWhiteSpace();
					  g_defVarArgs = FALSE;
					  //printf("Guard check: %s!=%s || %d\n",
					  //    g_defName.data(),g_lastGuardName.data(),g_expectGuard);
					  if (g_curlyCount>0 || g_defName!=g_lastGuardName || !g_expectGuard)
					  { // define may appear in the output
					    QCString tmp=(QCString)"#define "+g_defName;
					    outputArray(tmp.data(),tmp.length());
					    g_quoteArg=FALSE;
					    g_insideComment=FALSE;
					    g_lastGuardName.resize(0);
				            g_defText="1"; 
					    g_defLitText="1"; 
					    BEGIN(DefineText); 
					  }
					  else // define is a guard => hide
					  {
					    //printf("Found a guard %s\n",preYYtext);
					    g_defText.resize(0);
					    g_defLitText.resize(0);
					    BEGIN(Start);
					  }
					  g_expectGuard=FALSE;
  					}
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 2360 "pre.l"
{ // empty define
					  delete g_argDict; g_argDict=0;
					  g_defArgs = -1;
					  g_defName = preYYtext;
                                          g_defArgsStr.resize(0);
					  g_defText.resize(0);
					  g_defLitText.resize(0);
					  g_defVarArgs = FALSE;
					  //printf("Guard check: %s!=%s || %d\n",
					  //    g_defName.data(),g_lastGuardName.data(),g_expectGuard);
					  if (g_curlyCount>0 || g_defName!=g_lastGuardName || !g_expectGuard)
					  { // define may appear in the output
					    QCString tmp=(QCString)"#define "+g_defName;
					    outputArray(tmp.data(),tmp.length());
					    g_quoteArg=FALSE;
					    g_insideComment=FALSE;
					    if (g_insideCS) g_defText="1"; // for C#, use "1" as define text
					    BEGIN(DefineText);
					  }
					  else // define is a guard => hide
					  {
					    //printf("Found a guard %s\n",preYYtext);
					    g_guardName = preYYtext;
					    g_lastGuardName.resize(0);
					    BEGIN(Start);
					  }
					  g_expectGuard=FALSE;
  					}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 2388 "pre.l"
{ // define with content
  					  //printf("Define `%s'\n",preYYtext);
					  delete g_argDict; g_argDict=0;
					  g_defArgs = -1;
                                          g_defArgsStr.resize(0);
					  g_defText.resize(0);
					  g_defLitText.resize(0);
					  g_defName = preYYtext;
					  g_defVarArgs = FALSE;
					  QCString tmp=(QCString)"#define "+g_defName+g_defArgsStr;
					  outputArray(tmp.data(),tmp.length());
					  g_quoteArg=FALSE;
					  g_insideComment=FALSE;
					  BEGIN(DefineText); 
  					}
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 2403 "pre.l"
{
  					  g_defExtraSpacing+="\n";
					  g_yyLineNr++;
                                        }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 2407 "pre.l"
{ g_defArgsStr+=preYYtext; }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 2408 "pre.l"
{ g_defArgsStr+=preYYtext; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 2409 "pre.l"
{
                                          g_defArgsStr+=preYYtext; 
					  QCString tmp=(QCString)"#define "+g_defName+g_defArgsStr+g_defExtraSpacing;
					  outputArray(tmp.data(),tmp.length());
					  g_quoteArg=FALSE;
					  g_insideComment=FALSE;
  					  BEGIN(DefineText);
  					}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 2417 "pre.l"
{ // Variadic macro
					  g_defVarArgs = TRUE;
					  g_defArgsStr+=preYYtext;
					  g_argDict->insert("__VA_ARGS__",new int(g_defArgs));
					  g_defArgs++;
  					}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 2423 "pre.l"
{
  					  //printf("Define addArg(%s)\n",preYYtext);
  					  QCString argName=preYYtext;
  					  g_defVarArgs = preYYtext[preYYleng-1]=='.';
					  if (g_defVarArgs) // strip ellipsis
					  {
					    argName=argName.left(argName.length()-3);
					  }
					  argName = argName.stripWhiteSpace();
                                          g_defArgsStr+=preYYtext;
					  g_argDict->insert(argName,new int(g_defArgs)); 
					  g_defArgs++;
  					}
	YY_BREAK
/*
<DefineText>"/ **"|"/ *!"			{
  					  g_defText+=preYYtext;
					  g_defLitText+=preYYtext;
					  g_insideComment=TRUE;
  					}
<DefineText>"* /"			{
  					  g_defText+=preYYtext;
					  g_defLitText+=preYYtext;
					  g_insideComment=FALSE;
  					}
  */
case 119:
YY_RULE_SETUP
#line 2448 "pre.l"
{
					  g_defText+=preYYtext;
					  g_defLitText+=preYYtext;
					  g_lastCContext=YY_START;
					  g_commentCount=1;
  					  BEGIN(CopyCComment);
  					}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 2455 "pre.l"
{
  					  outputArray(preYYtext,(int)preYYleng);
  					  g_lastCPPContext=YY_START;
					  g_defLitText+=' ';
  					  BEGIN(SkipCPPComment);
  					}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 2461 "pre.l"
{
  					  if (preYYtext[0]=='/') outputChar('/');
  					  outputChar('*');outputChar('/');
					  if (--g_commentCount<=0)
					  {
					    if (g_lastCContext==Start) 
					      // small hack to make sure that ^... rule will
					      // match when going to Start... Example: "/*...*/ some stuff..."
					    {
					      YY_CURRENT_BUFFER->yy_at_bol=1;
					    }
  					    BEGIN(g_lastCContext);  
					  }
  					}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 2475 "pre.l"
{
  					  outputArray(preYYtext,(int)preYYleng);
  					}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 2478 "pre.l"
{
  					  outputChar('/');outputChar('*');
					  //g_commentCount++;
  					}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 2482 "pre.l"
{
  					  outputArray(preYYtext,(int)preYYleng);
  					}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 2485 "pre.l"
{
                                          static bool markdownSupport = Config_getBool(MARKDOWN_SUPPORT);
                                          if (!markdownSupport)
                                          {
                                            REJECT;
                                          }
                                          else
                                          {
  					    outputArray(preYYtext,(int)preYYleng);
                                            g_fenceSize=preYYleng;
                                            BEGIN(SkipVerbatim);
                                          }
                                        }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 2498 "pre.l"
{
                                          static bool markdownSupport = Config_getBool(MARKDOWN_SUPPORT);
                                          if (!markdownSupport)
                                          {
                                            REJECT;
                                          }
                                          else
                                          {
  					    outputArray(preYYtext,(int)preYYleng);
                                            g_fenceSize=preYYleng;
                                            BEGIN(SkipVerbatim);
                                          }
                                        }
	YY_BREAK
case 127:
/* rule 127 can match eol */
YY_RULE_SETUP
#line 2511 "pre.l"
{
  					  outputArray(preYYtext,(int)preYYleng);
  					  g_yyLineNr+=QCString(preYYtext).contains('\n');
  					}
	YY_BREAK
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
#line 2515 "pre.l"
{
  					  outputArray(preYYtext,(int)preYYleng);
  					  g_yyLineNr+=QCString(preYYtext).contains('\n');
                                          g_fenceSize=0;
					  if (preYYtext[1]=='f')
					  {
					    g_blockName="f";
					  }
					  else
					  {
                                            QCString bn=&preYYtext[1];
                                            int i = bn.find('{'); // for \code{.c}
                                            if (i!=-1) bn=bn.left(i);
					    g_blockName=bn.stripWhiteSpace();
					  }
					  BEGIN(SkipVerbatim);
  					}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 2532 "pre.l"
{ // escaped @cond
  					  outputArray(preYYtext,(int)preYYleng);
                                        }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 2535 "pre.l"
{ // conditional section
                                          g_ccomment=TRUE;  
                                          g_condCtx=YY_START;
  					  BEGIN(CondLineCpp);
  					}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 2540 "pre.l"
{ // conditional section
                                          g_ccomment=FALSE;  
                                          g_condCtx=YY_START;
  					  BEGIN(CondLineC);
  					}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 2545 "pre.l"
{
  				          startCondSection(preYYtext);
                                          if (g_skip)
                                          {
                                            if (YY_START==CondLineC)
                                            {
                                              // end C comment
  					      outputArray("*/",2);
                                              g_ccomment=TRUE;
                                            }
                                            else
                                            {
                                              g_ccomment=FALSE;
                                            }
                                            BEGIN(SkipCond);
                                          }
                                          else
                                          {
  					    BEGIN(g_condCtx);
                                          }
  					}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 2566 "pre.l"
{ // non-guard character
  					  unput(*preYYtext);
  					  startCondSection(" ");
                                          if (g_skip)
                                          {
                                            if (YY_START==CondLineC)
                                            {
                                              // end C comment
  					      outputArray("*/",2);
                                              g_ccomment=TRUE;
                                            }
                                            else
                                            {
                                              g_ccomment=FALSE;
                                            }
                                            BEGIN(SkipCond);
                                          }
                                          else
                                          {
					    BEGIN(g_condCtx);
                                          }
  					}
	YY_BREAK
case 134:
/* rule 134 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2588 "pre.l"
{ // no guard
                                          if (YY_START==SkipCComment)
                                          {
                                            g_ccomment=TRUE;
                                            // end C comment
  					    outputArray("*/",2);
                                          }
                                          else
                                          {
                                            g_ccomment=FALSE;
                                          }
                                          g_condCtx=YY_START;
                                          startCondSection(" ");
                                          BEGIN(SkipCond);
  					}
	YY_BREAK
case 135:
/* rule 135 can match eol */
YY_RULE_SETUP
#line 2603 "pre.l"
{ g_yyLineNr++; outputChar('\n'); }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 2604 "pre.l"
{ }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 2605 "pre.l"
{ }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 2606 "pre.l"
{ g_ccomment=FALSE; }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 2607 "pre.l"
{ g_ccomment=TRUE; }
	YY_BREAK
case 140:
/* rule 140 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 9;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2608 "pre.l"
{
                                          if (!g_skip)
                                          {
  					    outputArray(preYYtext,(int)preYYleng);
                                          }
                                        }
	YY_BREAK
case 141:
/* rule 141 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2614 "pre.l"
{ 
                                          bool oldSkip = g_skip;
                                          endCondSection(); 
                                          if (oldSkip && !g_skip)
                                          {
                                            if (g_ccomment)
                                            {
                                              outputArray("/** ",4);
                                            }
                                            BEGIN(g_condCtx);
                                          }
                                        }
	YY_BREAK
case 142:
/* rule 142 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2626 "pre.l"
{
                                          bool oldSkip = g_skip;
  					  endCondSection();
                                          if (oldSkip && !g_skip) 
                                          {
                                            BEGIN(g_condCtx);
                                          }
  					}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 2634 "pre.l"
{ /* end of verbatim block */
  					  outputArray(preYYtext,(int)preYYleng);
					  if (preYYtext[1]=='f' && g_blockName=="f")
					  {
					    BEGIN(SkipCComment);
					  }
					  else if (&preYYtext[4]==g_blockName)
					  {
					    BEGIN(SkipCComment);
					  }
  					}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 2645 "pre.l"
{
  					  outputArray(preYYtext,(int)preYYleng);
                                          if (g_fenceSize==preYYleng)
                                          {
                                            BEGIN(SkipCComment);
                                          }
                                        }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 2652 "pre.l"
{
  					  outputArray(preYYtext,(int)preYYleng);
                                          if (g_fenceSize==preYYleng)
                                          {
                                            BEGIN(SkipCComment);
                                          }
                                        }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 2659 "pre.l"
{
  					  outputArray(preYYtext,(int)preYYleng);
  					}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 2662 "pre.l"
{
  					  outputArray(preYYtext,(int)preYYleng);
  					}
	YY_BREAK
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
#line 2665 "pre.l"
{ 
  					  g_yyLineNr++;
  					  outputChar('\n');
  					}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 2669 "pre.l"
{
  					  outputChar(*preYYtext);
  					}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 2672 "pre.l"
{
					  g_defLitText+=preYYtext;
					  g_defText+=escapeAt(preYYtext);
					}
	YY_BREAK
case 151:
/* rule 151 can match eol */
YY_RULE_SETUP
#line 2676 "pre.l"
{
                                          g_defLitText+=preYYtext;
                                          outputChar('\n');
                                          g_defText+=" ";
                                          g_yyLineNr++;
                                          g_yyMLines++;
                                        }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 2683 "pre.l"
{
					  g_defLitText+=preYYtext;
					  g_defText+=preYYtext;
  					  BEGIN(g_lastCContext);
  					}
	YY_BREAK
case 153:
/* rule 153 can match eol */
YY_RULE_SETUP
#line 2688 "pre.l"
{ 
  					  g_yyLineNr++;
  					  outputChar('\n');
					  g_defLitText+=preYYtext;
					  g_defText+=' ';
  					}
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 2694 "pre.l"
{ // see bug 594021 for a usecase for this rule
                                          if (g_lastCContext==SkipCPPBlock)
					  {
					    BEGIN(SkipCommand);
					  }
					  else
					  {
					    REJECT;
					  }
					}
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 2704 "pre.l"
{ BEGIN(g_lastCContext); }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 2705 "pre.l"

	YY_BREAK
case 157:
YY_RULE_SETUP
#line 2706 "pre.l"

	YY_BREAK
case 158:
YY_RULE_SETUP
#line 2707 "pre.l"

	YY_BREAK
case 159:
/* rule 159 can match eol */
YY_RULE_SETUP
#line 2708 "pre.l"
{ g_yyLineNr++; outputChar('\n'); }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 2709 "pre.l"

	YY_BREAK
case 161:
YY_RULE_SETUP
#line 2710 "pre.l"
{
  					  outputArray(preYYtext,(int)preYYleng);
  					}
	YY_BREAK
case 162:
/* rule 162 can match eol */
YY_RULE_SETUP
#line 2713 "pre.l"
{
  					  unput(*preYYtext);
  					  BEGIN(g_lastCPPContext);
  					}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 2717 "pre.l"
{
  					  outputChar('/');outputChar('*');
  					}
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 2720 "pre.l"
{
  					  outputChar('/');outputChar('/');
  					}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 2723 "pre.l"
{
  					  outputArray(preYYtext,(int)preYYleng);
  					}
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 2726 "pre.l"
{
  					  outputChar(*preYYtext);
  					}
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 2729 "pre.l"

	YY_BREAK
case 168:
YY_RULE_SETUP
#line 2730 "pre.l"

	YY_BREAK
case 169:
YY_RULE_SETUP
#line 2731 "pre.l"

	YY_BREAK
case 170:
YY_RULE_SETUP
#line 2732 "pre.l"

	YY_BREAK
case 171:
YY_RULE_SETUP
#line 2733 "pre.l"
{
  					  g_quoteArg=TRUE;
					  g_defLitText+=preYYtext;
  					}
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 2737 "pre.l"
{
					  g_defLitText+=preYYtext;
  					  if (g_quoteArg)
					  {
					    g_defText+="\"";
					  }
					  if (g_defArgs>0)
					  {
					    int *n;
					    if ((n=(*g_argDict)[preYYtext]))
					    {
					      //if (!g_quoteArg) g_defText+=' ';
					      g_defText+='@';
					      QCString numStr;
					      numStr.sprintf("%d",*n);
					      g_defText+=numStr;
					      //if (!g_quoteArg) g_defText+=' ';
					    }
					    else
					    {
					      g_defText+=preYYtext;
					    }
					  }
					  else
					  {
					    g_defText+=preYYtext;
					  }
					  if (g_quoteArg)
					  {
					    g_defText+="\"";
					  }
					  g_quoteArg=FALSE;
  					}
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 2770 "pre.l"
{
					  g_defLitText+=preYYtext;
					  g_defText+=preYYtext;
  					}
	YY_BREAK
case 174:
/* rule 174 can match eol */
YY_RULE_SETUP
#line 2774 "pre.l"
{
					  g_defLitText+=preYYtext;
					  outputChar('\n');
					  g_defText += ' ';
					  g_yyLineNr++;
					  g_yyMLines++;
					}
	YY_BREAK
case 175:
/* rule 175 can match eol */
YY_RULE_SETUP
#line 2781 "pre.l"
{
					  QCString comment=extractTrailingComment(g_defLitText);
					  g_defLitText+=preYYtext;
					  if (!comment.isEmpty())
					  {
					    outputArray(comment,comment.length());
					    g_defLitText=g_defLitText.left(g_defLitText.length()-comment.length()-1);
					  }
  					  outputChar('\n');
  					  Define *def=0;
					  //printf("Define name=`%s' text=`%s' litTexti=`%s'\n",g_defName.data(),g_defText.data(),g_defLitText.data());
					  if (g_includeStack.isEmpty() || g_curlyCount>0) 
					  {
					    addDefine();
					  }
					  def=DefineManager::instance().isDefined(g_defName);
					  if (def==0) // new define
					  {
					    //printf("new define '%s'!\n",g_defName.data());
					    Define *nd = newDefine();
					    DefineManager::instance().addDefine(g_yyFileName,nd);

					    // also add it to the local file list if it is a source file
					    //if (g_isSource && g_includeStack.isEmpty())
					    //{
					    //  g_fileDefineDict->insert(g_defName,nd);
					    //}
					  }
					  else if (def /*&& macroIsAccessible(def)*/)
					       // name already exists
					  {
					    //printf("existing define!\n");
					    //printf("define found\n");
					    if (def->undef) // undefined name
					    {
					      def->undef = FALSE;
					      def->name = g_defName;
					      def->definition = g_defText.stripWhiteSpace();
					      def->nargs = g_defArgs;
					      def->fileName = g_yyFileName.copy(); 
					      def->lineNr = g_yyLineNr-g_yyMLines;
					      def->columnNr = g_yyColNr;
					    }
					    else
					    {
					      //printf("error: define %s is defined more than once!\n",g_defName.data());
					    }
					  }
					  delete g_argDict; g_argDict=0;
					  g_yyLineNr++;
					  g_yyColNr=1;
					  g_lastGuardName.resize(0);
					  BEGIN(Start);
  					}
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 2835 "pre.l"
{ g_defText += ' '; g_defLitText+=preYYtext; }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 2836 "pre.l"
{ g_defText += "##"; g_defLitText+=preYYtext; }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 2837 "pre.l"
{ g_defText += "@@"; g_defLitText+=preYYtext; }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 2838 "pre.l"
{ 
                                          g_defText += *preYYtext; 
  					  g_defLitText+=preYYtext; 
					  if (!g_insideComment)
					  {
					    BEGIN(SkipDoubleQuote);
					  }
  					}
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 2846 "pre.l"
{ g_defText += *preYYtext;
  					  g_defLitText+=preYYtext; 
					  if (!g_insideComment)
					  {
  					    BEGIN(SkipSingleQuote);
					  }
					}
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 2853 "pre.l"
{ g_defText += preYYtext; g_defLitText+=preYYtext; }
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 2854 "pre.l"
{ g_defText += preYYtext; g_defLitText+=preYYtext; }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 2855 "pre.l"
{
  					  g_defText += *preYYtext; g_defLitText+=preYYtext; 
					  BEGIN(DefineText);
  					}
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 2859 "pre.l"
{
  					  g_defText += preYYtext; g_defLitText+=preYYtext;
					}
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 2862 "pre.l"
{
  					  g_defText += *preYYtext; g_defLitText+=preYYtext;
					  BEGIN(DefineText);
  					}
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 2866 "pre.l"
{ g_defText += *preYYtext; g_defLitText+=preYYtext; }
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 2867 "pre.l"
{ g_defText += *preYYtext; g_defLitText+=preYYtext; }
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 2868 "pre.l"
{ g_defText += *preYYtext; g_defLitText+=preYYtext; }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(Start):
case YY_STATE_EOF(Command):
case YY_STATE_EOF(SkipCommand):
case YY_STATE_EOF(SkipLine):
case YY_STATE_EOF(SkipString):
case YY_STATE_EOF(CopyLine):
case YY_STATE_EOF(CopyString):
case YY_STATE_EOF(CopyStringFtn):
case YY_STATE_EOF(Include):
case YY_STATE_EOF(IncludeID):
case YY_STATE_EOF(EndImport):
case YY_STATE_EOF(DefName):
case YY_STATE_EOF(DefineArg):
case YY_STATE_EOF(DefineText):
case YY_STATE_EOF(SkipCPPBlock):
case YY_STATE_EOF(Ifdef):
case YY_STATE_EOF(Ifndef):
case YY_STATE_EOF(SkipCComment):
case YY_STATE_EOF(ArgCopyCComment):
case YY_STATE_EOF(CopyCComment):
case YY_STATE_EOF(SkipVerbatim):
case YY_STATE_EOF(SkipCPPComment):
case YY_STATE_EOF(RemoveCComment):
case YY_STATE_EOF(RemoveCPPComment):
case YY_STATE_EOF(Guard):
case YY_STATE_EOF(DefinedExpr1):
case YY_STATE_EOF(DefinedExpr2):
case YY_STATE_EOF(SkipDoubleQuote):
case YY_STATE_EOF(SkipSingleQuote):
case YY_STATE_EOF(UndefName):
case YY_STATE_EOF(IgnoreLine):
case YY_STATE_EOF(FindDefineArgs):
case YY_STATE_EOF(ReadString):
case YY_STATE_EOF(CondLineC):
case YY_STATE_EOF(CondLineCpp):
case YY_STATE_EOF(SkipCond):
#line 2869 "pre.l"
{
                                          DBG_CTX((stderr,"End of include file\n"));
					  //printf("Include stack depth=%d\n",g_includeStack.count());
  					  if (g_includeStack.isEmpty())
					  {
					    DBG_CTX((stderr,"Terminating scanner!\n"));
					    yyterminate();
					  }
					  else
					  {
					    FileState *fs=g_includeStack.pop();
					    //fileDefineCache->merge(g_yyFileName,fs->fileName);
					    YY_BUFFER_STATE oldBuf = YY_CURRENT_BUFFER;
					    preYY_switch_to_buffer(fs->bufState );
					    preYY_delete_buffer(oldBuf );
					    g_yyLineNr    = fs->lineNr;
                                            //preYYin = fs->oldYYin;
                                            g_inputBuf    = fs->oldFileBuf;
					    g_inputBufPos = fs->oldFileBufPos;
					    setFileName(fs->fileName);
					    DBG_CTX((stderr,"######## FileName %s\n",g_yyFileName.data()));
					    
                                            // Deal with file changes due to 
                                            // #include's within { .. } blocks
                                            QCString lineStr(15+g_yyFileName.length());
                                            lineStr.sprintf("# %d \"%s\" 2",g_yyLineNr,g_yyFileName.data());
                                            outputArray(lineStr.data(),lineStr.length());
					    
					    delete fs; fs=0;
					  }
  					}
	YY_BREAK
case 189:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
#line 2901 "pre.l"
case 190:
YY_RULE_SETUP
#line 2901 "pre.l"
{
                                          if (YY_START==SkipVerbatim || YY_START==SkipCond)
                                          {
                                            REJECT;
                                          }
                                          else
                                          {
					    outputArray(preYYtext,(int)preYYleng);
  					    g_lastCContext=YY_START;
					    g_commentCount=1;
					    if (preYYleng==3) g_lastGuardName.resize(0); // reset guard in case the #define is documented!
					    BEGIN(SkipCComment);
                                          }
  					}
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 2915 "pre.l"
{
                                          if (YY_START==SkipVerbatim || YY_START==SkipCond || getLanguageFromFileName(g_yyFileName)==SrcLangExt_Fortran)
                                          {
                                            REJECT;
                                          }
                                          else
                                          {
					    outputArray(preYYtext,(int)preYYleng);
  					    g_lastCPPContext=YY_START;
					    if (preYYleng==3) g_lastGuardName.resize(0); // reset guard in case the #define is documented!
					    BEGIN(SkipCPPComment);
                                          }
					}
	YY_BREAK
case 192:
/* rule 192 can match eol */
YY_RULE_SETUP
#line 2928 "pre.l"
{ 
  					  outputChar('\n');
  					  g_yyLineNr++; 
					}
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 2932 "pre.l"
{
  					  g_expectGuard = FALSE;
  					  outputChar(*preYYtext);
  					}
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 2937 "pre.l"
ECHO;
	YY_BREAK
#line 6769 "/home/INTRANET/aitoumel/myfiles/NeuronProject/Week1/doxygen-master/build/generated_src/pre.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed preYYin at a new source and called
			 * preYYlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = preYYin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( preYYwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * preYYtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of preYYlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			preYYrestart(preYYin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) preYYrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 60);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1339 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 60;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1339 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1338);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up preYYtext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					preYYrestart(preYYin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( preYYwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve preYYtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void preYYrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        preYYensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            preYY_create_buffer(preYYin,YY_BUF_SIZE );
	}

	preYY_init_buffer(YY_CURRENT_BUFFER,input_file );
	preYY_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void preYY_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		preYYpop_buffer_state();
	 *		preYYpush_buffer_state(new_buffer);
     */
	preYYensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	preYY_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (preYYwrap()) processing, but the only time this flag
	 * is looked at is after preYYwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void preYY_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	preYYin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE preYY_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) preYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in preYY_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) preYYalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in preYY_create_buffer()" );

	b->yy_is_our_buffer = 1;

	preYY_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with preYY_create_buffer()
 * 
 */
    void preYY_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		preYYfree((void *) b->yy_ch_buf  );

	preYYfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a preYYrestart() or at EOF.
 */
    static void preYY_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	preYY_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then preYY_init_buffer was _probably_
     * called from preYYrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void preYY_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		preYY_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void preYYpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	preYYensure_buffer_stack();

	/* This block is copied from preYY_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from preYY_switch_to_buffer. */
	preYY_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void preYYpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	preYY_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		preYY_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void preYYensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)preYYalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in preYYensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)preYYrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in preYYensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE preYY_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) preYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in preYY_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	preYY_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to preYYlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       preYY_scan_bytes() instead.
 */
YY_BUFFER_STATE preYY_scan_string (yyconst char * yystr )
{
    
	return preYY_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to preYYlex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE preYY_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) preYYalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in preYY_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = preYY_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in preYY_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up preYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		preYYtext[preYYleng] = (yy_hold_char); \
		(yy_c_buf_p) = preYYtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		preYYleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int preYYget_lineno  (void)
{
        
    return preYYlineno;
}

/** Get the input stream.
 * 
 */
FILE *preYYget_in  (void)
{
        return preYYin;
}

/** Get the output stream.
 * 
 */
FILE *preYYget_out  (void)
{
        return preYYout;
}

/** Get the length of the current token.
 * 
 */
int preYYget_leng  (void)
{
        return preYYleng;
}

/** Get the current token.
 * 
 */

char *preYYget_text  (void)
{
        return preYYtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void preYYset_lineno (int  line_number )
{
    
    preYYlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see preYY_switch_to_buffer
 */
void preYYset_in (FILE *  in_str )
{
        preYYin = in_str ;
}

void preYYset_out (FILE *  out_str )
{
        preYYout = out_str ;
}

int preYYget_debug  (void)
{
        return preYY_flex_debug;
}

void preYYset_debug (int  bdebug )
{
        preYY_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from preYYlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    preYYin = stdin;
    preYYout = stdout;
#else
    preYYin = (FILE *) 0;
    preYYout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * preYYlex_init()
     */
    return 0;
}

/* preYYlex_destroy is for both reentrant and non-reentrant scanners. */
int preYYlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		preYY_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		preYYpop_buffer_state();
	}

	/* Destroy the stack itself. */
	preYYfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    preYYfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * preYYlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *preYYalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *preYYrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void preYYfree (void * ptr )
{
	free( (char *) ptr );	/* see preYYrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 2937 "pre.l"



/*@ ----------------------------------------------------------------------------
 */

static int getNextChar(const QCString &expr,QCString *rest,uint &pos)
{
  //printf("getNextChar(%s,%s,%d)\n",expr.data(),rest ? rest->data() : 0,pos);
  if (pos<expr.length())
  {
    //printf("%c=expr()\n",expr.at(pos));
    return expr.at(pos++);
  }
  else if (rest && !rest->isEmpty())
  {
    int cc=rest->at(0);
    *rest=rest->right(rest->length()-1);
    //printf("%c=rest\n",cc);
    return cc;
  }
  else
  {
    int cc=yyinput();
    //printf("%d=yyinput() %d\n",cc,EOF);
    return cc;
  }
}
 
static int getCurrentChar(const QCString &expr,QCString *rest,uint pos)
{
  //printf("getCurrentChar(%s,%s,%d)\n",expr.data(),rest ? rest->data() : 0,pos);
  if (pos<expr.length())
  {
    //printf("%c=expr()\n",expr.at(pos));
    return expr.at(pos);
  }
  else if (rest && !rest->isEmpty())
  {
    int cc=rest->at(0);
    //printf("%c=rest\n",cc);
    return cc;
  }
  else
  {
    int cc=yyinput();
    returnCharToStream(cc);
    //unput((char)cc);
    //printf("%c=yyinput()\n",cc);
    return cc;
  }
}

static void unputChar(const QCString &expr,QCString *rest,uint &pos,char c)
{
  //printf("unputChar(%s,%s,%d,%c)\n",expr.data(),rest ? rest->data() : 0,pos,c);
  if (pos<expr.length())
  {
    pos++;
  }
  else if (rest)
  {
    //printf("Prepending to rest!\n");
    char cs[2];cs[0]=c;cs[1]='\0';
    rest->prepend(cs);
  }
  else
  {
    //unput(c);
    returnCharToStream(c);
  }
  //printf("result: unputChar(%s,%s,%d,%c)\n",expr.data(),rest ? rest->data() : 0,pos,c);
}

void addSearchDir(const char *dir)
{
  QFileInfo fi(dir);
  if (fi.isDir()) g_pathList->append(fi.absFilePath().utf8());
} 

void initPreprocessor()
{
  g_pathList = new QStrList;
  addSearchDir(".");
  g_expandedDict = new DefineDict(17);
}

void cleanUpPreprocessor()
{
  delete g_expandedDict; g_expandedDict=0;
  delete g_pathList; g_pathList=0;
  DefineManager::deleteInstance();
}


void preprocessFile(const char *fileName,BufStr &input,BufStr &output)
{
  printlex(preYY_flex_debug, TRUE, __FILE__, fileName);
  uint orgOffset=output.curPos();
  //printf("##########################\n%s\n####################\n",
  //    input.data());

  g_macroExpansion = Config_getBool(MACRO_EXPANSION);
  g_expandOnlyPredef = Config_getBool(EXPAND_ONLY_PREDEF);
  g_skip=FALSE;
  g_curlyCount=0;
  g_nospaces=FALSE;
  g_inputBuf=&input;
  g_inputBufPos=0;
  g_outputBuf=&output;
  g_includeStack.setAutoDelete(TRUE);
  g_includeStack.clear();
  g_expandedDict->setAutoDelete(FALSE);
  g_expandedDict->clear();
  g_condStack.setAutoDelete(TRUE);
  g_condStack.clear();
  //g_fileDefineDict->clear();

  setFileName(fileName);
  g_inputFileDef = g_yyFileDef;
  DefineManager::instance().startContext(g_yyFileName);
  
  static bool firstTime=TRUE;
  if (firstTime)
  {
    // add predefined macros
    char *defStr;
    QStrList &predefList = Config_getList(PREDEFINED);
    QStrListIterator sli(predefList);
    for (sli.toFirst();(defStr=sli.current());++sli)
    {
      QCString ds = defStr;
      int i_equals=ds.find('=');
      int i_obrace=ds.find('(');
      int i_cbrace=ds.find(')');
      bool nonRecursive = i_equals>0 && ds.at(i_equals-1)==':';

      if (i_obrace==0) continue; // no define name

      if (i_obrace<i_equals && i_cbrace<i_equals && 
	  i_obrace!=-1      && i_cbrace!=-1      && 
	  i_obrace<i_cbrace
	 ) // predefined function macro definition
      {
	//printf("predefined function macro '%s'\n",defStr);
	QRegExp reId("[a-z_A-Z\x80-\xFF][a-z_A-Z0-9\x80-\xFF]*"); // regexp matching an id
	QDict<int> argDict(17);
	argDict.setAutoDelete(TRUE);
	int i=i_obrace+1,p,l,count=0;
	// gather the formal arguments in a dictionary 
	while (i<i_cbrace && (p=reId.match(ds,i,&l)))
	{
          if (l>0) // see bug375037
          {
	    argDict.insert(ds.mid(p,l),new int(count++));
	    i=p+l;
          }
          else
          {
            i++;
          }
	}
	// strip definition part
	QCString tmp=ds.right(ds.length()-i_equals-1);
	QCString definition;
	i=0;
	// substitute all occurrences of formal arguments by their 
	// corresponding markers
	while ((p=reId.match(tmp,i,&l))!=-1)
	{
	  if (p>i) definition+=tmp.mid(i,p-i);
	  int *argIndex;
	  if ((argIndex=argDict[tmp.mid(p,l)])!=0)
	  {
	    QCString marker;
	    marker.sprintf(" @%d ",*argIndex);
	    definition+=marker;
	  }
	  else
	  {
	    definition+=tmp.mid(p,l);
	  }
	  i=p+l;
	}
	if (i<(int)tmp.length()) definition+=tmp.mid(i,tmp.length()-i);

	// add define definition to the dictionary of defines for this file
	QCString dname = ds.left(i_obrace);
	if (!dname.isEmpty())
	{
	  Define *def = new Define;
	  def->name         = dname;
	  def->definition   = definition; 
	  def->nargs        = count;
	  def->isPredefined = TRUE;
	  def->nonRecursive = nonRecursive;
	  def->fileDef      = g_yyFileDef;
	  def->fileName     = fileName;
	  DefineManager::instance().addDefine(g_yyFileName,def);
	}

	//printf("#define `%s' `%s' #nargs=%d\n",
	//  def->name.data(),def->definition.data(),def->nargs);
      }
      else if ((i_obrace==-1 || i_obrace>i_equals) &&
	  (i_cbrace==-1 || i_cbrace>i_equals) &&
	  !ds.isEmpty() && (int)ds.length()>i_equals
	  ) // predefined non-function macro definition
      {
	//printf("predefined normal macro '%s'\n",defStr);
	Define *def = new Define;
	if (i_equals==-1) // simple define without argument
	{
	  def->name = ds;
	  def->definition = "1"; // substitute occurrences by 1 (true)
	}
	else // simple define with argument
	{
	  int ine=i_equals - (nonRecursive ? 1 : 0);
	  def->name = ds.left(ine);
	  def->definition = ds.right(ds.length()-i_equals-1);
	}
	if (!def->name.isEmpty())
	{
	  def->nargs = -1;
	  def->isPredefined = TRUE;
	  def->nonRecursive = nonRecursive;
	  def->fileDef      = g_yyFileDef;
	  def->fileName     = fileName;
	  DefineManager::instance().addDefine(g_yyFileName,def);
	}
	else
	{
	  delete def;
	}

	//printf("#define `%s' `%s' #nargs=%d\n",
	//  def->name.data(),def->definition.data(),def->nargs);
      }
    }
    //firstTime=FALSE;
  }
 
  g_yyLineNr = 1;
  g_yyColNr  = 1;
  g_level    = 0;
  g_ifcount  = 0;

  BEGIN( Start );
  
  g_expectGuard = guessSection(fileName)==Entry::HEADER_SEC;
  g_guardName.resize(0);
  g_lastGuardName.resize(0);
  g_guardExpr.resize(0);
  
  preYYlex();
  g_lexInit=TRUE;

  while (!g_condStack.isEmpty())
  {
    CondCtx *ctx = g_condStack.pop();
    QCString sectionInfo = " ";
    if (ctx->sectionId!=" ") sectionInfo.sprintf(" with label %s ",ctx->sectionId.data()); 
    warn(fileName,ctx->lineNr,"Conditional section%sdoes not have "
	"a corresponding \\endcond command within this file.",sectionInfo.data());
    delete ctx;
  }
  // make sure we don't extend a \cond with missing \endcond over multiple files (see bug 624829)
  forceEndCondSection();

  // remove locally defined macros so they can be redefined in another source file
  //if (g_fileDefineDict->count()>0)
  //{
  //  QDictIterator<Define> di(*g_fileDefineDict);
  //  Define *d;
  //  for (di.toFirst();(d=di.current());++di)
  //  {
  //    g_globalDefineDict->remove(di.currentKey());
  //  }
  //  g_fileDefineDict->clear();
  //}

  if (Debug::isFlagSet(Debug::Preprocessor))
  {
    char *orgPos=output.data()+orgOffset;
    char *newPos=output.data()+output.curPos();
    Debug::print(Debug::Preprocessor,0,"Preprocessor output (size: %d bytes):\n",newPos-orgPos);
    int line=1;
    Debug::print(Debug::Preprocessor,0,"---------\n00001 ");
    while (orgPos<newPos) 
    {
      putchar(*orgPos);
      if (*orgPos=='\n') Debug::print(Debug::Preprocessor,0,"%05d ",++line);
      orgPos++;
    }
    Debug::print(Debug::Preprocessor,0,"\n---------\n");
    if (DefineManager::instance().defineContext().count()>0)
    {
      Debug::print(Debug::Preprocessor,0,"Macros accessible in this file:\n");
      Debug::print(Debug::Preprocessor,0,"---------\n");
      QDictIterator<Define> di(DefineManager::instance().defineContext());
      Define *def;
      for (di.toFirst();(def=di.current());++di)
      {
        Debug::print(Debug::Preprocessor,0,"%s ",qPrint(def->name));
      }
      Debug::print(Debug::Preprocessor,0,"\n---------\n");
    }
    else
    {
      Debug::print(Debug::Preprocessor,0,"No macros accessible in this file.\n");
    }
  }
  DefineManager::instance().endContext();
  printlex(preYY_flex_debug, FALSE, __FILE__, fileName);
}

void preFreeScanner()
{
#if defined(YY_FLEX_SUBMINOR_VERSION) 
  if (g_lexInit)
  {
    preYYlex_destroy();
  }
#endif
}

#if !defined(YY_FLEX_SUBMINOR_VERSION) 
extern "C" { // some bogus code to keep the compiler happy
//  int  preYYwrap() { return 1 ; }
  void preYYdummy() { yy_flex_realloc(0,0); } 
}
#endif


